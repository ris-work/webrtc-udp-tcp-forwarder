<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SIPSorcery</name>
    </assembly>
    <members>
        <member name="T:SIPSorcery.Media.AudioSendOnlyMediaSession">
            <summary>
            A media session that will send a generated audio signal or silence to the remote party
            and ignore any RTP it receives. This class is intended for testing scenarios.
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.AudioEncoder.#ctor(System.Boolean)">
            <summary>
            Creates a new audio encoder instance.
            </summary>
            <param name="includeLinearFormats">If set to true the linear audio formats will be added
            to the list of supported formats. The reason they are only included if explicitly requested
            is they are not very popular for other VoIP systems and thereofre needlessly pollute the SDP.</param>
        </member>
        <member name="M:SIPSorcery.Media.AudioEncoder.DecodeAudio(System.Byte[],SIPSorceryMedia.Abstractions.AudioFormat)">
            <summary>
            Event handler for receiving RTP packets from the remote party.
            </summary>
            <param name="encodedSample">Data received from an RTP socket.</param>
            <param name="format">The audio format of the encoded packets.</param>
        </member>
        <member name="T:SIPSorcery.Media.MuLawEncoder">
            <summary>
            mu-law encoder
            based on code from:
            http://hazelware.luggle.com/tutorials/mulawcompression.html
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.MuLawEncoder.LinearToMuLawSample(System.Int16)">
            <summary>
            Encodes a single 16 bit sample to mu-law
            </summary>
            <param name="sample">16 bit PCM sample</param>
            <returns>mu-law encoded byte</returns>
        </member>
        <member name="T:SIPSorcery.Media.ALawEncoder">
            <summary>
            A-law encoder
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.ALawEncoder.LinearToALawSample(System.Int16)">
            <summary>
            Encodes a single 16 bit sample to a-law
            </summary>
            <param name="sample">16 bit PCM sample</param>
            <returns>a-law encoded byte</returns>
        </member>
        <member name="T:SIPSorcery.Media.ALawDecoder">
            <summary>
            a-law decoder
            based on code from:
            http://hazelware.luggle.com/tutorials/mulawcompression.html
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.ALawDecoder.ALawDecompressTable">
            <summary>
            only 512 bytes required, so just use a lookup
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.ALawDecoder.ALawToLinearSample(System.Byte)">
            <summary>
            Converts an a-law encoded byte to a 16 bit linear sample
            </summary>
            <param name="aLaw">a-law encoded byte</param>
            <returns>Linear sample</returns>
        </member>
        <member name="T:SIPSorcery.Media.MuLawDecoder">
            <summary>
            mu-law decoder
            based on code from:
            http://hazelware.luggle.com/tutorials/mulawcompression.html
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.MuLawDecoder.MuLawDecompressTable">
            <summary>
            only 512 bytes required, so just use a lookup
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.MuLawDecoder.MuLawToLinearSample(System.Byte)">
            <summary>
            Converts a mu-law encoded byte to a 16 bit linear sample
            </summary>
            <param name="muLaw">mu-law encoded byte</param>
            <returns>Linear sample</returns>
        </member>
        <member name="T:SIPSorcery.Media.G722Codec">
            <summary>
            SpanDSP - a series of DSP components for telephony
            
            g722_decode.c - The ITU G.722 codec, decode part.
            
            Written by Steve Underwood &lt;steveu@coppice.org&gt;
            
            Copyright (C) 2005 Steve Underwood
            Ported to C# by Mark Heath 2011
            
            Despite my general liking of the GPL, I place my own contributions 
            to this code in the public domain for the benefit of all mankind -
            even the slimy ones who might try to proprietize my work and use it
            to my detriment.
             
            Based in part on a single channel G.722 codec which is:
            Copyright (c) CMU 1993
            Computer Science, Speech Group
            Chengxiang Lu and Alex Hauptmann
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.G722Codec.Saturate(System.Int32)">
            <summary>
            hard limits to 16 bit samples
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.G722Codec.Decode(SIPSorcery.Media.G722CodecState,System.Int16[],System.Byte[],System.Int32)">
            <summary>
            Decodes a buffer of G722
            </summary>
            <param name="state">Codec state</param>
            <param name="outputBuffer">Output buffer (to contain decompressed PCM samples)</param>
            <param name="inputG722Data"></param>
            <param name="inputLength">Number of bytes in input G722 data to decode</param>
            <returns>Number of samples written into output buffer</returns>
        </member>
        <member name="M:SIPSorcery.Media.G722Codec.Encode(SIPSorcery.Media.G722CodecState,System.Byte[],System.Int16[],System.Int32)">
            <summary>
            Encodes a buffer of G722
            </summary>
            <param name="state">Codec state</param>
            <param name="outputBuffer">Output buffer (to contain encoded G722)</param>
            <param name="inputBuffer">PCM 16 bit samples to encode</param>
            <param name="inputBufferCount">Number of samples in the input buffer to encode</param>
            <returns>Number of encoded bytes written into output buffer</returns>
        </member>
        <member name="T:SIPSorcery.Media.G722CodecState">
            <summary>
            Stores state to be used between calls to Encode or Decode
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.G722CodecState.ItuTestMode">
            <summary>
            ITU Test Mode
            TRUE if the operating in the special ITU test mode, with the band split filters disabled.
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.G722CodecState.Packed">
            <summary>
            TRUE if the G.722 data is packed
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.G722CodecState.EncodeFrom8000Hz">
            <summary>
            8kHz Sampling
            TRUE if encode from 8k samples/second
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.G722CodecState.BitsPerSample">
            <summary>
            Bits Per Sample
            6 for 48000kbps, 7 for 56000kbps, or 8 for 64000kbps.
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.G722CodecState.QmfSignalHistory">
            <summary>
            Signal history for the QMF (x)
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.G722CodecState.Band">
            <summary>
            Band
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.G722CodecState.InBuffer">
            <summary>
            In bit buffer
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.G722CodecState.InBits">
            <summary>
            Number of bits in InBuffer
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.G722CodecState.OutBuffer">
            <summary>
            Out bit buffer
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.G722CodecState.OutBits">
            <summary>
            Number of bits in OutBuffer
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.G722CodecState.#ctor(System.Int32,SIPSorcery.Media.G722Flags)">
            <summary>
            Creates a new instance of G722 Codec State for a 
            new encode or decode session
            </summary>
            <param name="rate">Bitrate (typically 64000)</param>
            <param name="options">Special options</param>
        </member>
        <member name="T:SIPSorcery.Media.Band">
            <summary>
            Band data for G722 Codec
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.Band.s">
            <summary>s</summary>
        </member>
        <member name="F:SIPSorcery.Media.Band.sp">
            <summary>sp</summary>
        </member>
        <member name="F:SIPSorcery.Media.Band.sz">
            <summary>sz</summary>
        </member>
        <member name="F:SIPSorcery.Media.Band.r">
            <summary>r</summary>
        </member>
        <member name="F:SIPSorcery.Media.Band.a">
            <summary>a</summary>
        </member>
        <member name="F:SIPSorcery.Media.Band.ap">
            <summary>ap</summary>
        </member>
        <member name="F:SIPSorcery.Media.Band.p">
            <summary>p</summary>
        </member>
        <member name="F:SIPSorcery.Media.Band.d">
            <summary>d</summary>
        </member>
        <member name="F:SIPSorcery.Media.Band.b">
            <summary>b</summary>
        </member>
        <member name="F:SIPSorcery.Media.Band.bp">
            <summary>bp</summary>
        </member>
        <member name="F:SIPSorcery.Media.Band.sg">
            <summary>sg</summary>
        </member>
        <member name="F:SIPSorcery.Media.Band.nb">
            <summary>nb</summary>
        </member>
        <member name="F:SIPSorcery.Media.Band.det">
            <summary>det</summary>
        </member>
        <member name="T:SIPSorcery.Media.G722Flags">
            <summary>
            G722 Flags
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.G722Flags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.G722Flags.SampleRate8000">
            <summary>
            Using a G722 sample rate of 8000
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.G722Flags.Packed">
            <summary>
            Packed
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.AcelpCo.ACELP_codebook(System.Single[],System.Single[],System.Int32,System.Single,System.Int32,System.Single[],System.Single[],SIPSorcery.Media.G729Codec.IntReference)">
            
             @param x             (i)     :Target vector
             @param h             (i)     :Impulse response of filters
             @param t0            (i)     :Pitch lag
             @param pitch_sharp   (i)     :Last quantized pitch gain
             @param i_subfr       (i)     :Indicator of 1st subframe,
             @param code          (o)     :Innovative codebook
             @param y             (o)     :Filtered innovative codebook
             @param sign          (o)     :Signs of 4 pulses
             @return              index of pulses positions
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.AcelpCo.cor_h(System.Single[],System.Single[])">
             Compute  correlations of h[]  needed for the codebook search.
            
             @param h     (i) :Impulse response of filters
             @param rr    (o) :Correlations of H[]
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.AcelpCo.d4i40_17(System.Single[],System.Single[],System.Single[],System.Single[],System.Single[],SIPSorcery.Media.G729Codec.IntReference,System.Int32)">
             Algebraic codebook search 17 bits; 4 pulses 40 sampleframe
            
             @param dn        (i) : backward filtered target vector
             @param rr        (i) : autocorrelations of impulse response h[]
             @param h         (i) : impulse response of filters
             @param cod       (o) : selected algebraic codeword
             @param y         (o) : output: selected algebraic codeword
             @param signs     (o) : signs of 4 pulses
             @param i_subfr   (i) subframe flag
             @return          pulse positions
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Bits.prm2bits_ld8k(System.Int32[],System.Int16[])">
             Converts encoder parameter vector into vector of serial bits.
            
             @param prm        input : encoded parameters
             @param bits       output: serial bits
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Bits.int2bin(System.Int32,System.Int32,System.Int16[],System.Int32)">
             Convert integer to binary and write the bits bitstream array.
            
             @param value             input : decimal value
             @param no_of_bits        input : number of bits to use
             @param bitstream         output: bitstream
             @param bitstream_offset  input: bitstream offset
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Bits.bits2prm_ld8k(System.Int16[],System.Int32[])">
             Converts serial received bits to  encoder parameter vector.
            
             @param bits  input : serial bits
             @param prm   output: decoded parameters
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Bits.bits2prm_ld8k(System.Int16[],System.Int32,System.Int32[],System.Int32)">
             Converts serial received bits to  encoder parameter vector.
            
             @param bits           input : serial bits
             @param bits_offset    input : serial bits offset
             @param prm            output: decoded parameters
             @param prm_offset     input: decoded parameters offset
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Bits.bin2int(System.Int32,System.Int16[],System.Int32)">
             Read specified bits from bit array  and convert to integer value.
            
             @param no_of_bits        input : number of bits to read
             @param bitstream         input : array containing bits
             @param bitstream_offset  input : array offset
             @return                   decimal value of bit pattern
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.CodLd8k.init_coder_ld8k">
             Initialization of variables for the encoder.
             Initialize pointers to speech vector.
            <pre> <![CDATA[
               |--------------------|-------------|-------------|------------|
                 previous speech           sf1           sf2         L_NEXT
            
               <----------------  Total speech vector (L_TOTAL)   ----------->
               |   <------------  LPC analysis window (L_WINDOW)  ----------->
               |   |               <-- present frame (L_FRAME) -->
             old_speech            |              <-- new speech (L_FRAME) -->
                 p_wind            |              |
                                 speech           |
                                         new_speech
             ]]></pre>
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.CodLd8k.coder_ld8k(System.Int32[])">
             Encoder routine ( speech data should be in new_speech ).
            
             @param ana   output: analysis parameters
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.CorFunc.corr_xy2(System.Single[],System.Single[],System.Single[],System.Single[])">
             Compute the correlation products needed for gain computation.
            
             @param xn        input : target vector x[0:l_subfr]
             @param y1        input : filtered adaptive codebook vector
             @param y2        input : filtered 1st codebook innovation
             @param g_coeff   <![CDATA[ output: <y2,y2> , -2<xn,y2> , and 2<y1,y2> ]]>
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.CorFunc.cor_h_x(System.Single[],System.Single[],System.Single[])">
             Compute  correlations of input response h[] with the target vector X[].
            
             @param h     (i) :Impulse response of filters
             @param x     (i) :Target vector
             @param d     (o) :Correlations between h[] and x[]
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.DeAcelp.decod_ACELP(System.Int32,System.Int32,System.Single[])">
             Algebraic codebook decoder.
            
             @param sign      input : signs of 4 pulses
             @param index     input : positions of 4 pulses
             @param cod       output: innovative codevector
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.DecGain.dec_gain(System.Int32,System.Single[],System.Int32,System.Int32,SIPSorcery.Media.G729Codec.FloatReference,SIPSorcery.Media.G729Codec.FloatReference)">
             Decode the adaptive and fixed codebook gains.
            
             @param index         input : quantizer index
             @param code          input : fixed code book vector
             @param l_subfr       input : subframe size
             @param bfi           input : bad frame indicator good = 0
             @param gain_pit      output: quantized acb gain
             @param gain_code     output: quantized fcb gain
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.DecLag3.dec_lag3(System.Int32,System.Int32,System.Int32,System.Int32,SIPSorcery.Media.G729Codec.IntReference,SIPSorcery.Media.G729Codec.IntReference)">
             Decoding of fractional pitch lag with 1/3 resolution.
             See the source for more details about the encoding procedure.
            
             @param index      input : received pitch index
             @param pit_min    input : minimum pitch lag
             @param pit_max    input : maximum pitch lag
             @param i_subfr    input : subframe flag
             @param T0         output: integer part of pitch lag
             @param T0_frac    output: fractional part of pitch lag
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.DecLd8k.exc">
            Excitation vector
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.DecLd8k.exc_offset">
            Excitation vector offset
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.DecLd8k.gain_code">
            fixed codebook gain
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.DecLd8k.gain_pitch">
            adaptive codebook gain
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.DecLd8k.lsp_old">
            Lsp (Line spectral pairs)
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.DecLd8k.mem_syn">
            Filter's memory
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.DecLd8k.old_exc">
            Excitation vector
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.DecLd8k.old_t0">
            integer delay of previous frame
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.DecLd8k.sharp">
            pitch sharpening of previous fr
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.DecLd8k.init_decod_ld8k">
            Initialization of variables for the decoder section.
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.DecLd8k.decod_ld8k(System.Int32[],System.Int32,System.Single[],System.Int32,System.Single[])">
             Decoder
            
             @param parm          input : synthesis parameters (parm[0] = bfi)
             @param voicing       input : voicing decision from previous frame
             @param synth         output: synthesized speech
             @param synth_offset  input : synthesized speech offset
             @param A_t           output: two sets of A(z) coefficients length=2*MP1
             @return              output: integer delay of first subframe
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Filter.convolve(System.Single[],System.Int32,System.Single[],System.Single[],System.Int32)">
             Convolve vectors x and h and put result in y.
            
             @param x         input : input vector x[0:l]
             @param x_offset  input : input vector offset
             @param h         input : impulse response or second input h[0:l]
             @param y         output: x convolved with h , y[0:l]
             @param l         input : dimension of all vectors
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Filter.syn_filt(System.Single[],System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.Int32,System.Single[],System.Int32,System.Int32)">
             Filter with synthesis filter 1/A(z).
            
             @param a          input : predictor coefficients a[0:m]
             @param a_offset   input : predictor coefficients a offset
             @param x          input : excitation signal
             @param x_offset   input : excitation signal offset
             @param y          output: filtered output signal
             @param y_offset   output: filtered output signal offset
             @param l          input : vector dimension
             @param mem        in/out: filter memory
             @param mem_offset input : filter memory ofset
             @param update     input : 0 = no memory update, 1 = update
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Filter.residu(System.Single[],System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
             Filter input vector with all-zero filter A(Z).
            
             @param a         input : prediction coefficients a[0:m+1], a[0]=1.
             @param a_offset  input : prediction coefficients a offset
             @param x         input : input signal x[0:l-1], x[-1:m] are needed
             @param x_offset  input : input signal x offset
             @param y         output: output signal y[0:l-1].
                              NOTE: x[] and y[] cannot point to same array
             @param y_offset  input : output signal y offset
             @param l         input : dimension of x and y
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Gainpred.gain_predict(System.Single[],System.Single[],System.Int32)">
             MA prediction is performed on the innovation energy (in dB with mean
             removed).
            
             @param past_qua_en       (i)     :Past quantized energies
             @param code              (i)     :Innovative vector.
             @param l_subfr           (i)     :Subframe length.
             @return                  Predicted codebook gain
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Gainpred.gain_update(System.Single[],System.Single)">
             Update table of past quantized energies.
            
             @param past_qua_en        input/output :Past quantized energies
             @param g_code             input: gbk1[indice1][1]+gbk2[indice2][1]
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Gainpred.gain_update_erasure(System.Single[])">
             Update table of past quantized energies (frame erasure).
             <pre> <![CDATA[
                 av_pred_en = 0.0;
                 for (i = 0; i < 4; i++)
                    av_pred_en += past_qua_en[i];
                 av_pred_en = av_pred_en*0.25 - 4.0;
                 if (av_pred_en < -14.0) av_pred_en = -14.0;
             ]]></pre>
            
             @param past_qua_en   input/output:Past quantized energies
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.AGC_FAC">
            gain adjustment factor
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.AGC_FAC1">
            gain adjustment factor
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.BIT_0">
            Definition of zero-bit in bit-stream.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.BIT_1">
            Definition of one-bit in bit-stream.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.DIM_RR">
            Size of correlation matrix
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.F_UP_PST">
            resolution for fractionnal delay
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.FLT_MAX_G729">
            Largest floating point number
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.FLT_MIN_G729">
            Largest floating point number
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.GAIN_PIT_MAX">
            maximum adaptive codebook gain
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.GAMMA_G">
            LT weighting factor
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.GAMMA1_PST">
            denominator weighting factor
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.GAMMA2_PST">
            numerator  weighting factor
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.GAMMA3_MINUS">
            tilt weighting factor when k1 &lt; 0
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.GAMMA3_PLUS">
            tilt weighting factor when k1 &gt; 0
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.GP0999">
            Maximum pitch gain if taming is needed
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.GPCLIP">
            Maximum pitch gain if taming is needed
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.GPCLIP2">
            Maximum pitch gain if taming is needed
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.GRID_POINTS">
            Resolution of lsp search.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.L_FRAME">
            LPC update frame size
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.L_INTERPOL">
            Length for pitch interpolation
            upsampling ration for pitch search
            Length of filter for interpolation.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.L_NEXT">
            Samples of next frame needed for LPC ana.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.L_SUBFRP1">
            Sub-frame size + 1
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.L_TOTAL">
            Total size of speech buffer
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.L_WINDOW">
            LPC analysis window size.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.LH2_L_P1">
            length of long interp. subfilters
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.LONG_H_ST">
            length of short interp. subfilters
            impulse response length
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.M">
            LPC order.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.MA_NP">
            MA prediction order for LSP.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.MEAN_ENER">
            Average innovation energy
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.MIN_GPLT">
            LT gain minimum
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.MODE">
            Number of modes for MA prediction.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.MP1">
            LPC order+1.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.MSIZE">
            Size of vectors for cross-correlation between 2 pulses
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.NB_POS">
            Number of positions for each pulse
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.NC">
            LPC order / 2.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.NC0_B">
            Number of entries in first stage.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.NC1_B">
            Number of bits in first stage.
            Number of entries in second stage.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.NCAN1">
            Number of bits in second stage.
            Pre-selecting order for #1
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.NCAN2">
            Pre-selecting order for #2
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.NCODE1_B">
            Codebook 1 size
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.NCODE2_B">
            Number of Codebook-bit
            Codebook 2 size
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.PI">
            Number of Codebook-bit
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.PI04">
            pi*0.04
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.PI92">
            pi*0.92
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.PIT_MIN">
            Minimum pitch lag in samples
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.PRM_SIZE">
            Number of parameters per 10 ms frame.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.SERIAL_SIZE">
            Bits per frame.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.SHARPMAX">
            Maximum value of pitch sharpening
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.SHARPMIN">
            minimum value of pitch sharpening
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.SIZE_WORD">
            Size of bitstream frame.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.STEP">
            Step betweem position of the same pulse.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.SYNC_WORD">
            Definition of frame erasure flag.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.THRESCRIT">
            threshold LT pst switch off
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.THRESH_ERR">
            Error threshold taming
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Ld8k.THRESHPIT">
            Threshold to favor smaller pitch lags
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lpc.autocorr(System.Single[],System.Int32,System.Int32,System.Single[])">
             Compute the auto-correlations of windowed speech signal
            
             @param x         (i) input signal x[0:L_WINDOW]
             @param x_offset  (i) input signal offset
             @param m         (i) LPC order
             @param r         (o) auto-correlation vector r[0:M]
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lpc.lag_window(System.Int32,System.Single[])">
             Lag windowing of the autocorrelations
            
             @param m (i) LPC order
             @param r (i/o) correlation
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lpc.levinson(System.Single[],System.Single[],System.Int32,System.Single[])">
             Levinson-Durbin recursion to compute LPC parameters.
            
             @param r         (i) auto correlation coefficients r[0:M]
             @param a         (o) lpc coefficients a[0] = 1
             @param a_offset  (i) lpc coefficients offset
             @param rc        (o) reflection coefficients rc[0:M-1]
             @return          prediction error (energy)
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lpc.az_lsp(System.Single[],System.Int32,System.Single[],System.Single[])">
                                                                                                    *
             Compute the LSPs from  the LP coefficients a[] using Chebyshev
             polynomials. The found LSPs are in the cosine domain with values
             in the range from 1 down to -1.
             The table grid[] contains the points (in the cosine domain) at
             which the polynomials are evaluated. The table corresponds to
             NO_POINTS frequencies uniformly spaced between 0 and pi.
            
             @param a         (i) LP filter coefficients
             @param a_offset  (i) LP filter coefficients offset
             @param lsp       (o) Line spectral pairs (in the cosine domain)
             @param old_lsp   (i) LSP vector from past frame
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lpc.chebyshev(System.Single,System.Single[],System.Int32)">
             Evaluates the Chebyshev polynomial series.
            
              The polynomial order is
                 n = m/2   (m is the prediction order)
              The polynomial is given by
                C(x) = T_n(x) + f(1)T_n-1(x) + ... +f(n-1)T_1(x) + f(n)/2
            
             @param x     (i) value of evaluation; x=cos(freq)
             @param f     (i) coefficients of sum or diff polynomial
             @param n     (i) order of polynomial
             @return      the value of the polynomial C(x)
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lpcfunc.lsp_az(System.Single[],System.Single[],System.Int32)">
             Convert LSPs to predictor coefficients a[]
            
             @param lsp       input : lsp[0:M-1]
             @param a         output: predictor coeffs a[0:M], a[0] = 1.
             @param a_offset  input: predictor coeffs a offset.
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lpcfunc.get_lsp_pol(System.Single[],System.Int32,System.Single[])">
             Find the polynomial F1(z) or F2(z) from the LSFs
            
             @param lsp           input : line spectral freq. (cosine domain)
             @param lsp_offset    input : line spectral freq offset
             @param f             output: the coefficients of F1 or F2
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lpcfunc.lsf_lsp(System.Single[],System.Single[],System.Int32)">
             Convert from lsf[0..M-1 to lsp[0..M-1]
            
             @param lsf   input :  lsf
             @param lsp   output: lsp
             @param m     input : length
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lpcfunc.lsp_lsf(System.Single[],System.Single[],System.Int32)">
             Convert from lsp[0..M-1 to lsf[0..M-1]
            
             @param lsp   input :  lsp coefficients
             @param lsf   output:  lsf (normalized frequencies
             @param m     input: length
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lpcfunc.weight_az(System.Single[],System.Int32,System.Single,System.Int32,System.Single[])">
             Weighting of LPC coefficients  ap[i]  =  a[i] * (gamma ** i)
            
             @param a          input : lpc coefficients a[0:m]
             @param a_offset   input : lpc coefficients  offset
             @param gamma      input : weighting factor
             @param m          input : filter order
             @param ap         output: weighted coefficients ap[0:m]
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lpcfunc.int_qlpc(System.Single[],System.Single[],System.Single[])">
             Interpolated M LSP parameters and convert to M+1 LPC coeffs
            
             @param lsp_old    input : LSPs for past frame (0:M-1)
             @param lsp_new    input : LSPs for present frame (0:M-1)
             @param az         output: filter parameters in 2 subfr (dim 2(m+1))
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lpcfunc.int_lpc(System.Single[],System.Single[],System.Single[],System.Single[],System.Single[])">
             Interpolated M LSP parameters and convert to M+1 LPC coeffs
            
             @param lsp_old   input : LSPs for past frame (0:M-1)
             @param lsp_new   input : LSPs for present frame (0:M-1)
             @param lsf_int   output: interpolated lsf coefficients
             @param lsf_new   input : LSFs for present frame (0:M-1)
             @param az        output: filter parameters in 2 subfr (dim 2(m+1))
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Lspdec.FREQ_PREV_RESET">
            Previous LSP vector(init)
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Lspdec.freq_prev">
            Previous LSP vector
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Lspdec.prev_lsp">
            Previous LSP vector
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Lspdec.prev_ma">
            Previous MA prediction coef
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lspdec.lsp_decw_reset">
            Set the previous LSP vectors.
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lspdec.lsp_iqua_cs(System.Int32[],System.Int32,System.Single[],System.Int32)">
             LSP main quantization routine
            
             @param prm           input : codes of the selected LSP
             @param prm_offset    input : codes offset
             @param lsp_q         output: Quantized LSP parameters
             @param erase         input : frame erase information
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lspdec.d_lsp(System.Int32[],System.Int32,System.Single[],System.Int32)">
             Decode lsp parameters
            
             @param index          input : indexes
             @param index_offset   input : indexes offset
             @param lsp_q          output: decoded lsp
             @param bfi            input : frame erase information
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lspgetq.lsp_get_quant(System.Single[][],System.Single[][],System.Int32,System.Int32,System.Int32,System.Single[][],System.Single[][],System.Single[],System.Single[])">
             Reconstruct quantized LSP parameter and check the stabilty
            
             @param lspcb1        input : first stage LSP codebook
             @param lspcb2        input : Second stage LSP codebook
             @param code0         input : selected code of first stage
             @param code1         input : selected code of second stage
             @param code2         input : selected code of second stage
             @param fg            input : MA prediction coef.
             @param freq_prev     input : previous LSP vector
             @param lspq          output: quantized LSP parameters
             @param fg_sum        input : present MA prediction coef.
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lspgetq.lsp_expand_1(System.Single[],System.Single)">
             Check for lower (0-4)
            
             @param buf   in/out: lsp vectors
             @param gap   input : gap
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lspgetq.lsp_expand_2(System.Single[],System.Single)">
             Check for higher (5-9)
            
             @param buf   in/out: lsp vectors
             @param gap   input : gap
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lspgetq.lsp_expand_1_2(System.Single[],System.Single)">
            
             @param buf   in/out: LSP parameters
             @param gap   input:  gap
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lspgetq.lsp_prev_compose(System.Single[],System.Single[],System.Single[][],System.Single[][],System.Single[])">
             Compose LSP parameter from elementary LSP with previous LSP.
            
             @param lsp_ele       (i) Q13 : LSP vectors
             @param lsp           (o) Q13 : quantized LSP parameters
             @param fg            (i) Q15 : MA prediction coef.
             @param freq_prev     (i) Q13 : previous LSP vector
             @param fg_sum        (i) Q15 : present MA prediction coef.
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lspgetq.lsp_prev_extract(System.Single[],System.Single[],System.Single[][],System.Single[][],System.Single[])">
             Extract elementary LSP from composed LSP with previous LSP
            
             @param lsp           (i) Q13 : unquantized LSP parameters
             @param lsp_ele       (o) Q13 : target vector
             @param fg            (i) Q15 : MA prediction coef.
             @param freq_prev     (i) Q13 : previous LSP vector
             @param fg_sum_inv    (i) Q12 : inverse previous LSP vector
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lspgetq.lsp_prev_update(System.Single[],System.Single[][])">
             Update previous LSP parameter
            
             @param lsp_ele       input : LSP vectors
             @param freq_prev     input/output: previous LSP vectors
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Lspgetq.lsp_stability(System.Single[])">
             Check stability of lsp coefficients
            
             @param buf in/out: LSP parameters
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Pitch.pitch_ol(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
             Compute the open loop pitch lag.
            
             @param signal            input : signal to compute pitch
                                      s[-PIT_MAX : l_frame-1]
             @param signal_offset     input : signal offset
             @param pit_min           input : minimum pitch lag
             @param pit_max           input : maximum pitch lag
             @param l_frame           input : error minimization window
             @return                  open-loop pitch lag
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Pitch.lag_max(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,SIPSorcery.Media.G729Codec.FloatReference)">
             Find the lag that has maximum correlation
            
             @param signal            input : Signal to compute the open loop pitch
                                      signal[-142:-1] should be known.
             @param signal_offset     input : signal offset
             @param l_frame           input : Length of frame to compute pitch
             @param lagmax            input : maximum lag
             @param lagmin            input : minimum lag
             @param cor_max           input : normalized correlation of selected lag
             @return lag found
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Pitch.pitch_fr3(System.Single[],System.Int32,System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Int32,SIPSorcery.Media.G729Codec.IntReference)">
             Find the pitch period  with 1/3 subsample resolution
            
             @param exc           input : excitation buffer
             @param exc_offset    input : excitation buffer offset
             @param xn            input : target vector
             @param h             input : impulse response of filters.
             @param l_subfr       input : Length of frame to compute pitch
             @param t0_min        input : minimum value in the searched range
             @param t0_max        input : maximum value in the searched range
             @param i_subfr       input : indicator for first subframe
             @param pit_frac      output: chosen fraction
             @return          integer part of pitch period
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Pitch.norm_corr(System.Single[],System.Int32,System.Single[],System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32)">
             Find the normalized correlation between the target vector and
             the filtered past excitation.
            
             @param exc                   input : excitation buffer
             @param exc_offset            input : excitation buffer offset
             @param xn                    input : target vector
             @param h                     input : imp response of synth and weighting flt
             @param l_subfr               input : Length of frame to compute pitch
             @param t_min                 input : minimum value of searched range
             @param t_max                 input : maximum value of search range
             @param corr_norm             output: normalized correlation (correlation
                                          between target and filtered excitation divided
                                          by the square root of energy of filtered
                                          excitation)
             @param corr_norm_offset      input: normalized correlation offset
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Pitch.g_pitch(System.Single[],System.Single[],System.Single[],System.Int32)">
            <![CDATA[
             Compute adaptive codebook gain and compute <y1,y1> , -2<xn,y1>
            
             @param xn        input : target vector
             @param y1        input : filtered adaptive codebook vector
             @param g_coeff   output: <y1,y1> and -2<xn,y1>
             @param l_subfr   input : vector dimension
             @return          pitch gain
             ]]>
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Pitch.enc_lag3(System.Int32,System.Int32,SIPSorcery.Media.G729Codec.IntReference,SIPSorcery.Media.G729Codec.IntReference,System.Int32,System.Int32,System.Int32)">
             Function enc_lag3()
             Encoding of fractional pitch lag with 1/3 resolution.
             <pre>
             The pitch range for the first subframe is divided as follows:
               19 1/3  to   84 2/3   resolution 1/3
               85      to   143      resolution 1
            
             The period in the first subframe is encoded with 8 bits.
             For the range with fractions:
               index = (T-19)*3 + frac - 1;   where T=[19..85] and frac=[-1,0,1]
             and for the integer only range
               index = (T - 85) + 197;        where T=[86..143]
            ----------------------------------------------------------------------
             For the second subframe a resolution of 1/3 is always used, and the
             search range is relative to the lag in the first subframe.
             If t0 is the lag in the first subframe then
              t_min=t0-5   and  t_max=t0+4   and  the range is given by
                   t_min - 2/3   to  t_max + 2/3
            
             The period in the 2nd subframe is encoded with 5 bits:
               index = (T-(t_min-1))*3 + frac - 1;    where T[t_min-1 .. t_max+1]
             </pre>
            
             @param T0            input : Pitch delay
             @param T0_frac       input : Fractional pitch delay
             @param T0_min        in/out: Minimum search delay
             @param T0_max        in/out: Maximum search delay
             @param pit_min       input : Minimum pitch delay
             @param pit_max       input : Maximum pitch delay
             @param pit_flag      input : Flag for 1st subframe
             @return              Return index of encoding
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Pitch.interpol_3(System.Single[],System.Int32,System.Int32)">
             For interpolating the normalized correlation
            
             @param x          input : function to be interpolated
             @param x_offset   input : function offset
             @param frac       input : fraction value to evaluate
             @return           interpolated value
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Pitch.inv_sqrt(System.Single)">
             Compute y = 1 / sqrt(x)
            
             @param x input : value of x
             @return output: 1/sqrt(x)
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Postfil.apond2">
            s.t. numerator coeff.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Postfil.gain_prec">
            for gain adjustment
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Postfil.mem_stp">
            s.t. postfilter memory
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Postfil.mem_zero">
            null memory to compute h_st
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.Postfil.res2">
            A(gamma2) residual
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Postfil.init_post_filter">
            Initialize postfilter functions
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Postfil.post(System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.Single[],System.Int32)">
             Adaptive postfilter main function
            
             @param t0                input : pitch delay given by coder
             @param signal_ptr        input : input signal (pointer to current subframe)
             @param signal_ptr_offset input : input signal offset
             @param coeff             input : LPC coefficients for current subframe
             @param coeff_offset      input : LPC coefficients offset
             @param sig_out           output: postfiltered output
             @param sig_out_offset    input: postfiltered output offset
             @return                  voicing decision 0 = uv,  > 0 delay
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Postfil.pst_ltp(System.Int32,System.Single[],System.Int32,System.Single[],System.Int32)">
             Harmonic postfilter
            
             @param t0                    input : pitch delay given by coder
             @param ptr_sig_in            input : postfilter input filter (residu2)
             @param ptr_sig_in_offset     input : postfilter input filter offset
             @param ptr_sig_pst0          output: harmonic postfilter output
             @param ptr_sig_pst0_offset   input: harmonic postfilter offset
             @return                      voicing decision 0 = uv,  > 0 delay
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Postfil.search_del(System.Int32,System.Single[],System.Int32,SIPSorcery.Media.G729Codec.IntReference,SIPSorcery.Media.G729Codec.IntReference,SIPSorcery.Media.G729Codec.FloatReference,SIPSorcery.Media.G729Codec.FloatReference,System.Single[],SIPSorcery.Media.G729Codec.IntReference)">
             Computes best (shortest) integer LTP delay + fine search
            
             @param t0                input : pitch delay given by coder
             @param ptr_sig_in        input : input signal (with delay line)
             @param ptr_sig_in_offset input : input signal offset
             @param ltpdel            output: delay = *ltpdel - *phase / f_up
             @param phase             output: phase
             @param num_gltp          output: numerator of LTP gain
             @param den_gltp          output: denominator of LTP gain
             @param y_up
             @param off_yup
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Postfil.filt_plt(System.Single[],System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.Single)">
             Ltp  postfilter
            
             @param s_in          input : input signal with past
             @param s_in_offset   input : input signal offset
             @param s_ltp         input : filtered signal with gain 1
             @param s_ltp_offset  input : filtered signal offset
             @param s_out         output: output signal
             @param s_out_offset  input: output signal offset
             @param gain_plt      input : filter gain
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Postfil.compute_ltp_l(System.Single[],System.Int32,System.Int32,System.Int32,System.Single[],System.Int32,SIPSorcery.Media.G729Codec.FloatReference,SIPSorcery.Media.G729Codec.FloatReference)">
             Compute delayed signal,
             num &amp; den of gain for fractional delay
             with long interpolation filter
            
             @param s_in           input signal with past
             @param s_in_offset    input signal with past
             @param ltpdel         delay factor
             @param phase          phase factor
             @param y_up           delayed signal
             @param y_up_offset    delayed signal offset
             @param num            numerator of LTP gain
             @param den            denominator of LTP gain
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Postfil.select_ltp(System.Single,System.Single,System.Single,System.Single)">
             Selects best of (gain1, gain2)
             with gain1 = num1 / den1
             and  gain2 = num2 / den2
            
             @param num1  input : numerator of gain1
             @param den1  input : denominator of gain1
             @param num2  input : numerator of gain2
             @param den2  input : denominator of gain2
             @return      1 = 1st gain, 2 = 2nd gain
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Postfil.calc_st_filt(System.Single[],System.Single[],System.Single[],System.Int32)">
             Computes impulse response of A(gamma2) / A(gamma1).
             controls gain : computation of energy impulse response as
                                SUMn  (abs (h[n])) and computes parcor0
            
             @param apond2                input : coefficients of numerator
             @param apond1                input : coefficients of denominator
             @param sig_ltp_ptr           in/out: input of 1/A(gamma1) : scaled by 1/g0
             @param sig_ltp_ptr_offset    input : input of 1/A(gamma1) ... offset
             @return  1st parcor calcul. on composed filter
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Postfil.calc_rc0_h(System.Single[])">
             Computes 1st parcor from composed filter impulse response.
            
             @param h     input : impulse response of composed filter
             @return      1st parcor
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Postfil.filt_mu(System.Single[],System.Single[],System.Int32,System.Single)">
             Tilt filtering with : (1 + mu z-1) * (1/1-|mu|).
             computes y[n] = (1/1-|mu|) (x[n]+mu*x[n-1])
            
             @param sig_in            input : input signal (beginning at sample -1)
             @param sig_out           output: output signal
             @param sig_out_offset    input: output signal offset
             @param parcor0           input : parcor0 (mu = parcor0 * gamma3)
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Postfil.scale_st(System.Single[],System.Int32,System.Single[],System.Int32,System.Single)">
             Control of the subframe gain.
             gain[n] = AGC_FAC * gain[n-1] + (1 - AGC_FAC) g_in/g_out
            
             @param sig_in            input : postfilter input signal
             @param sig_in_offset     input : postfilter input signal offset
             @param sig_out           in/out: postfilter output signal
             @param sig_out_offset    input: postfilter output signal offset
             @param gain_prec         input : last value of gain for subframe
             @return gain_prec        last value of gain for subframe
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.PostPro.x0">
            High-pass fir memory
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.PostPro.x1">
            High-pass fir memory
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.PostPro.y1">
            High-pass iir memory
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.PostPro.y2">
            High-pass iir memory
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.PostPro.init_post_process">
            Init Post Process.
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.PostPro.post_process(System.Single[],System.Int32)">
             Post Process
            
             @param signal        (i/o)  : signal
             @param lg            (i)    : lenght of signal
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.PParity.parity_pitch(System.Int32)">
             Compute parity bit for first 6 MSBs
            
             @param pitch_index   input : index for which parity is computed
             @return              parity bit (XOR of 6 MSB bits)
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.PParity.check_parity_pitch(System.Int32,System.Int32)">
             Check parity of index with transmitted parity
            
             @param pitch_index   input : index of parameter
             @param parity        input : parity bit
             @return              0 = no error, 1= error
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.PredLt3.pred_lt_3(System.Single[],System.Int32,System.Int32,System.Int32,System.Int32)">
             Compute the result of long term prediction with fractional
             interpolation of resolution 1/3.
            
             On return exc[0..L_subfr-1] contains the interpolated signal
               (adaptive codebook excitation)
            
             @param exc            in/out: excitation vector, exc[0:l_sub-1] = out
             @param exc_offset     input: excitation vector offset
             @param t0             input : pitch lag
             @param frac           input : Fraction of pitch lag (-1, 0, 1)  / 3
             @param l_subfr        input : length of subframe.
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.PreProc.x0">
            High-pass fir memory
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.PreProc.x1">
            High-pass fir memory
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.PreProc.y1">
            High-pass iir memory
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.PreProc.y2">
            High-pass iir memory
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.PreProc.init_pre_process">
            Init Pre Process
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.PreProc.pre_process(System.Single[],System.Int32,System.Int32)">
             Pre Process
            
             @param signal            (i/o)  : signal
             @param signal_offset     (input)  : signal offset
             @param lg                (i)    : length of signal
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Pwf.perc_var(System.Single[],System.Single[],System.Single[],System.Single[],System.Single[])">
             Adaptive bandwidth expansion for perceptual weighting filter
            
             @param gamma1        output: gamma1 value
             @param gamma2        output: gamma2 value
             @param lsfint        input : Interpolated lsf vector : 1st subframe
             @param lsfnew        input : lsf vector : 2nd subframe
             @param r_c           input : Reflection coefficients
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.QuaGain.qua_gain(System.Single[],System.Single[],System.Int32,SIPSorcery.Media.G729Codec.FloatReference,SIPSorcery.Media.G729Codec.FloatReference,System.Int32)">
             Quantization of pitch and codebook gains
            
             @param code          input : fixed codebook vector
             @param g_coeff       input : correlation factors
             @param l_subfr       input : fcb vector length
             @param gain_pit      output: quantized acb gain
             @param gain_code     output: quantized fcb gain
             @param tameflag      input : flag set to 1 if taming is needed
             @return              quantizer index
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.QuaGain.gbk_presel(System.Single[],SIPSorcery.Media.G729Codec.IntReference,SIPSorcery.Media.G729Codec.IntReference,System.Single)">
             Presearch for gain codebook
            
             @param best_gain     input : [0] unquantized pitch gain
                                          [1] unquantized code gain
             @param cand1         output: index of best 1st stage vector
             @param cand2         output: index of best 2nd stage vector
             @param gcode0        input : presearch for gain codebook
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.QuaLsp.FREQ_PREV_RESET">
            previous LSP vector(init)
        </member>
        <member name="F:SIPSorcery.Media.G729Codec.QuaLsp.freq_prev">
            previous LSP vector
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.QuaLsp.qua_lsp(System.Single[],System.Single[],System.Int32[])">
            @param lsp       (i) : Unquantized LSP
            @param lsp_q     (o) : Quantized LSP
            @param ana       (o) : indexes
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.QuaLsp.lsp_encw_reset">
            Set the previous LSP vector
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.QuaLsp.lsp_qua_cs(System.Single[],System.Single[],System.Int32[])">
             Lsp quantizer
            
             @param flsp_in       input : Original LSP parameters
             @param lspq_out      output: Quantized LSP parameters
             @param code          output: codes of the selected LSP
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.QuaLsp.relspwed(System.Single[],System.Single[],System.Single[],System.Single[][],System.Single[][],System.Single[][][],System.Single[][],System.Single[][],System.Single[][],System.Int32[])">
            
             @param lsp            input: unquantized LSP parameters
             @param wegt           input: weight coef.
             @param lspq           output:quantized LSP parameters
             @param lspcb1         input : first stage LSP codebook
             @param lspcb2         input: Second stage LSP codebook
             @param fg             input: MA prediction coef.
             @param freq_prev      input: previous LSP vector
             @param fg_sum         input: present MA prediction coef.
             @param fg_sum_inv     input: inverse coef.
             @param code_ana       output:codes of the selected LSP
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.QuaLsp.lsp_pre_select(System.Single[],System.Single[][])">
             Select the code of first stage lsp codebook
            
             @param rbuf      input : target vetor
             @param lspcb1    input : first stage lsp codebook
             @return          selected code
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.QuaLsp.lsp_select_1(System.Single[],System.Single[],System.Single[],System.Single[][])">
             Select the code of second stage lsp codebook (lower 0-4)
            
             @param rbuf      input : target vector
             @param lspcb1    input : first stage lsp codebook
             @param wegt      input : weight coef.
             @param lspcb2    input : second stage lsp codebook
             @return          selected codebook index
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.QuaLsp.lsp_select_2(System.Single[],System.Single[],System.Single[],System.Single[][])">
             Select the code of second stage lsp codebook (higher 5-9)
            
             @param rbuf      input : target vector
             @param lspcb1    input : first stage lsp codebook
             @param wegt      input : weighting coef.
             @param lspcb2    input : second stage lsp codebook
             @return          selected codebook index
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.QuaLsp.lsp_get_tdist(System.Single[],System.Single[],System.Single[],System.Single[])">
             Calculate the distortion
            
             @param wegt      input : weight coef.
             @param buf       input : candidate LSP vector
             @param rbuf      input : target vector
             @param fg_sum    input : present MA prediction coef.
             @return          distortion
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.QuaLsp.lsp_last_select(System.Single[])">
             Select the mode
            
             @param tdist     distortion
             @return          the selected mode
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.QuaLsp.get_wegt(System.Single[],System.Single[])">
             Compute lsp weights
            
             @param flsp      input : M LSP parameters
             @param wegt      output: M weighting coefficients
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Taming.test_err(System.Int32,System.Int32)">
             Computes the accumulated potential error in the
             adaptive codebook contribution
            
             @param t0        (i) integer part of pitch delay
             @param t0_frac   (i) fractional part of pitch delay
             @return          flag set to 1 if taming is necessary
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Taming.update_exc_err(System.Single,System.Int32)">
             Maintains the memory used to compute the error
             function due to an adaptive codebook mismatch between encoder and
             decoder
            
             @param gain_pit      (i) pitch gain
             @param t0            (i) integer part of pitch delay
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Util.set_zero(System.Single[],System.Int32)">
             Assigns the value zero to element of the specified array of floats.
             The number of components set to zero equal to the length argument.
            
             @param x     (o)    : vector to clear
             @param L     (i)    : length of vector
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Util.set_zero(System.Single[],System.Int32,System.Int32)">
             Assigns the value zero to element of the specified array of floats.
             The number of components set to zero equal to the length argument.
             The components at positions offset through offset+length-1 in the
             array are set to zero.
            
             @param x          (o)    : vector to clear
             @param offset     (i)    : offset of vector
             @param length     (i)    : length of vector
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Util.copy(System.Single[],System.Single[],System.Int32)">
             Copies an array from the specified x array, to the specified y array.
             The number of components copied is equal to the length argument.
            
             @param x     (i)   : input vector
             @param y     (o)   : output vector
             @param L     (i)   : vector length
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Util.copy(System.Single[],System.Int32,System.Single[],System.Int32)">
             Copies an array from the specified source array,
             beginning at the specified destination array.
             A subsequence of array components are copied from the source array referenced
             by x to the destination array referenced by y.
             The number of components copied is equal to the length argument.
             The components at positions x_offset through x_offset+length-1 in the source
             array are copied into positions 0 through length-1,
             respectively, of the destination array.
            
             @param x         (i)   : input vector
             @param x_offset  (i)   : input vector offset
             @param y         (o)   : output vector
             @param L         (i)   : vector length
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Util.copy(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
             Copies an array from the specified source array,
             beginning at the specified position,
             to the specified position of the destination array.
             A subsequence of array components are copied from the source array referenced
             by x to the destination array referenced by y.
             The number of components copied is equal to the length argument.
             The components at positions x_offset through x_offset+length-1 in the source
             array are copied into positions y_offset through y_offset+length-1,
             respectively, of the destination array.
            
             @param x         (i)   : input vector
             @param x_offset  (i)   : input vector offset
             @param y         (o)   : output vector
             @param y_offset  (i)   : output vector offset
             @param L         (i)   : vector length
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Util.random_g729">
             Return random short.
            
             @return random short
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Util.fwrite(System.Int16[],System.Int32,System.IO.Stream)">
             Write <code>data</code> in <code>fp</code>
            
             @param data
             @param length
             @param fp
             @throws java.io.IOException
        </member>
        <member name="M:SIPSorcery.Media.G729Codec.Util.fread(System.Int16[],System.Int32,System.IO.Stream)">
             Read <code>data</code> from <code>fp</code>.
            
             @param data
             @param length
             @param fp
             @return length of resulting data array
             @throws java.io.IOException
        </member>
        <member name="F:SIPSorcery.Media.G729Decoder.Az_dec">
            Synthesis parameters + BFI
        </member>
        <member name="F:SIPSorcery.Media.G729Decoder.decLd8k">
            DecLd8k reference
        </member>
        <member name="F:SIPSorcery.Media.G729Decoder.parm">
            Synthesis parameters + BFI
        </member>
        <member name="F:SIPSorcery.Media.G729Decoder.postfil">
            Postfil reference
        </member>
        <member name="F:SIPSorcery.Media.G729Decoder.postPro">
            PostPro reference
        </member>
        <member name="F:SIPSorcery.Media.G729Decoder.pst_out">
            postfilter output
        </member>
        <member name="F:SIPSorcery.Media.G729Decoder.synth">
            Synthesis
        </member>
        <member name="F:SIPSorcery.Media.G729Decoder.synth_buf">
            Synthesis
        </member>
        <member name="F:SIPSorcery.Media.G729Decoder.synth_offset">
            Synthesis
        </member>
        <member name="F:SIPSorcery.Media.G729Decoder.voicing">
            voicing for previous subframe
        </member>
        <member name="M:SIPSorcery.Media.G729Decoder.#ctor">
            Initialization of decoder
        </member>
        <member name="M:SIPSorcery.Media.G729Decoder.floats2shorts(System.Single[],System.Int16[])">
             Converts floats array into shorts array.
            
             @param floats
             @param shorts
        </member>
        <member name="M:SIPSorcery.Media.G729Decoder.ProcessPacket(System.Int16[],System.Int16[])">
             Process <code>SERIAL_SIZE</code> short of speech.
            
             @param serial    input : serial array encoded in bits_ld8k
             @param sp16      output : speech short array
        </member>
        <member name="M:SIPSorcery.Media.G729Decoder.Process(System.Byte[])">
             Main decoder routine
             Usage :Decoder bitstream_file  outputspeech_file
            
             Format for bitstream_file:
             One (2-byte) synchronization word
               One (2-byte) size word,
               80 words (2-byte) containing 80 bits.
            
             Format for outputspeech_file:
               Synthesis is written to a binary file of 16 bits data.
            
             @param args bitstream_file  outputspeech_file
             @throws java.io.IOException
        </member>
        <member name="F:SIPSorcery.Media.G729Encoder._leftover">
            Initialization of the coder.
        </member>
        <member name="F:SIPSorcery.Media.G729Encoder.codLd8k">
            Init the Ld8k Coder
        </member>
        <member name="F:SIPSorcery.Media.G729Encoder.preProc">
            Init the PreProc
        </member>
        <member name="F:SIPSorcery.Media.G729Encoder.prm">
            Transmitted parameters
        </member>
        <member name="M:SIPSorcery.Media.G729Encoder.ProcessPacket(System.Int16[],System.Int16[])">
             Process <code>L_FRAME</code> short of speech.
            
             @param sp16      input : speach short array
             @param serial    output : serial array encoded in bits_ld8k
        </member>
        <member name="M:SIPSorcery.Media.G729Encoder.Process(System.Byte[])">
             Usage : coder  speech_file  bitstream_file
            
             Format for speech_file:
              Speech is read form a binary file of 16 bits data.
            
             Format for bitstream_file:
               One word (2-bytes) to indicate erasure.
               One word (2 bytes) to indicate bit rate
               80 words (2-bytes) containing 80 bits.
            
             @param args speech_file  bitstream_file
             @throws java.io.IOException
        </member>
        <member name="F:SIPSorcery.Media.AudioSourcesEnum.Music">
            <summary>
            Plays music samples from a file. The file will be played in a loop until
            another source option is set.
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.AudioSourcesEnum.Silence">
            <summary>
            Send an audio stream of silence. Note this option does result
            in audio RTP packet getting sent.
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.AudioSourcesEnum.WhiteNoise">
            <summary>
            White noise static.
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.AudioSourcesEnum.SineWave">
            <summary>
            A continuous sine wave.
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.AudioSourcesEnum.PinkNoise">
            <summary>
            Pink noise static.
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.AudioSourcesEnum.None">
            <summary>
            Don't generate any audio samples.
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.AudioSourceOptions.AudioSource">
            <summary>
            The type of audio source to use.
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.AudioSourceOptions.MusicInputSamplingRate">
            <summary>
            The sampling rate used to generate the input or if the source is
            being generated the sample rate to generate it at.
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.AudioSourceOptions.MusicFile">
            <summary>
            If the audio source is set to music this must be the path to a raw PCM 8K sampled file.
            If set to null or the file doesn't exist the default embedded resource music file will
            be used.
            </summary>
        </member>
        <member name="T:SIPSorcery.Media.AudioExtrasSource">
            <summary>
            An audio source implementation that provides a diverse range of audio source options.
            The available options encompass signal generation, playback from file and more.
            </summary>
        </member>
        <member name="E:SIPSorcery.Media.AudioExtrasSource.OnSendFromAudioStreamComplete">
            <summary>
            Fires when the current send audio from stream operation completes. Send from
            stream operations are intended to be short snippets of audio that get sent 
            as interruptions to the primary audio stream.
            </summary>
        </member>
        <member name="E:SIPSorcery.Media.AudioExtrasSource.OnAudioSourceRawSample">
            <summary>
            This audio source DOES NOT generate raw samples. Subscribe to the encoded samples event
            to get samples ready for passing to the RTP transport layer.
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.AudioExtrasSource.#ctor(SIPSorceryMedia.Abstractions.IAudioEncoder,SIPSorcery.Media.AudioSourceOptions)">
            <summary>
            Instantiates an audio source that can generate output samples from a variety of different
            non-live sources.
            </summary>
            <param name="audioOptions">Optional. The options that determine the type of audio to stream to the remote party. 
            Example type of audio sources are music, silence, white noise etc.</param>
        </member>
        <member name="M:SIPSorcery.Media.AudioExtrasSource.StartAudio">
            <summary>
            Initialises the audio source as required.
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.AudioExtrasSource.SendAudioFromStream(System.IO.Stream,SIPSorceryMedia.Abstractions.AudioSamplingRatesEnum)">
            <summary>
            Attempts to send audio samples from a stream, typically a file, input.
            </summary>
            <param name="audioStream">The stream containing the 16 bit PCM sampled at either 8 or 16Khz 
            to send to the remote party.</param>
            <param name="streamSampleRate">The sample rate of the supplied PCM samples. Supported rates are
            8 or 16 KHz.</param>
            <returns>A task that completes once the stream has been fully sent.</returns>
        </member>
        <member name="M:SIPSorcery.Media.AudioExtrasSource.CancelSendAudioFromStream">
            <summary>
            Cancels an in-progress send audio from stream operation.
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.AudioExtrasSource.SetSource(SIPSorcery.Media.AudioSourcesEnum)">
            <summary>
            Convenience method for audio sources when only default options are required,
            e.g. the default music file rather than a custom one.
            </summary>
            <param name="audioSource">The audio source to set. The call will fail
            if the source requires additional options, e.g. stream from file.</param>
        </member>
        <member name="M:SIPSorcery.Media.AudioExtrasSource.SetSource(SIPSorcery.Media.AudioSourceOptions)">
            <summary>
            Sets the source for the session. Overrides any existing source.
            </summary>
            <param name="sourceOptions">The new audio source.</param>
        </member>
        <member name="M:SIPSorcery.Media.AudioExtrasSource.InitialiseSendAudioFromStreamTimer(System.IO.Stream,SIPSorceryMedia.Abstractions.AudioSamplingRatesEnum)">
            <summary>
            Sends a stream containing 16 bit PCM audio to the remote party. Calling this method
            will pause the existing audio source until the stream has been sent.
            </summary>
            <param name="audioStream">The stream containing the 16 bit PCM, sampled at either 8 or 16 Khz,
            to send to the remote party.</param>
            <param name="streamSampleRate">The sample rate of the supplied PCM samples. Supported rates are
            8 or 16 KHz.</param>
        </member>
        <member name="M:SIPSorcery.Media.AudioExtrasSource.SendMusicSample(System.Object)">
            <summary>
            Sends audio samples read from a file.
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.AudioExtrasSource.SendSilenceSample(System.Object)">
            <summary>
            Sends the sounds of silence.
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.AudioExtrasSource.SendSignalGeneratorSample(System.Object)">
            <summary>
            Sends a sample from a signal generator generated waveform.
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.AudioExtrasSource.SendStreamSample(System.Object)">
            <summary>
            Sends audio samples read from a file containing 16 bit PCM samples.
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.AudioExtrasSource.StopSendFromAudioStream">
            <summary>
            Stops a send from audio stream job.
            </summary>
        </member>
        <member name="T:SIPSorcery.Media.SignalGenerator">
            <summary>
            Signal Generator
            Sin, Square, Triangle, SawTooth, White Noise, Pink Noise, Sweep.
            </summary>
            <remarks>
            Posibility to change ISampleProvider
            Example :
            ---------
            WaveOut _waveOutGene = new WaveOut();
            WaveGenerator wg = new SignalGenerator();
            wg.Type = ...
            wg.Frequency = ...
            wg ...
            _waveOutGene.Init(wg);
            _waveOutGene.Play();
            </remarks>
        </member>
        <member name="M:SIPSorcery.Media.SignalGenerator.#ctor">
            <summary>
            Initializes a new instance for the Generator (Default :: 44.1Khz, 2 channels, Sinus, Frequency = 440, Gain = 1)
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.SignalGenerator.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance for the Generator (UserDef SampleRate &amp; Channels)
            </summary>
            <param name="sampleRate">Desired sample rate</param>
            <param name="channels">Number of channels</param>
        </member>
        <member name="P:SIPSorcery.Media.SignalGenerator.Frequency">
            <summary>
            Frequency for the Generator. (20.0 - 20000.0 Hz)
            Sin, Square, Triangle, SawTooth, Sweep (Start Frequency).
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.SignalGenerator.FrequencyLog">
            <summary>
            Return Log of Frequency Start (Read only)
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.SignalGenerator.FrequencyEnd">
            <summary>
            End Frequency for the Sweep Generator. (Start Frequency in Frequency)
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.SignalGenerator.FrequencyEndLog">
            <summary>
            Return Log of Frequency End (Read only)
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.SignalGenerator.Gain">
            <summary>
            Gain for the Generator. (0.0 to 1.0)
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.SignalGenerator.PhaseReverse">
            <summary>
            Channel PhaseReverse
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.SignalGenerator.Type">
            <summary>
            Type of Generator.
            </summary>
        </member>
        <member name="P:SIPSorcery.Media.SignalGenerator.SweepLengthSecs">
            <summary>
            Length Seconds for the Sweep Generator.
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.SignalGenerator.Read(System.Single[],System.Int32,System.Int32)">
            <summary>
            Reads from this provider.
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.SignalGenerator.NextRandomTwo">
            <summary>
            Private :: Random for WhiteNoise &amp; Pink Noise (Value form -1 to 1)
            </summary>
            <returns>Random value from -1 to +1</returns>
        </member>
        <member name="T:SIPSorcery.Media.SignalGeneratorType">
            <summary>
            Signal Generator type
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.SignalGeneratorType.Pink">
            <summary>
            Pink noise
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.SignalGeneratorType.White">
            <summary>
            White noise
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.SignalGeneratorType.Sweep">
            <summary>
            Sweep
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.SignalGeneratorType.Sin">
            <summary>
            Sine wave
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.SignalGeneratorType.Square">
            <summary>
            Square wave
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.SignalGeneratorType.Triangle">
            <summary>
            Triangle Wave
            </summary>
        </member>
        <member name="F:SIPSorcery.Media.SignalGeneratorType.SawTooth">
            <summary>
            Sawtooth wave
            </summary>
        </member>
        <member name="E:SIPSorcery.Media.VideoTestPatternSource.OnVideoSourceRawSample">
            <summary>
            Unencoded test pattern samples.
            </summary>
        </member>
        <member name="E:SIPSorcery.Media.VideoTestPatternSource.OnVideoSourceEncodedSample">
            <summary>
            If a video encoder has been set then this event contains the encoded video
            samples.
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.VideoTestPatternSource.SetMaxFrameRate(System.Boolean)">
            <summary>
            If this gets set the frames will be generated in a loop with no pause. Ideally this would
            only ever be done in load test scenarios.
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.VideoTestPatternSource.GenerateRawSample(System.Int32,System.Int32,System.Byte[])">
            <summary>
            Consumers subscribing to the <seealso cref="E:SIPSorcery.Media.VideoTestPatternSource.OnVideoSourceRawSample"/> will most likely want bitmap samples.
            This method takes the I420 buffer for the test patten frame, converts it to BGR and fire the event.
            </summary>
            <param name="i420Buffer">The I420 buffer representing the test pattern.</param>
        </member>
        <member name="M:SIPSorcery.Media.VideoTestPatternSource.StampI420Buffer(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            TODO: Add something better for a dynamic stamp on an I420 buffer. This is useful to provide
            a visual indication to the receiver that the video stream has not stalled.
            </summary>
        </member>
        <member name="T:SIPSorcery.Media.VoIPMediaSession">
            <summary>
            This class serves as a bridge, or mapping, between the media end points, typically 
            provided by a separate package, and a media session. Its goal is to wire up the 
            sources and sinks from the media end point to the transport functions provided
            by an RTP session. 
            
            For audio end points it will also attempt to encode and decode formats that the 
            inbuilt C# encoder class understands. The encoder can be turned off if an 
            application wishes to do its own audio encoding.
            
            For video end points there are no C# encoders available so the application must
            always co-ordinate the encoding and decoding of samples sent to and received from
            the RTP transport.
            </summary>
        </member>
        <member name="M:SIPSorcery.Media.VoIPMediaSession.#ctor(System.String,System.Func{SIPSorceryMedia.Abstractions.AudioFormat,System.Boolean})">
            <summary>
            Default constructor which creates the simplest possible send only audio session. It does not
            wire up any devices or video processing.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.App.SdpType">
            <summary>
            The type of the SDP packet being set.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.App.IMediaSession">
            <summary>
            Offering and Answering SDP messages so that it can be
            signaled to the other party using the SIPUserAgent.
            
            The implementing class is responsible for ensuring that the client
            can send media to the other party including creating and managing
            the RTP streams and processing the audio and video.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.IMediaSession.HasAudio">
            <summary>
            Indicates whether the session supports audio.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.IMediaSession.HasVideo">
            <summary>
            Indicates whether the session supports video.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.IMediaSession.IsClosed">
            <summary>
            Indicates whether the session has been closed.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.IMediaSession.RemoteDescription">
            <summary>
            The SDP description from the remote party describing
            their audio/video sending and receive capabilities.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.IMediaSession.RtpBindAddress">
            <summary>
            Set if the session has been bound to a specific IP address.
            Normally not required but some esoteric call or network set ups may need.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.IMediaSession.OnRtpClosed">
            <summary>
            Fired when the RTP channel is closed.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.IMediaSession.OnRtpEvent">
            <summary>
            Fired when an RTP event (typically representing a DTMF tone) is
            detected.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.IMediaSession.OnTimeout">
            <summary>
            Fired when no RTP or RTCP packets are received for a pre-defined period (typically 30s).
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.IMediaSession.CreateOffer(System.Net.IPAddress)">
            <summary>
            Creates a new SDP offer based on the local media tracks in the session.
            Calling this method does NOT change the state of the media tracks. It is
            safe to call at any time if a session description of the local media state is
            required.
            </summary> 
            <param name="connectionAddress">Optional. If set this address will be used
            as the Connection address in the SDP offer. If not set an attempt will be 
            made to determine the best matching address.</param>
            <returns>A new SDP offer representing the session's local media tracks.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.IMediaSession.SetRemoteDescription(SIPSorcery.SIP.App.SdpType,SIPSorcery.Net.SDP)">
            <summary>
            Sets the remote description. Calling this method can result in the local
            media tracks being disabled if not supported or setting the RTP/RTCP end points
            if they are.
            </summary>
            <param name="sdpType">Whether the SDP being set is an offer or answer.</param>
            <param name="sessionDescription">The SDP description from the remote party.</param>
            <returns>If successful an OK enum result. If not an enum result indicating the 
            failure cause.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.IMediaSession.CreateAnswer(System.Net.IPAddress)">
            <summary>
            Generates an SDP answer to an offer based on the local media tracks. Calling
            this method does NOT result in any changes to the local tracks. To apply the
            changes the SetRemoteDescription method must be called.
            </summary>
            <param name="connectionAddress">Optional. If set this address will be used as 
            the SDP Connection address. If not specified the Operating System routing table
            will be used to lookup the address used to connect to the SDP connection address
            from the remote offer.</param>
            <returns>An SDP answer matching the offer and the local media tracks contained
            in the session.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.IMediaSession.Start">
            <summary>
            Needs to be called prior to sending media. Performs any set up tasks such as 
            starting audio/video capture devices and starting RTCP reporting.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.IMediaSession.SetMediaStreamStatus(SIPSorcery.Net.SDPMediaTypesEnum,SIPSorcery.Net.MediaStreamStatusEnum)">
            <summary>
            Sets the stream status on all local audio or all video media track.
            </summary>
            <param name="kind">The type of the media track. Must be audio or video.</param>
            <param name="status">The stream status for the media track.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.IMediaSession.SendDtmf(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Attempts to send a DTMF tone to the remote party.
            </summary>
            <param name="tone">The digit representing the DTMF tone to send.</param>
            <param name="ct">A cancellation token that should be set if the DTMF send should be 
            cancelled before completing. Depending on the duration a DTMF send can require 
            multiple RTP packets. This token can be used to cancel any further RTP packets
            being sent for the tone.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.IMediaSession.Close(System.String)">
            <summary>
            Closes the session. This will stop any audio/video capturing and rendering devices as
            well as the RTP and RTCP sessions and sockets.
            </summary>
            <param name="reason">Optional. A descriptive reason for closing the session.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPPacketMangler.MangleSIPRequest(SIPSorcery.SIP.SIPRequest)">
            <summary>
            Mangles private IP addresses in a SIP request replacing them with the IP address the packet was received on. 
            </summary>
            <param name="sipRequest">The unmangled SIP request.</param>
            <returns>The mangled SIP request</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPPacketMangler.MangleSIPResponse(SIPSorcery.SIP.SIPResponse,SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Mangles private IP addresses in a SIP response replacing them with the IP address the packet was received on. 
            </summary>
            <param name="sipResponse">The unmangled SIP response.</param>
            <returns>The mangled SIP response</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPRequestAuthenticator.AuthenticateSIPRequest(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPRequest,SIPSorcery.SIP.App.ISIPAccount)">
            <summary>
            Authenticates a SIP request.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.App.ISIPAccount">
            <remarks>
            SIP account usernames can be treated by some SIP Sorcery server agents as domain name like structures where a username of
            "x.username" will match the "username" account for receiving calls. To facilitate this SIP accounts with a '.' character in them
            can only be created where the suffix "username" portion matches the Owner field. This allows users to create SIP accounts with '.'
            in them but will prevent a different user from being able to hijack an "x.username" account and cause unexpected behaviour.
            </remarks>
        </member>
        <member name="T:SIPSorcery.SIP.App.ISIPClientUserAgent">
            <summary>
            Interface for classes implementing SIP client user agent functionality. The
            main function of a SIP client user agent is the ability to initiate calls.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.App.ISIPServerUserAgent">
            <summary>
            Interface for classes implementing SIP server user agent functionality. The
            main function of a SIP client user agent is the ability to receive calls.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.App.SIPB2BUserAgent">
            <summary>
            This class represents a back-to-back (B2B) user agent (UA) that is used 
            to attach an outgoing call (UAC) to an incoming (UAS) call.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPCallDescriptor.CallId">
            <summary>
            A string representing the Call Identifier
            defaults to <see cref="M:SIPSorcery.SIP.CallProperties.CreateNewCallId"/> if not set
            
            CallId MUST be unique between different calls
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPCallDescriptor.BranchId">
            <summary>
            A string representing the Branch part of the SIP-VIA header to identify Call-Requests and Call-Responses
            defaults to <see cref="M:SIPSorcery.SIP.CallProperties.CreateBranchId"/> if not set
            
            BranchId MUST be unique between different calls and even requests
            BranchId MUST start with "z9hG4bK"
            </summary>
            <remarks>
            to avoid unexpected behaviour:
            BranchId should only be customized in fully controlled enclosed environments
            or for testing purposes 
            </remarks>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPCallDescriptor.#ctor(SIPSorcery.SIP.App.ISIPAccount,System.String,System.String,System.String,System.String)">
            <summary>
            This constructor is for calls to a SIP account that the application recognises as belonging to it.
            </summary>
            <param name="toSIPAccount">The destination SP account for teh call.</param>
            <param name="uri">The uri can be different to the to SIP account if a dotted notation is used. For
            example 1234.user@sipsorcery.com.</param>
            <param name="fromHeader"></param>
            <param name="contentType"></param>
            <param name="content"></param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPCallDescriptor.#ctor(System.String,System.String)">
            <summary>
            This constructor is for non-authenticated calls that do not require any custom
            headers etc.
            </summary>
            <param name="dstUri">The destination URI to place the call to.</param>
            <param name="sdp">The Session Description Protocol (SDP) body to use in the call request.
            Can be empty if the remote party supports SDP answers via ACK requests.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPCallDescriptor.SetGeneralFromHeaderFields(System.String,System.String,System.String)">
            <summary>
            These setting do NOT override the ones from the call options.
            </summary>
            <param name="fromDisplayName"></param>
            <param name="fromUsername"></param>
            <param name="fromHost"></param>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPClientUserAgent.PrackSupported">
            <summary>
            Determines whether the agent will operate with support for reliable provisional responses as per RFC3262.
            If support is not desired it should be set to false before the initial INVITE request is sent.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPClientUserAgent.#ctor(SIPSorcery.SIP.SIPTransport)">
            <summary>
            Creates a new SIP user agent client to act as the client on a SIP INVITE transaction.
            </summary>
            <param name="sipTransport">The SIP transport this user agent will use for sending and receiving SIP messages.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPClientUserAgent.GetCallDestination(SIPSorcery.SIP.App.SIPCallDescriptor)">
            <summary>
            Gets the destination of the remote SIP end point for this call.
            </summary>
            <param name="sipCallDescriptor">The call descriptor containing the settings to use to place the call.</param>
            <returns>The server end point for the call.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPClientUserAgent.Call(SIPSorcery.SIP.App.SIPCallDescriptor,SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Initiates the call to the remote user agent server.
            </summary>
            <param name="sipCallDescriptor">The descriptor for the call that describes how to reach the user agent server and other properties.</param>
            <param name="serverEndPoint">Optional. If the server end point for the call is known or has been resolved in advance. If
            not set the SIP transport layer will attempt to resolve the destination at sending time.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPClientUserAgent.Cancel">
            <summary>
            Cancels an in progress call. This method should be called prior to the remote user agent server answering the call.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPClientUserAgent.AckAnswer(SIPSorcery.SIP.SIPResponse,System.String,System.String)">
            <summary>
            Sends AckAnswer response.
            </summary>
            <param name="sipResponse">SIPResponse to acknowledge</param>
            <param name="content">The optional content body for the ACK request.</param>
            <param name="contentType">The optional content type.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPNonInviteClientUserAgent.AuthResponseReceived(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPTransaction,SIPSorcery.SIP.SIPResponse)">
            <summary>
            The event handler for responses to the authenticated register request.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.App.SIPNotifierClient">
            <summary>
            This class represent a client for a SIP notifier server. The client can subscribe to notifications from the
            server as outlined in RFC3265. The generic parameter is used to set the type of notification the client will
            generate. Different SIP event packages have different ways of representing their data. For example RFC4235
            uses XML to convey dialog notifications, RFC3842 uses plain text to convey message waiting indications.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPNotifierClient.GotNotificationRequest(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPRequest)">
            <summary>
            This method handles incoming requests from the SIP transport instance. It may be working in
            conjunction with other receivers on the same SIP transport so it should filter the requests
            to identify the NOTIFY requests for this subscription.
            </summary>
            <param name="localSIPEndPoint">The local SIP end point the request was received on.</param>
            <param name="remoteEndPoint">The remote SIP end point the request was received from.</param>
            <param name="sipRequest">The SIP request.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPNotifierClient.Resubscribe">
            <summary>
            If the client is waiting for the timeout until the next subscribe is due calling this method will result
            in an immediate attempt to re-subscribe. When a subscribe request is received the notification server should
            send a full state notification so this method is useful to refresh client state.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPNotifierClient.Subscribe(SIPSorcery.SIP.SIPURI,System.Int64,SIPSorcery.SIP.SIPEventPackagesEnum,System.String,SIPSorcery.SIP.SIPURI)">
            <summary>
            Initiates a SUBSCRIBE request to a notification server.
            </summary>
            <param name="subscribeURI">The SIP user that dialog notifications are being subscribed to.</param>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPRegistrationUserAgent.IsRegistered">
            <summary>
            True if the last registration attempt was successful or false if not.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPRegistrationUserAgent.LastRegisterAttemptAt">
            <summary>
            The last time at which an attempt was made to register this account.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPRegistrationUserAgent.OutboundProxy">
            <summary>
            If set all requests will be sent via the outbound SIP proxy instead of being sent to the
            SIP registrar server.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPRegistrationUserAgent.#ctor(SIPSorcery.SIP.SIPTransport,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new SIP registration agent that will attempt to register with a SIP Registrar server.
            If the registration fails the agent will retry up to a hard coded maximum number of 3 attempts.
            If successful the agent will periodically refresh the registration based on the Expiry time 
            returned by the server.
            </summary>
            <param name="sipTransport">The SIP transport layer to use to send the register request.</param>
            <param name="username">The username to use if the server requests authorisation.</param>
            <param name="password">The password to use if the server requests authorisation.</param>
            <param name="server">The hostname or socket address for the registration server. Can be in a format of
            hostname:port or ipaddress:port, e.g. sipsorcery.com or 67.222.131.147:5060. The transport can also
            be specified using a SIP URI parameter, e.g. sip:sipsorcery.com;transport=tcp or sip:sipsorcery.com;transport=tls
            although in the latter case it would be better to use sips:sipsorcery.com.</param>
            <param name="expiry">The expiry value to request for the contact. This value can be rejected or overridden
            by the server.</param>
            <param name="maxRegistrationAttemptTimeout">The period in seconds to wait for a server response before
            classifying the registration request as failed.</param>
            <param name="registerFailureRetryInterval">Number of seconds between consecutive register requests in the 
            event of failures or timeouts.</param>
            <param name="maxRegisterAttempts">The maximum number of registration attempts that will be made without a 
            failure condition before incurring a temporary failure.</param>
            <param name="exitOnUnequivocalFailure">If true the agent will exit on failure conditions that most 
            likely require manual intervention. It is recommended to leave this as true.</param>
            <param name="sendUsernameInContactHeader">If true the request will add the username to the Contact header.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPRegistrationUserAgent.OverrideAllowHeader(System.String)">
            <summary>
            Allows to override the Allow header value for REGISTER requests
            </summary>
            <param name="newAllowHeaderValue">a new Allow header value; if the null is passed then the default Allow header value will be used</param>
            <exception cref="T:System.ApplicationException">if <paramref name="newAllowHeaderValue"/> contains the methods that are not allowed</exception>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPRegistrationUserAgent.SetExpiry(System.Int32)">
            <summary>
            Allows the registration expiry setting to be adjusted after the instance has been created.
            </summary>
            <param name="expiry">The new expiry value.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPRegistrationUserAgent.Stop(System.Boolean)">
            <summary>
            Stops the registration agent.
            </summary>
            <param name="sendZeroExpiryRegister">If true a final registration with a zero expiry
            will be sent to remove the binding.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPRegistrationUserAgent.ServerResponseReceived(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPTransaction,SIPSorcery.SIP.SIPResponse)">
            <summary>
            The event handler for responses to the initial register request.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPRegistrationUserAgent.AuthResponseReceived(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPTransaction,SIPSorcery.SIP.SIPResponse)">
            <summary>
            The event handler for responses to the authenticated register request.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPRegistrationUserAgent.GetServerExpiresFromResponse(SIPSorcery.SIP.SIPRequest,SIPSorcery.SIP.SIPResponse)">
            <summary>
            Find the contact in the list that matches the one being maintained by this agent in order to determine the expiry value or as defined in the response expires header in that order.
            </summary>
            <param name="sipRequest"></param>
            <param name="sipResponse"></param>
            <returns>expiry value returned from the server, otherwise -1 if no value is provided by the server.</returns>
        </member>
        <member name="T:SIPSorcery.SIP.App.SIPServerUserAgent">
            <summary>
            Implementation of a SIP Server User Agent that can be used to receive SIP calls.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPServerUserAgent.SIPDialogue">
            <summary>
            The SIP dialog that's created if we're able to successfully answer the call request.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPServerUserAgent.OfferSDP">
            <summary>
            The Session Description Protocol offer from the remote call party.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPServerUserAgent.CallCancelled">
            <summary>
            The caller cancelled the call request.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPServerUserAgent.NoRingTimeout">
            <summary>
            This end of the call timed out providing a ringing response. This situation can occur for SIP servers.
            They will attempt to forward the call to a SIP account's contacts. If none reply then the will never
            continue past the trying stage.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPServerUserAgent.OnDialogueCreated">
            <summary>
            Gets fired when the call successfully negotiates an SDP offer/answer and creates a new dialog.
            Typically this can occur at the same time as the transaction final response is sent. But in cases
            where the initial INVITE does not contain an SDP offer the dialog will not be created until the 
            ACK is received.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPServerUserAgent.Hangup(System.Boolean)">
            <summary>
            Used to hangup the call or indicate that the client hungup.
            </summary>
            <param name="clientHungup">True if the BYE request was received from the client. False if the hangup
            needs to originate from this agent.</param>
        </member>
        <member name="T:SIPSorcery.SIP.App.SIPUserAgent">
            <summary>
            A "full" SIP user agent that encompasses both client and server user agents.
            It is also able to manage in dialog operations after the call is established 
            (the client and server user agents don't handle in dialog operations).
            
            Unlike other user agents this one also manages its own RTP session object
            which means it can handle things like call on and off hold, RTP end point
            changes and sending DTMF events.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPUserAgent.m_uac">
            <summary>
            Client user agent for placing calls.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPUserAgent.m_uas">
            <summary>
            Server user agent for receiving calls.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPUserAgent.m_transport">
            <summary>
            The SIP transport layer for sending requests and responses.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPUserAgent.m_isTransportExclusive">
            <summary>
            If true indicates the SIP transport instance is specific to this user agent and
            is not being shared.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPUserAgent.m_answerSipAccount">
            <summary>
            The SIP account used by the server user agent and this user agent 
            for authentication challenges
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPUserAgent.m_outboundProxy">
            <summary>
            If set all communications are sent to this address irrespective of what the 
            request and response headers indicate.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPUserAgent.m_sipDialogue">
            <summary>
            If a call is successfully answered this property will be set with the
            resultant dialogue.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPUserAgent.m_callDescriptor">
            <summary>
            Holds the call descriptor for an in progress client (outbound) call.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPUserAgent._rtpEventSsrc">
            <summary>
            Used to keep track of received RTP events. An RTP event will typically span
            multiple packets but the application only needs to get informed once per event.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPUserAgent._oldCallID">
            <summary>
            When a blind and attended transfer is in progress the original call will be placed
            on hold (if not already). To prevent the response from the on hold re-INVITE 
            being applied to the media session while the new transfer call is being made or
            accepted we don't apply session descriptions on requests or responses with the 
            old (original) call ID.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPUserAgent._isClosed">
            <summary>
            Gets set to true if the SIP user agent has been explicitly closed and is no longer
            required.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.App.SIPUserAgent._ringTimeout">
            <summary>
            This timer is used when an outgoing call is made with a ring timeout specified.
            If the call is not answered within the timeout it will be cancelled by this agent.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPUserAgent.MediaSession">
            <summary>
            The media (RTP) session in use for the current call.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPUserAgent.IsCallActive">
            <summary>
            Indicates whether there is an active call or not.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPUserAgent.IsCalling">
            <summary>
            Indicates whether a call initiated by this user agent is in progress but is yet
            to get a ring or progress response.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPUserAgent.IsRinging">
            <summary>
            Indicates whether a call initiated by this user agent has received a ringing or progress response.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPUserAgent.IsHangingUp">
            <summary>
            Indicates whether the user agent is in the process of hanging up or cancelling a call.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPUserAgent.IsOnLocalHold">
            <summary>
            True if we've put the remote party on hold.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPUserAgent.IsOnRemoteHold">
            <summary>
            True if the remote party has put us on hold.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPUserAgent.Dialogue">
            <summary>
            Once either the client or server call is answered this will hold the SIP
            dialogue that was created by the call.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPUserAgent.CallDescriptor">
            <summary>
            For a call initiated by us this is the call descriptor that was used.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPUserAgent.ContactURI">
            <summary>
            The default SIP URI that this URI can be contacted on. Depending on the SIP transport
            being used by the agent there may be multiple ways of contacting it. In that case the
            first URI found is used.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.ClientCallTrying">
            <summary>
            The remote party has received our call request and is working on it.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.ClientCallRinging">
            <summary>
            The remote party has progressed our call request to ringing/in progress.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.ClientCallAnswered">
            <summary>
            The in progress call attempt was answered.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.ClientCallFailed">
            <summary>
            The in progress call attempt failed.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.ServerCallCancelled">
            <summary>
            For calls accepted by this user agent this event will be fired if the call
            is cancelled before it gets answered.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.ServerCallRingTimeout">
            <summary>
            For calls accepted by this user agent this event will be fired if the call
            is answered but the answer response is never confirmed. This can occur if
            the client does not send the ACK or the ACK does not get through.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.OnReinviteRequest">
            <summary>
            The remote call party has sent us a new re-INVITE request that this
            class didn't know how to or couldn't handle. Things we can
            handle are on and off hold. Common examples of what we can't handle
            are changing RTP end points, changing codecs etc.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.OnCallHungup">
            <summary>
            Call was hungup by the remote party. Applies to calls initiated by us and calls received
            by us. An example of when this user agent will initiate a hang up is when a transfer is
            accepted by the remote calling party.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.OnTransferNotify">
            <summary>
            Fires when a NOTIFY request is received that contains an update about the 
            status of a transfer. These events will be received by a user agent acting as the
            Transferor but only if the Transferee support the transfer subscription.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.OnTransferRequested">
            <summary>
            Fires when a REFER request is received that requests us to place a call to a
            new destination. The REFER request can be a blind transfer or an attended transfer.
            The difference is whether the REFER request includes a Replaces parameter. If it does 
            it's used to inform the transfer target (the transfer destination requested) that 
            if they accept our call it should replace an existing one.
            </summary>
            <remarks>
            Parameters for event delegate:
            bool OnTransferRequested(SIPUserField referTo, string referredBy)
            SIPUserField: Is the destination that we are being asked to place a call to.
            string referredBy: The Referred-By header from the REFER request that requested 
            we do the transfer.
            bool: The boolean result can be returned as false to prevent the transfer. By default
            if no event handler is hooked up the transfer will be accepted.
            </remarks>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.OnTransferToTargetSuccessful">
            <summary>
            Fires when the call placed as a result of a transfer request is successfully answered.
            The SIPUserField contains the destination that was called for the transfer.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.OnTransferToTargetFailed">
            <summary>
            Fires when the call placed as a result of a transfer request is rejected or fails.
            The SIPUserField contains the destination that was called for the transfer.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.RemotePutOnHold">
            <summary>	
            The remote call party has put us on hold.	
            </summary>	
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.RemoteTookOffHold">
            <summary>	
            The remote call party has taken us off hold.	
            </summary>	
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.OnDtmfTone">
            <summary>
            Gets fired when an RTP DTMF event is detected as completed on the remote party's RTP stream.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.OnRtpEvent">
            <summary>
            Gets fired for every RTP event packet received from the remote party. This event allows the
            application to decipher the vents as it wishes.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.OnIncomingCall">
            <summary>
            Gets fired when a new INVITE request is detected on the SIP transport being used
            by this user agent.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.OnTransactionStateChange">
            <summary>
            Diagnostic event to allow monitoring of the INVITE transaction state.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.App.SIPUserAgent.OnTransactionTraceMessage">
            <summary>
            Diagnostic event to receive trace messages related to the INVITE transaction
            state machine processing.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.App.SIPUserAgent.PrackSupported">
            <summary>
            Determines whether the agent will operate with support for reliable provisional responses as per RFC3262.
            If support is not desired it should be set to false before the initial INVITE request is sent.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.#ctor">
            <summary>
            Creates a new instance where the user agent has exclusive control of the SIP transport.
            This is significant for incoming requests. WIth exclusive control the agent knows that
            any request are for it and can handle accordingly. If the transport needs to be shared 
            amongst multiple user agents use the alternative constructor.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.#ctor(SIPSorcery.SIP.SIPTransport,SIPSorcery.SIP.SIPEndPoint,System.Boolean,SIPSorcery.SIP.App.ISIPAccount)">
            <summary>
            Creates a new SIP client and server combination user agent with a shared SIP transport instance.
            With a shared transport outgoing calls and registrations work the same but for incoming calls
            and requests the destination needs to be coordinated externally.
            </summary>
            <param name="transport">The transport layer to use for requests and responses.</param>
            <param name="outboundProxy">Optional. If set all requests and responses will be forwarded to this
            end point irrespective of their headers.</param>
            <param name="isTransportExclusive">True is the SIP transport instance is for the exclusive use of 
            this user agent or false if it's being shared amongst multiple agents.</param>
            <param name="answerSipAccount">Optional, will ensure that any request that require auth will be able to complete</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.Call(System.String,System.String,System.String,SIPSorcery.SIP.App.IMediaSession,System.Int32)">
            <summary>
            Attempts to place a new outgoing call AND waits for the call to be answered or fail.
            Use <see cref="M:SIPSorcery.SIP.App.SIPUserAgent.InitiateCallAsync(SIPSorcery.SIP.App.SIPCallDescriptor,SIPSorcery.SIP.App.IMediaSession,System.Int32)"/> to start a call without
            waiting for it to complete and monitor <see cref="M:SIPSorcery.SIP.App.SIPUserAgent.ClientCallAnsweredHandler(SIPSorcery.SIP.App.ISIPClientUserAgent,SIPSorcery.SIP.SIPResponse)"/> and
            <see cref="M:SIPSorcery.SIP.App.SIPUserAgent.ClientCallFailedHandler(SIPSorcery.SIP.App.ISIPClientUserAgent,System.String,SIPSorcery.SIP.SIPResponse)"/> to detect an answer or failure.
            </summary>
            <param name="dst">The destination SIP URI to call.</param>
            <param name="username">Optional Username if authentication is required.</param>
            <param name="password">Optional. Password if authentication is required.</param>
            <param name="mediaSession">The RTP session for the call.</param>
            <param name="ringTimeout">Optional. If non-zero will be treated as the number of seconds to let the call
            ring for before giving up and cancelling.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.Call(SIPSorcery.SIP.App.SIPCallDescriptor,SIPSorcery.SIP.App.IMediaSession,System.Int32)">
            <summary>
            Attempts to place a new outgoing call AND waits for the call to be answered or fail.
            Use <see cref="M:SIPSorcery.SIP.App.SIPUserAgent.InitiateCallAsync(SIPSorcery.SIP.App.SIPCallDescriptor,SIPSorcery.SIP.App.IMediaSession,System.Int32)"/> to start a call without
            waiting for it to complete and monitor <see cref="M:SIPSorcery.SIP.App.SIPUserAgent.ClientCallAnsweredHandler(SIPSorcery.SIP.App.ISIPClientUserAgent,SIPSorcery.SIP.SIPResponse)"/> and
            <see cref="M:SIPSorcery.SIP.App.SIPUserAgent.ClientCallFailedHandler(SIPSorcery.SIP.App.ISIPClientUserAgent,System.String,SIPSorcery.SIP.SIPResponse)"/> to detect an answer or failure.
            </summary>
            <param name="callDescriptor">The full descriptor for the call destination. Allows customising
            of additional options above the standard username, password and destination URI.</param>
            <param name="mediaSession">The RTP session for the call.</param>
            <param name="ringTimeout">Optional. If non-zero will be treated as the number of seconds to let the call
            ring for before giving up and cancelling.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.InitiateCallAsync(SIPSorcery.SIP.App.SIPCallDescriptor,SIPSorcery.SIP.App.IMediaSession,System.Int32)">
            <summary>
            Attempts to place a new outgoing call.
            </summary>
            <param name="sipCallDescriptor">A call descriptor containing the information about how 
            and where to place the call.</param>
            <param name="mediaSession">The media session used for this call</param>
            <param name="ringTimeout">Optional. If non-zero will be treated as the number of seconds to let the call
            ring for before giving up and cancelling.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.Cancel">
            <summary>
            Cancel our call attempt prior to it being answered.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.Hangup">
            <summary>
            Hangup established call
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.AcceptCall(SIPSorcery.SIP.SIPRequest)">
            <summary>
            This method can be used to start the processing of a new incoming call request.
            The user agent will is acting as a server for this operation and it can be considered
            the opposite of the Call method. This is only the first step in answering an incoming
            call. It can still be rejected or answered after this point.
            </summary>
            <param name="inviteRequest">The invite request representing the incoming call.</param>
            <returns>An ID string that needs to be supplied when the call is answered or rejected 
            (used to manage multiple pending incoming calls).</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.Answer(SIPSorcery.SIP.App.SIPServerUserAgent,SIPSorcery.SIP.App.IMediaSession,System.Net.IPAddress)">
            <summary>
            Answers the call request contained in the user agent server parameter. Note the
            <see cref="M:SIPSorcery.SIP.App.SIPUserAgent.AcceptCall(SIPSorcery.SIP.SIPRequest)"/> method should be used to create the user agent server.
            Any existing call will be hungup.
            </summary>
            <param name="uas">The user agent server holding the pending call to answer.</param>
            <param name="mediaSession">The media session used for this call</param>
            <param name="publicIpAddress">The public IP address to use in SDP</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.Answer(SIPSorcery.SIP.App.SIPServerUserAgent,SIPSorcery.SIP.App.IMediaSession,System.String[],System.Net.IPAddress)">
            <summary>
            Answers the call request contained in the user agent server parameter. Note the
            <see cref="M:SIPSorcery.SIP.App.SIPUserAgent.AcceptCall(SIPSorcery.SIP.SIPRequest)"/> method should be used to create the user agent server.
            Any existing call will be hungup.
            </summary>
            <param name="uas">The user agent server holding the pending call to answer.</param>
            <param name="mediaSession">The media session used for this call</param>
            <param name="customHeaders">Custom SIP-Headers to use in Answer.</param>
            <param name="publicIpAddress">The public IP address to use in SDP</param>
            <returns>True if the call was successfully answered or false if there was a problem
            such as incompatible codecs.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.BlindTransfer(SIPSorcery.SIP.SIPURI,System.TimeSpan,System.Threading.CancellationToken,System.String[],System.String,System.String)">
            <summary>
            Initiates a blind transfer by asking the remote call party to call the specified destination.
            If the transfer is accepted the current call will be hungup.
            </summary>
            <param name="destination">The URI to transfer the call to.</param>
            <param name="timeout">Timeout for the transfer request to get accepted.</param>
            <param name="ct">Cancellation token. Can be set to cancel the transfer prior to it being
            accepted or timing out.</param>
            <param name="customHeaders">Optional. Custom SIP-Headers that will be set in the REFER request sent 
            to the remote party.</param>
            <param name="username">Optional. Used if proxy authentication required.</param>
            <param name="password">Optional. Used if proxy authentication required.</param>
            <returns>True if the transfer was accepted by the Transferee or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.AttendedTransfer(SIPSorcery.SIP.SIPDialogue,System.TimeSpan,System.Threading.CancellationToken,System.String[],System.String,System.String)">
            <summary>
            Initiates an attended transfer by asking the remote call party to call the specified destination.
            If the transfer is accepted the current call will be hungup.
            </summary>
            <param name="transferee">The dialog that will be replaced on the transfer target call party.</param>
            <param name="timeout">Timeout for the transfer request to get accepted.</param>
            <param name="ct">Cancellation token. Can be set to cancel the transfer prior to it being
            accepted or timing out.</param>
            <param name="customHeaders">Optional. Custom SIP-Headers that will be set in the REFER request sent 
            to the remote party.</param>
            <param name="username">Optional. Used if proxy authentication required.</param>
            <param name="password">Optional. Used if proxy authentication required.</param>
            <returns>True if the transfer was accepted by the Transferee or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.SendDtmf(System.Byte)">
            <summary>
            Requests the RTP session to transmit a DTMF tone using an RTP event.
            </summary>
            <param name="tone">The DTMF tone to transmit.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.PutOnHold">
            <summary>
            Send a re-INVITE request to put the remote call party on hold.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.TakeOffHold">
            <summary>
            Send a re-INVITE request to take the remote call party on hold.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.ApplyHoldAndReinvite">
            <summary>
            Updates the stream status of the RTP session and sends the re-INVITE request.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.Transfer(SIPSorcery.SIP.SIPRequest,System.TimeSpan,System.Threading.CancellationToken,System.String,System.String)">
            <summary>
            Processes a transfer by sending to the remote party once the REFER request has been constructed.
            </summary>
            <param name="referRequest">The REFER request for the transfer.</param>
            <param name="timeout">Timeout for the transfer request to get accepted.</param>
            <param name="ct">Cancellation token. Can be set to cancel the transfer prior to it being
            accepted or timing out.</param>
            <param name="username">Optional. Used if proxy authentication required.</param>
            <param name="password">Optional. Used if proxy authentication required.</param>
            <returns>True if the transfer was accepted by the Transferee or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.DialogRequestReceivedAsync(SIPSorcery.SIP.SIPRequest)">
            <summary>
            Handler for when an in dialog request is received on an established call.
            Typical types of request will be re-INVITES for things like putting a call on or
            off hold and REFER requests for transfers. Some in dialog request types, such 
            as re-INVITES have specific events so they can be bubbled up to the 
            application to deal with.
            </summary>
            <param name="sipRequest">The in dialog request received.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.ProcessTransferRequest(SIPSorcery.SIP.SIPRequest)">
            <summary>
            Processes transfer (REFER) requests from the remote call party.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.SendReInviteRequest(SIPSorcery.Net.SDP)">
            <summary>
            Sends a re-INVITE request to the remote call party with the supplied SDP.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.SIPTransportRequestReceived(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPRequest)">
            <summary>
            This user agent will check incoming SIP requests for any that match its current dialog.
            </summary>
            <param name="localSIPEndPoint">The local end point the request was received on.</param>
            <param name="remoteEndPoint">The remote end point the request came from.</param>
            <param name="sipRequest">The SIP request.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.AcceptAttendedTransfer(SIPSorcery.SIP.App.SIPServerUserAgent)">
            <summary>
            Accepts and attempts to process an INVITE request from a 3rd party that is asking to use their incoming
            call request to replace the existing call.
            </summary>
            <param name="uas">The user agent/transaction representing the incoming INVITE.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.ReinviteRequestFinalResponseReceived(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPTransaction,SIPSorcery.SIP.SIPResponse)">
            <summary>
            Handles responses to our re-INVITE requests.
            </summary>
            <param name="localSIPEndPoint">The local end point the response was received on.</param>
            <param name="remoteEndPoint">The remote end point the response came from.</param>
            <param name="sipTransaction">The UAS transaction the response is part of.</param>
            <param name="sipResponse">The SIP response.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.GetUsernameAndPassword">
            <summary>
            Once a call is established certain requests may need to be authenticated, e.g. a BYE request may be challenged. This method
            looks up the credentials that were used for the initial INVITE request.
            </summary>
            <returns>A username and password pair.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.SendResponseAsync(SIPSorcery.SIP.SIPResponse)">
            <summary>
            Takes care of sending a response based on whether the outbound proxy is set or not.
            </summary>
            <param name="response">The response to send.</param>
            <returns>Send result.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.ClientCallTryingHandler(SIPSorcery.SIP.App.ISIPClientUserAgent,SIPSorcery.SIP.SIPResponse)">
            <summary>
            Event handler for a client call (one initiated by us) receiving a trying response.
            </summary>
            <param name="uac">The client user agent used to initiate the call.</param>
            <param name="sipResponse">The INVITE trying response.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.ClientCallRingingHandler(SIPSorcery.SIP.App.ISIPClientUserAgent,SIPSorcery.SIP.SIPResponse)">
            <summary>
            Event handler for a client call (one initiated by us) receiving an in progress response.
            </summary>
            <param name="uac">The client user agent used to initiate the call.</param>
            <param name="sipResponse">The INVITE ringing response.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.ClientCallFailedHandler(SIPSorcery.SIP.App.ISIPClientUserAgent,System.String,SIPSorcery.SIP.SIPResponse)">
            <summary>
            Event handler for a client call (one initiated by us) failing.
            </summary>
            <param name="uac">The client user agent used to initiate the call.</param>
            <param name="errorMessage">An error message indicating the reason for the failure.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.ClientCallAnsweredHandler(SIPSorcery.SIP.App.ISIPClientUserAgent,SIPSorcery.SIP.SIPResponse)">
            <summary>
            Event handler for a client call (one initiated by us) being answered.
            </summary>
            <param name="uac">The client user agent used to initiate the call.</param>
            <param name="sipResponse">The INVITE success response.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.GetReferRequest(SIPSorcery.SIP.SIPURI,System.String[])">
            <summary>
            Builds the REFER request to initiate a blind transfer on an established call.
            </summary>
            <param name="referToUri">The SIP URI to transfer the call to.</param>
            <param name="customHeaders">Optional. Can be used to set custom SIP headers in the
            REFER request.</param>
            <returns>A SIP REFER request.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.GetReferRequest(SIPSorcery.SIP.SIPDialogue,System.String[])">
            <summary>
            Builds the REFER request to initiate an attended transfer on an established call.
            </summary>
            <param name="target">A target dialogue representing the Transferee.</param>
            <param name="customHeaders">Optional. Can be used to set custom SIP headers in the
            REFER request.</param>
            <returns>A SIP REFER request.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.CallEnded(System.String)">
            <summary>
            The current call has ended. Reset the state of the user agent.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.CheckRemotePartyHoldCondition(SIPSorcery.Net.SDP)">
            <summary>
            Processes an in-dialog SDP offer from the remote party to check whether the 
            call hold status has changed.
            </summary>
            <param name="remoteSDP">The in-dialog SDP received from he remote party.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.GetStreamStatusForOnHoldState">
            <summary>
            Gets the required state of the local media tracks for the on hold state.
            </summary>
            <returns>The required state of the local media tracks to match the current on
            hold conditions.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.OnRemoteRtpEvent(System.Net.IPEndPoint,SIPSorcery.Net.RTPEvent,SIPSorcery.Net.RTPHeader)">
            <summary>
            Event handler for RTP events from the remote call party. Fires
            when the event is completed.
            </summary>
            <param name="rtpEvent">The received RTP event.</param>
            <param name="rtpHeader">THe RTP header on the packet that the event was received in.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.OnRtpTimeout(SIPSorcery.Net.SDPMediaTypesEnum)">
            <summary>
            Event handler for the audio or video RTP session timing out.
            </summary>
            <param name="mediaType">The media type, aduio or video, that timed out.</param>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.Close">
            <summary>
            Calling close indicates the SIP user agent is no longer required and it should not
            respond to any NEW requests. It will still respond to BYE in-dialog requests in order
            to correctly deal with re-transmits.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.App.SIPUserAgent.Dispose">
            <summary>
            Final cleanup if instance is being discarded.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.CallProperties.CreateBranchId(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            From RFC 3261, Section 16.6, Step 8.
            The value placed in this part of the branch parameter SHOULD reflect all of those fields (including any Route, Proxy-Require and Proxy-
            Authorization header fields).  This is to ensure that if the request is routed back to the proxy and one of those fields
            changes, it is treated as a spiral and not a loop (see Section 16.3). 
            A common way to create this value is to compute a cryptographic hash of the To tag, From tag, Call-ID header
            field, the Request-URI of the request received (before translation), the topmost Via header, and the sequence number
             from the CSeq header field, in addition to any Proxy-Require algorithm used to compute the hash is implementation-dependent,
            but MD5 (RFC 1321 [35]), expressed in hexadecimal, is a  reasonable choice.  (Base64 is not permissible for a token.)
            </summary>
            <returns></returns>
        </member>
        <member name="T:SIPSorcery.SIP.SIPDns">
            <summary>
            SIP specific DNS resolution.
            </summary>
            <remarks>
            1. If transport parameter is specified it takes precedence,
            2. If no transport parameter and target is an IP address then sip should use udp and sips tcp,
            3. If no transport parameter and target is a host name with an explicit port then sip should use 
               udp and sips tcp and host should be resolved using an A or AAAA record DNS lookup (section 4.2),
            4*. If no transport protocol and no explicit port and target is a host name then the client should no
               an NAPTR lookup and utilise records for services SIP+D2U, SIP+D2T, SIP+D2S, SIPS+D2T and SIPS+D2S,
            5. If NAPTR record(s) are found select the desired transport and lookup the SRV record,
            6. If no NAPT records are found lookup SRV record for desired protocol _sip._udp, _sip._tcp, _sips._tcp,
               _sip._tls,
            7. If no SRV records found lookup A or AAAA record.
            
            * NAPTR lookups are currently not implemented as they have been found to be hardly ever used and can 
            increase the DNS query time noticeably.
            
            Observations from the field.
            - A DNS server has been observed to not respond at all to NAPTR or SRV record queries meaning lookups for
              them will permanently time out.
            </remarks>
        </member>
        <member name="F:SIPSorcery.SIP.SIPDns.UseANYLookups">
            <summary>
            Don't use IN_ANY queries by default. These are useful if a DNS server supports them as they can
            return IPv4 and IPv6 results in a single query. For DNS servers that don't support them it means
            an extra delay.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPDns.LookupClient">
            <summary>
            The client performing the SIP DNS lookups. In normal circumstances this property does not need to
            be set manually and care needs to be taken if it is. SIP relies heavily on DNS lookups and most
            functions will fail if the DNS client is misconfigured.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPDns.ResolveAsync(SIPSorcery.SIP.SIPURI,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Resolve method that performs either an A or AAAA record lookup. If required
            a SRV record lookup will be performed prior to the A or AAAA lookup.
            </summary>
            <param name="uri">The SIP URI to lookup.</param>
            <param name="preferIPv6">Whether the address lookup would prefer to have an IPv6 address
            returned.</param>
            <returns>A SIPEndPoint or null.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPDns.SIPLookupFromCache(SIPSorcery.SIP.SIPURI,DnsClient.QueryType,System.Boolean)">
            <summary>
            Attempts a lookup from cache.
            </summary>
            <param name="uri"></param>
            <param name="startQuery"></param>
            <param name="preferIPv6"></param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPDns.SIPLookupAsync(SIPSorcery.SIP.SIPURI,DnsClient.QueryType,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Attempts a lookup from DNS.
            </summary>
            <param name="uri"></param>
            <param name="startQuery"></param>
            <param name="preferIPv6"></param>
            <param name="ct"></param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPDns.GetHostAndPortFromSrvResult(DnsClient.IDnsQueryResponse)">
            <summary>
            Extracts the server hostname and port from a SRV lookup.
            </summary>
            <param name="srvResult">The DNS response from an SRV lookup.</param>
            <returns>The hostname and port for the chosen SRV result record.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPDns.GetHostAndPortFromSrvResult(DnsClient.ServiceHostEntry[])">
            <summary>
            Extracts the server hostname and port from a SRV lookup.
            </summary>
            <param name="serviceHostEntries">The DNS response from an SRV lookup.</param>
            <returns>The hostname and port for the chosen SRV result record.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPDns.GetFromLookupResult(SIPSorcery.SIP.SIPProtocolsEnum,DnsClient.Protocol.DnsResourceRecord,System.Int32)">
            <summary>
            Helper method to extract the appropriate IP address from a DNS lookup result.
            The query may have returned an AAAA or A record. This method checks which 
            and extracts the IP address accordingly.
            </summary>
            <param name="addrRecord">The DNS lookup result.</param>
            <param name="port">The port for the IP end point.</param>
            <returns>An IP end point or null.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPDns.ResolveLocalHostname(SIPSorcery.SIP.SIPURI,System.Boolean)">
            <summary>
            The lookup is for a local network host. Use the OS DNS logic as the
            main DNS client can be configured to use external DNS servers that won't
            be able to lookup this hostname.
            </summary>
            <param name="uri">The SIP URI to lookup.</param>
            <param name="preferIPv6">Whether the lookup should prefer an IPv6 result.</param>
            <returns>A SIP end point for the host or null if the URI cannot be resolved.</returns>
        </member>
        <member name="T:SIPSorcery.SIP.SIPServicesEnum">
            <summary>
            A list of the different combinations of SIP schemes and transports. 
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPServices.GetSRVProtocolForSIPURI(SIPSorcery.SIP.SIPURI)">
            <summary>
            This method is needed because "sips" URI's have to be looked
            up with a SRV record containing "tcp" NOT "tls" and same for web sockets.
            </summary>
            <param name="uri">The SIP URI to determine the SRV record protocol for.</param>
            <returns>The protocol to use in a SRV record lookup.</returns>
        </member>
        <member name="T:SIPSorcery.SIP.IncomingMessage">
            <summary>
            Represents a message received on a SIP channel prior to any attempt to identify
            whether it represents a SIP request, response or something else.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.IncomingMessage.LocalSIPChannel">
            <summary>
            The SIP channel we received the message on.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.IncomingMessage.LocalEndPoint">
            <summary>
            The local end point that the message was received on. If a SIP channel
            is listening on IPAddress.Any then this property will hold the actual 
            IP address that was used for the receive.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.IncomingMessage.RemoteEndPoint">
            <summary>
            The next hop remote SIP end point the message came from.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.IncomingMessage.Buffer">
            <summary>
            The message data.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.IncomingMessage.ReceivedAt">
            <summary>
            The time at which the message was received.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPChannel">
            <summary>
            The SIPChannel abstract class encapsulates the common properties and methods required of a SIP channel.
            A SIP channel's primary responsibility is sending and receiving messages from the network.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPChannel.ID">
            <summary>
            A unique ID for the channel. Useful for ensuring a transmission can occur
            on a specific channel without having to match listening addresses.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPChannel.LocalIPAddresses">
            <summary>
            The list of IP addresses that this SIP channel is listening on. The only mechanism
            for a channel to have multiple addresses is if it's socket address is set to 
            IPAddress.Any.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPChannel.InternetDefaultAddress">
            <summary>
            The local IP address this machine uses to communicate with the Internet.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPChannel.ListeningIPAddress">
            <summary>
            The IP address the channel is listening on. Can be IPAddress.Any so cannot
            be used directly in SIP Headers, SIP URIs etc. Instead call GetContactURI and
            provide the destination address.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPChannel.Port">
            <summary>
            The port that this SIP channel is listening on.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPChannel.ListeningEndPoint">
            <summary>
            The IP end point this channel is listening on. Note it can contain
            IPAddress.Any which means it can match multiple IP addresses.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPChannel.ListeningSIPEndPoint">
            <summary>
            The SIP end point this channel is listening on. Note it can contain
            IPAddress.Any which means it can match multiple IP addresses.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPChannel.IsReliable">
            <summary>
            If the underlying transport channel is reliable, such as TCP, this will be set to true.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPChannel.IsSecure">
            <summary>
            If the underlying transport channel is using transport layer security (e.g. TLS or WSS) this will be set to true.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPChannel.SIPProtocol">
            <summary>
            The type of SIP protocol (udp, tcp, tls or web socket) for this channel.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPChannel.Closed">
            <summary>
            Indicates whether close has been called on the SIP channel. Once closed a SIP channel can no longer be used
            to send or receive messages. It should generally only be called at the same time the SIP transport class using it
            is shutdown.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPChannel.SIPMessageReceived">
            <summary>
            The function delegate that will be called whenever a new SIP message is received on the SIP channel.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPChannel.IsChannelSocket(System.String)">
            <summary>
            Checks whether the host string corresponds to a socket address that this SIP channel is listening on.
            </summary>
            <param name="host">The host string to check.</param>
            <returns>True if the host is a socket this channel is listening on. False if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPChannel.SendAsync(SIPSorcery.SIP.SIPEndPoint,System.Byte[],System.Boolean,System.String)">
            <summary>
            Asynchronous SIP message send to a remote end point.
            </summary>
            <param name="dstEndPoint">The remote end point to send the message to.</param>
            <param name="buffer">The data to send.</param>
            <param name="canInitiateConnection">Indicates whether this send should initiate a connection if needed.
            The typical case is SIP requests can initiate new connections but responses should not. Responses should
            only be sent on the same TCP or TLS connection that the original request was received on.</param>
            <param name="connectionIDHint">Optional ID of the specific client connection that the message should be sent on. It's only
            a hint so if the connection has been closed a new one will be attempted.</param>
            <returns>If no errors SocketError.Success otherwise an error value.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPChannel.SendSecureAsync(SIPSorcery.SIP.SIPEndPoint,System.Byte[],System.String,System.Boolean,System.String)">
            <summary>
            Asynchronous SIP message send over a secure TLS connection to a remote end point.
            </summary>
            <param name="dstEndPoint">The remote end point to send the message to.</param>
            <param name="buffer">The data to send.</param>
            <param name="serverCertificateName">If the send is over SSL the required common name of the server's X509 certificate.</param>
            <param name="canInitiateConnection">Indicates whether this send should initiate a connection if needed.
            The typical case is SIP requests can initiate new connections but responses should not. Responses should
            only be sent on the same TCP or TLS connection that the original request was received on.</param>
            <param name="connectionIDHint">Optional ID of the specific client connection that the message should be sent on. It's only
            a hint so if the connection has been closed a new one will be attempted.</param>
            <returns>If no errors SocketError.Success otherwise an error value.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPChannel.HasConnection(System.String)">
            <summary>
            Checks whether the SIP channel has a connection matching a unique connection ID.
            </summary>
            <param name="connectionID">The connection ID to check for a match on.</param>
            <returns>True if a match is found or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPChannel.HasConnection(SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Checks whether the SIP channel has an existing connection for a remote end point.
            Existing connections include connections that have been accepted by this channel's listener
            and connections that have been initiated due to sends from this channel.
            </summary>
            <param name="remoteEndPoint">The remote end point to check for an existing connection.</param>
            <returns>True if a match is found or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPChannel.HasConnection(System.Uri)">
            <summary>
            Checks whether a web socket based SIP channel has an existing connection to a server URI.
            </summary>
            <param name="serverUri">The remote server URI to check for an existing connection.</param>
            <returns>True if a match is found or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPChannel.IsAddressFamilySupported(System.Net.Sockets.AddressFamily)">
            <summary>
            Returns true if the channel supports the requested address family.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPChannel.IsProtocolSupported(SIPSorcery.SIP.SIPProtocolsEnum)">
            <summary>
            Returns true if the channel supports the requested transport layer protocol.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPChannel.GetLocalIPAddressForDestination(System.Net.IPAddress)">
            <summary>
            Gets the local IP address this SIP channel will use for communicating with the destination
            IP address.
            </summary>
            <param name="dst">The destination IP address.</param>
            <returns>The local IP address this channel selects to use for connecting to the destination.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPChannel.GetLocalSIPEndPointForDestination(SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Get the local SIPEndPoint this channel will use for communicating with the destination SIP end point.
            </summary>
            <param name="dstEndPoint">The destination SIP end point.</param>
            <returns>The local SIP end points this channel selects to use for connecting to the destination.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPChannel.GetContactURI(SIPSorcery.SIP.SIPSchemesEnum,SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            The contact SIP URI to be used for contacting this SIP channel WHEN sending to the destination IP address.
            The contact URI can change based on the destination. For example if the SIP channel is listening on IPAddress.Any
            a destination address of 127.0.0.1 will result in a contact of sip:127.0.0.1:X. Using the same channel to
            send to a destination address on the Internet will result in a different URI.
            </summary>
            <param name="scheme">The SIP scheme to use for the Contact URI.</param>
            <param name="dstEndPoint">The destination SIP end point the Contact URI is for. For a SIPChannel using
            IPAddress.Any the destination needs to be known so it can select the correct local address.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPChannel.Close">
            <summary>
            Closes the SIP channel. Closing stops the SIP channel from receiving or sending and typically
            should only be done at the same time the parent SIP transport layer is shutdown.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPChannel.Dispose">
            <summary>
            Calls close on the SIP channel when the object is disposed.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPClientWebSocketChannel">
            <summary>
             A SIP transport Channel for establishing an outbound connection  over a Web Socket communications layer as per RFC7118.
             The channel can manage multiple connections. All SIP clients wishing to initiate a connection to a SIP web socket
             server should use a single instance of this class.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPClientWebSocketChannel.ClientWebSocketConnection">
            <summary>
            Holds the state for a current web socket client connection.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPClientWebSocketChannel.ClientWebSocketConnection.LastTransmission">
            <summary>
            Records when a transmission was last sent or received on this stream.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPClientWebSocketChannel.ClientWebSocketConnection.PendingReceiveBuffer">
            <summary>
            Pending receives that we don't have the full SIP message for yet.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPClientWebSocketChannel.ClientWebSocketConnection.RecvStartPosn">
            <summary>
            The current start position of unprocessed data in the receive buffer.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPClientWebSocketChannel.ClientWebSocketConnection.RecvEndPosn">
            <summary>
            The current end position of unprocessed data in the receive buffer.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPClientWebSocketChannel.m_egressConnections">
            <summary>
            Maintains a list of current egress web socket connections (one's that have been initiated by us).
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPClientWebSocketChannel.m_cts">
            <summary>
            Cancellation source passed to all async operations in this class.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPClientWebSocketChannel.m_isReceiveTaskRunning">
            <summary>
            Indicates whether the receive thread that monitors the receive tasks for each web socket client is running.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.#ctor(System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Creates a SIP channel to establish outbound connections and send SIP messages 
            over a web socket communications layer.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.SendAsync(SIPSorcery.SIP.SIPEndPoint,System.Byte[],System.Boolean,System.String)">
            <summary>
            Ideally sends on the web socket channel should specify the connection ID. But if there's
            a good reason not to we can check if there is an existing client connection with the
            requested remote end point and use it.
            </summary>
            <param name="dstEndPoint">The remote destination end point to send the data to.</param>
            <param name="buffer">The data to send.</param>
            <param name="connectionIDHint">The ID of the specific web socket connection to try and send the message on.</param>
            <returns>If no errors SocketError.Success otherwise an error value.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.SendSecureAsync(SIPSorcery.SIP.SIPEndPoint,System.Byte[],System.String,System.Boolean,System.String)">
            <summary>
            Send to a secure web socket server.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.SendAsync(SIPSorcery.SIP.SIPEndPoint,System.Byte[])">
            <summary>
            Attempts a send to a remote web socket server. If there is an existing connection it will be used
            otherwise an attempt will made to establish a new one.
            </summary>
            <param name="serverEndPoint">The remote web socket server URI to send to.</param>
            <param name="buffer">The data buffer to send.</param>
            <returns>A success value or an error for failure.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.HasConnection(System.String)">
            <summary>
            Checks whether the web socket SIP channel has a connection matching a unique connection ID.
            </summary>
            <param name="connectionID">The connection ID to check for a match on.</param>
            <returns>True if a match is found or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.HasConnection(SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Checks whether the client web socket SIP channel has a connection to the requested server end point.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.HasConnection(System.Uri)">
            <summary>
            Checks whether there is an existing client web socket connection for a remote end point.
            </summary>
            <param name="serverUri">The server URI to check for an existing connection.</param>
            <returns>True if there is a connection or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.IsAddressFamilySupported(System.Net.Sockets.AddressFamily)">
            <summary>
            Checks whether the specified address family is supported.
            </summary>
            <param name="addresFamily">The address family to check.</param>
            <returns>True if supported, false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.IsProtocolSupported(SIPSorcery.SIP.SIPProtocolsEnum)">
            <summary>
            Checks whether the specified protocol is supported.
            </summary>
            <param name="protocol">The protocol to check.</param>
            <returns>True if supported, false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.GetLocalSIPEndPointForDestination(SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Get the local SIPEndPoint this channel will use for communicating with the destination SIP end point.
            </summary>
            <param name="dstEndPoint">The destination SIP end point.</param>
            <returns>The local SIP end points this channel selects to use for connecting to the destination.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.Close">
            <summary>
            Closes all web socket connections.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.Dispose">
            <summary>
            Calls close on the channel when it is disposed.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.Close(System.String,System.Net.WebSockets.ClientWebSocket)">
            <summary>
            Closes a single web socket client connection.
            </summary>
            <param name="client">The client to close.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.GetConnectionID(System.Uri)">
            <summary>
            Gets the connection ID for a server URI.
            </summary>
            <param name="serverUri">The web socket server URI for the connection.</param>
            <returns>A string connection ID.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.MonitorReceiveTasks">
            <summary>
            Monitors the client web socket tasks for new receives.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPClientWebSocketChannel.ExtractSIPMessages(SIPSorcery.SIP.SIPChannel,SIPSorcery.SIP.SIPClientWebSocketChannel.ClientWebSocketConnection,System.ArraySegment{System.Byte},System.Int32)">
            <summary>
            Attempts to extract SIP messages from the data that has been received on the client web socket SIP stream connection.
            </summary>
            <param name="recvChannel">The receiving SIP channel.</param>
            <param name="clientConn">The web socket client connection properties including pending receive buffer</param>
            <param name="buffer">The buffer holding the current data from the stream. Note that the buffer can 
            stretch over multiple receives.</param>
            <param name="bytesRead">The bytes that were read by the latest receive operation (the new bytes available).</param>
        </member>
        <member name="T:SIPSorcery.SIP.SIPStreamConnection">
            <summary>
            Represents a reliable stream connection (e.g. TCP or TLS) between two end points. Stream connections have a more
            overhead than UDP. The state of the connection has to be monitored and messages on the stream can be spread across
            multiple packets.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPStreamConnection.StreamSocket">
            <summary>
            The underlying TCP socket for the stream connection. To take advantage of newer async TCP IO operations the
            RecvSocketArgs is used for TCP channel receives. 
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPStreamConnection.SslStream">
            <summary>
            For secure streams the TCP connection will be upgraded to an SSL stream and the SslStreamBuffer will
            be used for receives.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPStreamConnection.SslStreamBuffer">
            <summary>
            The receive buffer to use for SSL streams.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPStreamConnection.RemoteSIPEndPoint">
            <summary>
            The remote end point for the stream.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPStreamConnection.ConnectionProtocol">
            <summary>
            The connection protocol in use for this stream (TCP or TLS).
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPStreamConnection.LastTransmission">
            <summary>
            Records when a transmission was last sent or received on this stream.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPStreamConnection.RecvStartPosn">
            <summary>
            The current start position of unprocessed data in the receive buffer.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPStreamConnection.RecvEndPosn">
            <summary>
            The current end position of unprocessed data in the receive buffer.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPStreamConnection.ConnectionID">
            <summary>
            A unique ID for this connection. It will be recorded on any received messages to allow responses to quickly
            identify the same connection.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.SIPStreamConnection.SIPMessageReceived">
            <summary>
            Event for new SIP requests or responses becoming available.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPStreamConnection.#ctor(System.Net.Sockets.Socket,System.Text.Encoding,System.Text.Encoding,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPProtocolsEnum)">
            <summary>
            Records the crucial stream connection properties and initialises the required buffers.
            </summary>
            <param name="streamSocket">The local socket the stream is using.</param>
            <param name="remoteSIPEndPoint">The remote network end point of this connection.</param>
            <param name="connectionProtocol">Whether the stream is TCP or TLS.</param>
            <param name="sipEncoding"></param>
            <param name="sipBodyEncoding"></param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPStreamConnection.ExtractSIPMessages(SIPSorcery.SIP.SIPChannel,System.Byte[],System.Int32)">
            <summary>
            Attempts to extract SIP messages from the data that has been received on the SIP stream connection.
            </summary>
            <param name="recvChannel">The receiving SIP channel.</param>
            <param name="buffer">The buffer holding the current data from the stream. Note that the buffer can 
            stretch over multiple receives.</param>
            <param name="bytesRead">The bytes that were read by the latest receive operation (the new bytes available).</param>
        </member>
        <member name="T:SIPSorcery.SIP.SIPTCPChannel">
            <summary>
            SIP transport for TCP. Note this is also the base class for the SIPTLSChannel.
            For the TLS channel the TCP base class will accept or connect and then switch 
            to the TLS class to upgrade to an SSL stream.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTCPChannel.m_channelSocket">
            <summary>
            This is the main object managed by this class. It is the socket listening for incoming connections.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTCPChannel.m_connectingSockets">
            <summary>
            List of sockets that are in the process of being connected to. 
            Needed to avoid SIP re-transmits initiating multiple connect attempts.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPTCPChannel.ProtDescr">
            <summary>
            This string is used in debug messages. It makes it possible to differentiate
            whether an instance in acting solely as a TCP channel or as the base class of a TLS channel.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTCPChannel.DisableLocalTCPSocketsCheck">
            <summary>
            Can be set to allow TCP channels hosted in the same process to send to each other. Useful for testing.
            By default sends between TCP channels in the same process are disabled to prevent resource exhaustion.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTCPChannel.m_connections">
            <summary>
            Maintains a list of all current TCP connections currently connected to/from this channel. This allows the SIP transport
            layer to quickly find a channel where the same connection must be re-used.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.#ctor(System.Net.IPEndPoint,SIPSorcery.SIP.SIPProtocolsEnum,System.Text.Encoding,System.Text.Encoding,System.Boolean,System.Boolean)">
            <summary>
            Creates a SIP channel to listen for and send SIP messages over TCP.
            </summary>
            <param name="endPoint">The IP end point to send from and optionally listen on.</param>
            <param name="protocol">Whether the channel is being used with TCP or TLS (TLS channels get upgraded once connected).</param>
            <param name="sipBodyEncoding"></param>
            <param name="canListen">Indicates whether the channel is capable of listening for new client connections.
            A TLS channel without a certificate cannot listen.</param>
            <param name="sipEncoding"></param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.AcceptConnections">
            <summary>
            Processes the socket accepts from the channel's socket listener.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.OnAccept(SIPSorcery.SIP.SIPStreamConnection)">
            <summary>
            For TCP channel no special action is required when accepting a new client connection. Can start receiving immediately.
            </summary>
            <param name="streamConnection">The stream connection holding the newly accepted client socket.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.IO_Completed(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Event handler for the socket newer SendAsync and ReceiveAsync socket calls.
            </summary>
            <param name="sender">The socket that the IO event occurred on.</param>
            <param name="e">The socket args for the completed IO operation.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.ProcessReceive(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Receive event handler for the newer ReceiveAsync socket call.
            </summary>
            <param name="e">The socket args for the completed receive operation.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Send event handler for the newer SendAsync socket call.
            </summary>
            <param name="e">The socket args for the completed send operation.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.ConnectClientAsync(System.Net.IPEndPoint,System.Byte[],System.String)">
            <summary>
            Attempts to create a client TCP socket connection to a remote end point.
            </summary>
            <param name="dstEndPoint">The remote TCP end point to attempt to connect to.</param>
            <param name="buffer">An optional buffer that if set can contain data to transmit immediately after connecting.</param>
            <returns>If successful a connected client socket or null if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.OnClientConnect(SIPSorcery.SIP.SIPStreamConnection,System.String)">
            <summary>
            For TCP channel no special action is required when a new outgoing client connection is established. 
            Can start receiving immediately.
            </summary>
            <param name="streamConnection">The stream connection holding the newly connected client socket.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.SendSecureAsync(SIPSorcery.SIP.SIPEndPoint,System.Byte[],System.String,System.Boolean,System.String)">
            <summary>
            Attempts to send data to the remote end point over a reliable connection. If an existing
            connection exists it will be used otherwise an attempt will be made to establish a new connection.
            </summary>
            <param name="dstSIPEndPoint">The remote SIP end point to send the reliable data to.</param>
            <param name="buffer">The data to send.</param>
            <param name="serverCertificateName">Optional. Only relevant for SSL streams. The common name
            that is expected for the remote SSL server.</param>
            <param name="canInitiateConnection">Indicates whether this send should initiate a connection if needed.
            The typical case is SIP requests can initiate new connections but responses should not. Responses should
            only be sent on the same TCP or TLS connection that the original request was received on.</param>
            <param name="connectionIDHint">Optional. The ID of the specific TCP connection to try and the send the message on.</param>
            <returns>If no errors SocketError.Success otherwise an error value.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.SendOnConnected(SIPSorcery.SIP.SIPStreamConnection,System.Byte[])">
            <summary>
            Sends data once the stream is connected.
            Can be overridden in sub classes that need to implement a different mechanism to send. For example SSL connections.
            </summary>
            <param name="sipStreamConn">The connected SIP stream wrapping the TCP connection.</param>
            <param name="buffer">The data to send.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.OnSIPStreamDisconnected(SIPSorcery.SIP.SIPStreamConnection,System.Net.Sockets.SocketError)">
            <summary>
            Event handler for a reliable SIP stream socket being disconnected.
            </summary>
            <param name="connection">The disconnected stream.</param>
            <param name="socketError">The cause of the disconnect.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.SIPTCPMessageReceived(SIPSorcery.SIP.SIPChannel,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,System.Byte[])">
            <summary>
            Gets fired when a suspected SIP message is extracted from the TCP data stream.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.HasConnection(System.String)">
            <summary>
            Checks whether the SIP channel has a connection matching a unique connection ID.
            </summary>
            <param name="connectionID">The connection ID to check for a match on.</param>
            <returns>True if a match is found or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.HasConnection(SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Checks whether there is an existing connection for a remote end point. Existing connections include
            connections that have been accepted by this channel's listener and connections that have been initiated
            due to sends from this channel.
            </summary>
            <param name="remoteEndPoint">The remote end point to check for an existing connection.</param>
            <returns>True if there is a connection or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.HasConnection(System.Uri)">
            <summary>
            Not implemented for the TCP channel.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.IsAddressFamilySupported(System.Net.Sockets.AddressFamily)">
            <summary>
            Checks whether the specified address family is supported.
            </summary>
            <param name="addresFamily">The address family to check.</param>
            <returns>True if supported, false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.IsProtocolSupported(SIPSorcery.SIP.SIPProtocolsEnum)">
            <summary>
            Checks whether the specified protocol is supported.
            </summary>
            <param name="protocol">The protocol to check.</param>
            <returns>True if supported, false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.Close">
            <summary>
            Closes the channel and any open sockets.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTCPChannel.PruneConnections">
            <summary>
            Periodically checks the established connections and closes any that have not had a transmission for a specified 
            period or where the number of connections allowed per IP address has been exceeded.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPTLSChannel.BypassCertificateValidation">
            <summary>
            Allows to ignore any ssl policy errors regarding the received certificate.
            Only applicable when no custom remote certificate validation is provided.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTLSChannel.OnAccept(SIPSorcery.SIP.SIPStreamConnection)">
            <summary>
            For the TLS channel the SSL stream must be created and any authentication actions undertaken.
            </summary>
            <param name="streamConnection">The stream connection holding the newly accepted client socket.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTLSChannel.OnAcceptAsync(SIPSorcery.SIP.SIPStreamConnection)">
            <summary>
            For the TLS channel the SSL stream must be created and any authentication actions undertaken.
            </summary>
            <param name="streamConnection">The stream connection holding the newly accepted client socket.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTLSChannel.OnClientConnect(SIPSorcery.SIP.SIPStreamConnection,System.String)">
            <summary>
            For the TLS channel once the TCP client socket is connected it needs to be wrapped up in an SSL stream.
            </summary>
            <param name="streamConnection">The stream connection holding the newly connected client socket.</param>
            <param name="serverCertificateName">The expected common name on the SSL certificate supplied by the server.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTLSChannel.OnReadCallback(System.IAsyncResult)">
            <summary>
            Callback for read operations on the SSL stream. 
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTLSChannel.SendOnConnected(SIPSorcery.SIP.SIPStreamConnection,System.Byte[])">
            <summary>
            Sends data using the connected SSL stream.
            </summary>
            <param name="sipStreamConn">The stream connection object that holds the SSL stream.</param>
            <param name="buffer">The data to send.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTLSChannel.IsProtocolSupported(SIPSorcery.SIP.SIPProtocolsEnum)">
            <summary>
            Checks whether the specified protocol is supported.
            </summary>
            <param name="protocol">The protocol to check.</param>
            <returns>True if supported, false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTLSChannel.GetServerCert(System.String)">
            <summary>
            Attempt to retrieve a certificate from the Windows local machine certificate store.
            </summary>
            <param name="subjName">The subject name of the certificate to retrieve.</param>
            <returns>If found an X509 certificate or null if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTLSChannel.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Hook to do any validation required on the server certificate.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPUDPChannel.m_sendFailures">
            <summary>
            Keep a list of transient send failures to remote end points. With UDP a failure is detected if an ICMP packet is received 
            on a receive.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPUDPChannel.#ctor(System.Net.IPEndPoint,System.Text.Encoding,System.Text.Encoding,System.Boolean)">
            <summary>
            Creates a SIP channel to listen for and send SIP messages over UDP.
            </summary>
            <param name="endPoint">The IP end point to listen on and send from.</param>
            <param name="sipBodyEncoding"></param>
            <param name="useDualMode">If true then IPv6 sockets will be created as dual mode IPv4/IPv6 on supporting systems.</param>
            <param name="sipEncoding"></param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPUDPChannel.SendSecureAsync(SIPSorcery.SIP.SIPEndPoint,System.Byte[],System.String,System.Boolean,System.String)">
            <summary>
            This method is not implemented for the SIP UDP channel.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPUDPChannel.HasConnection(System.String)">
            <summary>
            The UDP channel does not support connections. Always returns false.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPUDPChannel.HasConnection(SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            The UDP channel does not support connections. Always returns false.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPUDPChannel.HasConnection(System.Uri)">
            <summary>
            The UDP channel does not support connections. Always returns false.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPUDPChannel.IsAddressFamilySupported(System.Net.Sockets.AddressFamily)">
            <summary>
            Checks whether the specified address family is supported.
            </summary>
            <param name="addresFamily">The address family to check.</param>
            <returns>True if supported, false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPUDPChannel.IsProtocolSupported(SIPSorcery.SIP.SIPProtocolsEnum)">
            <summary>
            Checks whether the specified protocol is supported.
            </summary>
            <param name="protocol">The protocol to check.</param>
            <returns>True if supported, false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPUDPChannel.Close">
            <summary>
            Closes the channel's UDP socket.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPUDPChannel.ExpireFailedSends">
            <summary>
            Removed end points from the send failures list after the timeout period.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPWebSocketChannel">
             <summary>
              A SIP transport Channel for transmitting SIP over a Web Socket communications layer as per RFC7118.
              
             <code>
             var sipTransport = new SIPTransport();
             var wsSipChannel = new SIPWebSocketChannel(IPAddress.Loopback, 80);
            
             var wssCertificate = new System.Security.Cryptography.X509Certificates.X509Certificate2("localhost.pfx");
             var wssSipChannel = new SIPWebSocketChannel(IPAddress.Loopback, 433, wssCertificate);
            
             sipTransport.AddSIPChannel(wsSipChannel);
             sipTransport.AddSIPChannel(wssSipChannel);
             </code>
             </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPWebSocketChannel.SIPMessagWebSocketBehavior">
            <summary>
            The web socket server instantiates an instance of this class for each web socket client that connects. The methods 
            in this class are responsible for translating the SIP transport send and receives to and from the web socket server.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPWebSocketChannel.SIPMessagWebSocketBehavior._remoteEndPoint">
            <summary>
            This is the remote end point for the web socket connection.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPWebSocketChannel.SIPMessagWebSocketBehavior._localEndPoint">
            <summary>
            This is the local end point for the web socket connection. It can be different from the listening end point if
            the IPAddress.Any is being used.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPWebSocketChannel.m_webSocketServer">
            <summary>
            This object is responsible for all the web sockets magic including accepting HTTP requests, matching URLs, handling the
            keep alives etc. etc. Any data messages received by the server will be handed over to the SIP transport layer for processing.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPWebSocketChannel.m_ingressConnections">
            <summary>
            Maintains a list of current ingress web socket connections across for this web socket server. This allows the SIP transport
            layer to quickly match a channel where the same connection must be re-used.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPWebSocketChannel.#ctor(System.Net.IPEndPoint,System.Text.Encoding,System.Text.Encoding,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates a SIP channel to listen for and send SIP messages over a web socket communications layer.
            </summary>
            <param name="endPoint">The IP end point to listen on and send from.</param>
            <param name="sipEncoding"></param>
            <param name="sipBodyEncoding"></param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPWebSocketChannel.#ctor(System.Net.IPAddress,System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Creates a new secure web socket server (e.g. wss://localhost).
            </summary>
            <param name="listenAddress">The IPv4 or IPv6 address to listen on.</param>
            <param name="listenPort">The network port to listen on.</param>
            <param name="certificate">The X509 certificate to supply to connecting clients. Unless
            the client has been specifically configured otherwise the it will perform validation on the certificate
            which typically involved checking that the hostname of the server matches the certificate's common name.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPWebSocketChannel.AddClientConnection(System.String,SIPSorcery.SIP.SIPWebSocketChannel.SIPMessagWebSocketBehavior)">
            <summary>
            Records a new client connection in the list. This allows responses or subsequent requests to the same SIP agent
            to reuse the same connection.
            </summary>
            <param name="id">The unique ID of the client connection.</param>
            <param name="client">The web socket client.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPWebSocketChannel.SendAsync(SIPSorcery.SIP.SIPEndPoint,System.Byte[],System.Boolean,System.String)">
            <summary>
            Ideally sends on the web socket channel should specify the connection ID. But if there's
            a good reason not to we can check if there is an existing client connection with the
            requested remote end point and use it.
            </summary>
            <param name="destinationEndPoint">The remote destination end point to send the data to.</param>
            <param name="buffer">The data to send.</param>
            <param name="connectionIDHint">The ID of the specific web socket connection to try and send the message on.</param>
            <returns>If no errors SocketError.Success otherwise an error value.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPWebSocketChannel.SendSecureAsync(SIPSorcery.SIP.SIPEndPoint,System.Byte[],System.String,System.Boolean,System.String)">
            <summary>
            Not implemented for the WebSocket channel.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPWebSocketChannel.HasConnection(System.String)">
            <summary>
            Checks whether the web socket SIP channel has a connection matching a unique connection ID.
            </summary>
            <param name="connectionID">The connection ID to check for a match on.</param>
            <returns>True if a match is found or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPWebSocketChannel.HasConnection(SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Checks whether there is an existing client web socket connection for a remote end point.
            </summary>
            <param name="remoteEndPoint">The remote end point to check for an existing connection.</param>
            <returns>True if there is a connection or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPWebSocketChannel.HasConnection(System.Uri)">
            <summary>
            Not implemented for the this channel.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPWebSocketChannel.IsAddressFamilySupported(System.Net.Sockets.AddressFamily)">
            <summary>
            Checks whether the specified address family is supported.
            </summary>
            <param name="addresFamily">The address family to check.</param>
            <returns>True if supported, false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPWebSocketChannel.IsProtocolSupported(SIPSorcery.SIP.SIPProtocolsEnum)">
            <summary>
            Checks whether the specified protocol is supported.
            </summary>
            <param name="protocol">The protocol to check.</param>
            <returns>True if supported, false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPWebSocketChannel.Close">
            <summary>
            Stops the web socket server and closes any client connections.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPWebSocketChannel.Dispose">
            <summary>
            Calls close on the channel when it is disposed.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPWebSocketChannel.GetIngressConnection(System.Net.IPEndPoint,System.String)">
            <summary>
            Attempts to get a web socket ingress connection (one where a client connected to us).
            </summary>
            <param name="destinationEndPoint">The remote end point of the connection.</param>
            <param name="connectionIDHint">Optional. A connection ID hint for the ingress connection.</param>
            <returns>Returns the client connection or null if not found.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPAuthChallenge.GetAuthenticationHeader(System.Collections.Generic.List{SIPSorcery.SIP.SIPAuthenticationHeader},SIPSorcery.SIP.SIPURI,SIPSorcery.SIP.SIPMethodsEnum,System.String,System.String,SIPSorcery.SIP.DigestAlgorithmsEnum)">
            <summary>
            Attempts to generate a SIP request authentication header from the most appropriate digest challenge.
            </summary>
            <param name="authenticationChallenges">The challenges to authenticate the request against. Typically the challenges come from a 
            SIP response.</param>
            <param name="uri">The URI of the SIP request being authenticated.</param>
            <param name="method">The method of the SIP request being authenticated.</param>
            <param name="username">The username to authenticate with.</param>
            <param name="password">The password to authenticate with.</param>
            <param name="digestAlgorithm">The digest algorithm to use in the authentication header.</param>
            <returns>An authentication header that can be added to a SIP header.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.HTTPDigest.DigestCalcHA1(System.String,System.String,System.String,SIPSorcery.SIP.DigestAlgorithmsEnum)">
            <summary>
            Calculate H(A1) as per HTTP Digest specification.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.HTTPDigest.DigestCalcHA2(System.String,System.String,SIPSorcery.SIP.DigestAlgorithmsEnum)">
            <summary>
            Calculate H(A2) as per HTTP Digest specification.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPConstants.SIP_MAXIMUM_RECEIVE_LENGTH">
            <summary>
            The maximum size supported for an incoming SIP message.
            </summary>
            <remarks>
            From https://tools.ietf.org/html/rfc3261#section-18.1.1:
            However, implementations MUST be able to handle messages up to the maximum
            datagram packet size.For UDP, this size is 65,535 bytes, including
            IP and UDP headers.
            </remarks>
        </member>
        <member name="M:SIPSorcery.SIP.SIPConstants.GetDefaultPort(SIPSorcery.SIP.SIPProtocolsEnum)">
            <summary>
            Gets the default SIP port for the protocol. 
            </summary>
            <param name="protocol">The transport layer protocol to get the port for.</param>
            <returns>The default port to use.</returns>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTimings.T1">
            <summary>
            Value of the SIP defined timer T1 in milliseconds and is the time for the first retransmit.
            Should not need to be adjusted in normal circumstances.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTimings.T2">
            <summary>
            Value of the SIP defined timer T2 in milliseconds and is the maximum time between retransmits.
            Should not need to be adjusted in normal circumstances.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTimings.T6">
            <summary>
            Value of the SIP defined timer T6 in milliseconds and is the period after which a transaction 
            has timed out. Should not need to be adjusted in normal circumstances.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTimings.MAX_RING_TIME">
            <summary>
            The number of milliseconds a transaction can stay in the proceeding state 
            (i.e. an INVITE will ring for) before the call is given up and timed out.     
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPProtocolsEnum">
            <summary>
            A list of the transport layer protocols that are supported (the network layers
            supported are IPv4 and IPv6).
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPProtocolsEnum.udp">
            <summary>
            User Datagram Protocol.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPProtocolsEnum.tcp">
            <summary>.
            Transmission Control Protocol
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPProtocolsEnum.tls">
            <summary>
            Transport Layer Security.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPProtocolsEnum.ws">
            <summary>
            Web Socket.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPProtocolsEnum.wss">
            <summary>
            Web Socket over TLS.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPProtocolsType.IsConnectionless(SIPSorcery.SIP.SIPProtocolsEnum)">
            <summary>
            Returns true for connectionless transport protocols, such as UDP, and false for
            connection oriented protocols.
            </summary>
            <param name="protocol">The protocol to check.</param>
            <returns>True if the protocol is connectionless.</returns>
        </member>
        <member name="T:SIPSorcery.SIP.AuthHeaders">
            <summary>
            Authorization Headers
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPMethodsEnum">
            <summary>
            A list of the different SIP request methods that are supported.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPEscape">
            <summary>
            For SIP URI user portion the reserved characters below need to be escaped.
            
            <code>
            <![CDATA[
            reserved    =  ";" / "/" / "?" / ":" / "@" / "&" / "=" / "+"  / "$" / ","
            user-unreserved  =  "&" / "=" / "+" / "$" / "," / ";" / "?" / "/"
            Leaving to be escaped = ":" / "@" 
            ]]>
            </code>
            
            For SIP URI parameters different characters are unreserved (just to make life difficult).
            <code>
            <![CDATA[
            reserved    =  ";" / "/" / "?" / ":" / "@" / "&" / "=" / "+"  / "$" / ","
            param-unreserved = "[" / "]" / "/" / ":" / "&" / "+" / "$"
            Leaving to be escaped =  ";" / "?" / "@" / "=" / ","
            ]]>
            </code>
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPExtensions">
            <summary>
             List of SIP extensions to RFC3262.
             </summary> 
        </member>
        <member name="T:SIPSorcery.SIP.SIPExtensionHeaders">
            <summary>
            Constants that can be placed in the SIP Supported or Required headers to indicate support or mandate for
            a particular SIP extension.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPExtensionHeaders.ParseSIPExtensions(System.String,System.String@)">
            <summary>
            Parses a string containing a list of SIP extensions into a list of extensions that this library
            understands.
            </summary>
            <param name="extensionList">The string containing the list of extensions to parse.</param>
            <param name="unknownExtensions">A comma separated list of the unsupported extensions.</param>
            <returns>A list of extensions that were understood and a boolean indicating whether any unknown extensions were present.</returns>
        </member>
        <member name="T:SIPSorcery.SIP.SIPDialogue">
            <summary>
            See "Chapter 12 Dialogs" in RFC3261.
            </summary>
            <remarks>
            The standard states that there are two independent CSeq's for a dialogue: one for requests from the UAC and for requests
            from the UAS. In practice it's been noted that if a UAS (initial UAS) sends an in-dialogue request with a CSeq less than the
            UAC's CSeq it can cause problems. To avoid this issue when generating requests the remote CSeq is always used.
            </remarks>
        </member>
        <member name="P:SIPSorcery.SIP.SIPDialogue.Direction">
            <summary>
            Indicates whether the dialogue was created by a ingress or egress call.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPDialogue.ReinviteDelay">
            <summary>
            Used as a flag to indicate whether to send an immediate or slightly delayed re-INVITE request 
            when a call is answered as an attempt to help solve audio issues.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPDialogue.#ctor(SIPSorcery.SIP.UASInviteTransaction)">
            <summary>
            This constructor is used by server user agents or SIP elements acting in a server user agent role. When
            acting as a server user agent the local fields are contained in the To header and the remote fields are 
            in the From header.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPDialogue.#ctor(SIPSorcery.SIP.UACInviteTransaction)">
            <summary>
            This constructor is used by client user agents or SIP elements acting in a client user agent role. When
            acting as a client user agent the local fields are contained in the From header and the remote fields are 
            in the To header.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPDialogue.#ctor(SIPSorcery.SIP.SIPRequest,System.String)">
            <summary>
            This constructor is used to create non-INVITE dialogues for example the dialogues used in SIP event interactions
            where the dialogue is created based on a SUBSCRIBE request.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPDialogue.Hangup(SIPSorcery.SIP.SIPTransport,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPURI)">
            <summary>
            Generates a BYE request for this dialog and forwards it to the remote call party.
            This has the effect of hanging up the call.
            </summary>
            <param name="sipTransport">The transport layer to use for sending the request.</param>
            <param name="outboundProxy">Optional. If set an end point that the BYE request will be directly 
            forwarded to.</param>
            <param name="target">Optional. If set this will be set as the in-dialog request URI instead of
            the dialogue's remote target field. The primary purpose of setting a custom target is to allow
            an application to attempt to deal with IPv4 NATs.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPDialogue.GetInDialogRequest(SIPSorcery.SIP.SIPMethodsEnum,SIPSorcery.SIP.SIPURI)">
            <summary>
            Builds a basic SIP request with the header fields set to correctly identify it as an 
            in dialog request. Calling this method also increments the dialog's local CSeq counter.
            This is safe to do even if the request does not end up being sent.
            </summary>
            <param name="method">The method of the SIP request to create.</param>
            <param name="target">Optional. If set this will be set as the in-dialog request URI instead of 
            the dialogue's remote target field. The primary purpose of setting a custom target is to allow 
            an application to attempt to deal with IPv4 NATs.</param>
            <returns>An in dialog SIP request.</returns>
        </member>
        <member name="T:SIPSorcery.SIP.SIPEndPoint">
            <summary>
            This class is a more specific version of the SIPURI class BUT is only concerned with the network and
            transport properties. It contains all the information needed to determine the remote end point to
            deliver a SIP request or response to.
            
            This class must remain immutable otherwise the SIP stack can develop problems. SIP end points can get
            passed amongst different servers for logging and forwarding SIP messages and a modification of the end point
            by one server can result in a problem for a different server. Instead a new SIP end point should be created
            wherever a modification is required.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPEndPoint.Protocol">
            <summary>
            The transport/application layer protocol the SIP end point is using.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPEndPoint.Address">
            <summary>
            The network address for the SIP end point. IPv4 and IPv6 are supported.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPEndPoint.Port">
            <summary>
            The network port for the SIP end point.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPEndPoint.ConnectionID">
            <summary>
            For connection oriented transport protocols such as TCP, TLS and WebSockets this
            ID can record the unique connection a SIP message was received on. This makes it 
            possible to ensure responses or subsequent request can re-use the same connection.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPEndPoint.ChannelID">
            <summary>
            If set represents the SIP channel ID that this SIP end point was created from.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPEndPoint.#ctor(System.Net.IPEndPoint)">
            <summary>
            Instantiates a new SIP end point from a network end point. Non specified properties
            will be set to their defaults.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPEndPoint.#ctor(SIPSorcery.SIP.SIPProtocolsEnum,System.Net.IPAddress,System.Int32)">
            <summary>
            Instantiates a new SIP end point from a network end point. Non specified properties
            will be set to their defaults.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPEndPoint.#ctor(SIPSorcery.SIP.SIPProtocolsEnum,System.Net.IPAddress,System.Int32,System.String,System.String)">
            <summary>
            Instantiates a new SIP end point.
            </summary>
            <param name="protocol">The SIP transport/application protocol used for the transmission.</param>
            <param name="address">The network address.</param>
            <param name="port">The network port.</param>
            <param name="channelID">Optional. The unique ID of the channel that created the end point.</param>
            <param name="connectionID">Optional. For connection oriented protocols the unique ID of the connection.
            For connectionless protocols should be set to null.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPEndPoint.ParseSIPEndPoint(System.String)">
            <summary>
            Parses a SIP end point from either a serialised SIP end point string, format of:
            (udp|tcp|tls|ws|wss):(IPEndpoint)[;connid=abcd]
            or from a string that represents a SIP URI.
            </summary>
            <param name="sipEndPointStr">The string to parse to extract the SIP end point.</param>
            <returns>If successful a SIPEndPoint object or null otherwise.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPEndPoint.ParseSerialisedSIPEndPoint(System.String)">
            <summary>
            Reverses The SIPEndPoint.ToString() method. 
            </summary>
            <param name="serialisedSIPEndPoint">The serialised SIP end point MUST be in the form protocol:socket[;connid=abcd].
            Valid examples are udp:10.0.0.1:5060 and ws:10.0.0.1:5060;connid=abcd. An invalid example is 10.0.0.1:5060.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPEndPoint.GetIPEndPoint(System.Boolean)">
            <summary>
            Get the IP end point from the SIP end point
            </summary>
            <param name="mapIpv4ToIpv6">Set to true if a resultant IPv4 end point should be mapped to IPv6.
            This is required in some cases when using dual mode sockets. For example Mono requires that a destination IP
            end point for a dual mode socket is set as IPv6.</param>
            <returns>An IP end point.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPEndPoint.AreSocketsEqual(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Determines whether the socket destination for two different SIP end points are equal.
            </summary>
            <param name="endPoint1">First end point to compare.</param>
            <param name="endPoint2">Second end point to compare.</param>
            <returns>True if the end points both resolve to the same protocol and IP end point.</returns>
        </member>
        <member name="T:SIPSorcery.SIP.SIPViaHeader">
             <summary>
             The Via header only has parameters, no headers. Parameters of from ...;name=value;name2=value2
             Specific parameters: ttl, maddr, received, branch.
             
             From page 179 of RFC3261:
             "Even though this specification mandates that the branch parameter be
             present in all requests, the BNF for the header field indicates that
             it is optional."
             
             The branch parameter on a Via therefore appears to be optionally mandatory?!
            
             Any SIP application element that uses transactions depends on the branch parameter for transaction matching.
             Only the top Via header branch is used for transactions though so if the request has made it to this stack
             with missing branches then in theory it should be safe to proceed. It will be left up to the SIPTransaction
             class to reject any SIP requests that are missing the necessary branch.
             </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPViaHeader.GetDefaultSIPViaHeader(SIPSorcery.SIP.SIPProtocolsEnum)">
            <summary>
            Special SIP Via header that is recognised by the SIP transport classes Send methods. At send time this header will be replaced by 
            one with IP end point details that reflect the socket the request or response was sent from.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPFromHeader">
            <bnf>
            From            =  ( "From" / "f" ) HCOLON from-spec
            from-spec       =  ( name-addr / addr-spec ) *( SEMI from-param )
            from-param      =  tag-param / generic-param
            name-addr		=  [ display-name ] LAQUOT addr-spec RAQUOT
            addr-spec		=  SIP-URI / SIPS-URI / absoluteURI
            tag-param       =  "tag" EQUAL token
            generic-param   =  token [ EQUAL gen-value ]
            gen-value       =  token / host / quoted-string
            </bnf>
            <remarks>
            The From header only has parameters, no headers. Parameters of from ...;name=value;name2=value2.
            Specific parameters: tag.
            </remarks>
        </member>
        <member name="M:SIPSorcery.SIP.SIPFromHeader.GetDefaultSIPFromHeader(SIPSorcery.SIP.SIPSchemesEnum)">
            <summary>
            Special SIP From header that is recognised by the SIP transport classes Send methods. At send time this header will be replaced by 
            one with IP end point details that reflect the socket the request or response was sent from.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPFromHeader.FriendlyDescription">
            <summary>
            Returns a friendly description of the caller that's suitable for humans. Leaves out
            all the parameters etc.
            </summary>
            <returns>A string representing a friendly description of the From header.</returns>
        </member>
        <member name="T:SIPSorcery.SIP.SIPToHeader">
            <bnf>
            To				=  ( "To" / "t" ) HCOLON ( name-addr / addr-spec ) *( SEMI to-param )
            to-param		=  tag-param / generic-param
            name-addr		=  [ display-name ] LAQUOT addr-spec RAQUOT
            addr-spec		=  SIP-URI / SIPS-URI / absoluteURI
            tag-param       =  "tag" EQUAL token
            generic-param   =  token [ EQUAL gen-value ]
            gen-value       =  token / host / quoted-string
            </bnf>
            <remarks>
            The To header only has parameters, no headers. Parameters of from ...;name=value;name2=value2.
            Specific parameters: tag.
            </remarks>
        </member>
        <member name="T:SIPSorcery.SIP.SIPContactHeader">
             <bnf>
             Contact        =  ("Contact" / "m" ) HCOLON ( STAR / (contact-param *(COMMA contact-param)))
             contact-param  =  (name-addr / addr-spec) *(SEMI contact-params)
             name-addr      =  [ display-name ] LAQUOT addr-spec RAQUOT
             addr-spec      =  SIP-URI / SIPS-URI / absoluteURI
             display-name   =  *(token LWS)/ quoted-string
            
             contact-params     =  c-p-q / c-p-expires / contact-extension
             c-p-q              =  "q" EQUAL qvalue
             c-p-expires        =  "expires" EQUAL delta-seconds
             contact-extension  =  generic-param
             delta-seconds      =  1*DIGIT
             generic-param  =  token [ EQUAL gen-value ]
             gen-value      =  token / host / quoted-string
             </bnf>
             <remarks>
             The Contact header only has parameters, no headers. Parameters of from ...;name=value;name2=value2
             Specific parameters: q, expires.
             </remarks>
        </member>
        <member name="M:SIPSorcery.SIP.SIPContactHeader.GetDefaultSIPContactHeader(SIPSorcery.SIP.SIPSchemesEnum)">
            <summary>
            Special SIP contact header that is recognised by the SIP transport classes Send methods. At send time this header will be replaced by 
            one with IP end point details that reflect the socket the request or response was sent from.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPContactHeader.AreEqual(SIPSorcery.SIP.SIPContactHeader,SIPSorcery.SIP.SIPContactHeader)">
            <summary>
            Compares two contact headers to determine contact address equality.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPRoute">
             <summary>
             The SIPRoute class is used to represent both Route and Record-Route headers.
             </summary>
             <bnf>
             Route               =  "Route" HCOLON route-param *(COMMA route-param)
             route-param         =  name-addr *( SEMI rr-param )
             
             Record-Route        =  "Record-Route" HCOLON rec-route *(COMMA rec-route)
             rec-route           =  name-addr *( SEMI rr-param )
             rr-param            =  generic-param
            
             name-addr           =  [ display-name ] LAQUOT addr-spec RAQUOT
             addr-spec           =  SIP-URI / SIPS-URI / absoluteURI
             display-name        =  *(token LWS)/ quoted-string
             generic-param       =  token [ EQUAL gen-value ]
             gen-value           =  token / host / quoted-string
             </bnf>
             <remarks>
             The Route and Record-Route headers only have parameters, no headers. Parameters of from ...;name=value;name2=value2
             There are no specific parameters.
             </remarks>
        </member>
        <member name="M:SIPSorcery.SIP.SIPRouteSet.ReplaceRoute(System.String,System.String)">
            <summary>
            If a route set is travelling from the public side of a proxy to the private side it can be required that the Record-Route set is modified.
            </summary>
            <param name="origSocket">The socket string in the original route set that needs to be replace.</param>
            <param name="replacementSocket">The socket string the original route is being replaced with.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPViaSet.PopTopViaHeader">
            <summary>
            Pops top Via header off the array.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPViaSet.UpateTopViaHeader(System.Net.IPEndPoint)">
            <summary>
            Updates the topmost Via header by setting the received and rport parameters to the IP address and port
            the request came from.
            </summary>
            <remarks>The setting of the received parameter is documented in RFC3261 section 18.2.1 and in RFC3581
            section 4. RFC3581 states that the received parameter value must be set even if it's the same as the 
            address in the sent from field. The setting of the rport parameter is documented in RFC3581 section 4.
            An attempt was made to comply with the RFC3581 standard and only set the rport parameter if it was included
            by the client user agent however in the wild there are too many user agents that are behind symmetric NATs 
            not setting an empty rport and if it's not added then they will not be able to communicate.
            </remarks>
            <param name="msgRcvdEndPoint">The remote endpoint the request was received from.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPViaSet.PushViaHeader(SIPSorcery.SIP.SIPViaHeader)">
            <summary>
            Pushes a new Via header onto the top of the array.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPUriHeader">
            <summary>
            Class used to parse History-Info, Diversion, P-Asserted-Identity Headers.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPUriHeader.FriendlyDescription">
            <summary>
            Returns a friendly description of the caller that's suitable for humans. Leaves out
            all the parameters etc.
            </summary>
            <returns>A string representing a friendly description of the MultiUri header.</returns>
        </member>
        <member name="T:SIPSorcery.SIP.SIPHeader">
            <bnf>
            header  =  "header-name" HCOLON header-value *(COMMA header-value)
            field-name: field-value CRLF
            </bnf>
        </member>
        <member name="F:SIPSorcery.SIP.SIPHeader.HistoryInfo">
            <summary>
            It's quaranteed to be sorted from shortest index to longest index.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPHeader.ToString">
            <summary>
            Puts the SIP headers together into a string ready for transmission.
            </summary>
            <returns>String representing the SIP headers.</returns>
        </member>
        <member name="F:SIPSorcery.SIP.SIPMessageBase.Header">
            <summary>
            The SIP request/response's headers collection.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPMessageBase.Body">
            <summary>
            The optional body or payload for the SIP request/response. This Body property
            should be used for Session Description Protocol (SDP) and other string payloads.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPMessageBase.BodyBuffer">
            <summary>
            The optional binary body or payload for the SIP request/response. This Body property
            generally only needs to be used in rare cases where a SIP request/response needs to
            carry a binary payload. In other cases use the <seealso cref="P:SIPSorcery.SIP.SIPMessageBase.Body"/> property.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPMessageBase.Created">
            <summary>
            Timestamp for the SIP request/response's creation.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPMessageBase.RemoteSIPEndPoint">
            <summary>
            The remote SIP socket the request/response was received from.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPMessageBase.LocalSIPEndPoint">
            <summary>
            The local SIP socket the request/response was received on.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPMessageBase.SendFromHintChannelID">
            <summary>
            When the SIP transport layer has multiple channels it will use this ID hint to choose amongst them when 
            sending this request/response.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPMessageBase.SendFromHintConnectionID">
            <summary>
            For connection oriented SIP transport channels this ID provides a hint about the specific connection to use
            when sending this request/response.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPMessageBuffer">
            <summary>
            Represents an incoming message before having determined whether it is a request or a response.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPMessageBuffer.ParseSIPMessage(System.Byte[],System.Text.Encoding,System.Text.Encoding,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Attempts to parse a SIP message from a single buffer that can only contain a single message.
            </summary>
            <param name="buffer">The buffer that will be parsed for a SIP message.</param>
            <param name="sipBodyEncoding">SIP payload encoding</param>
            <param name="localSIPEndPoint">The end point the message was received on.</param>
            <param name="remoteSIPEndPoint">The end point the message was received from.</param>
            <param name="sipEncoding">SIP protocol encoding, according to RFC should be UTF-8 </param>
            <returns>If successful a SIP message or null if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPMessageBuffer.ParseSIPMessage(System.String,System.Text.Encoding,System.Text.Encoding,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Attempts to parse a SIP message from a string containing a single SIP request or response.
            </summary>
            <param name="message">The string to parse.</param>
            <param name="sipBodyEncoding"></param>
            <param name="localSIPEndPoint">The end point the message was received on.</param>
            <param name="remoteSIPEndPoint">The end point the message was received from.</param>
            <param name="sipEncoding"></param>
            <returns>If successful a SIP message or null if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPMessageBuffer.ParseSIPMessageFromStream(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Int32@)">
            <summary>
            Processes a buffer from a TCP read operation to extract the first full SIP message. If no full SIP 
            messages are available it returns null which indicates the next read should be appended to the current
            buffer and the process re-attempted.
            </summary>
            <param name="receiveBuffer">The buffer to check for the SIP message in.</param>
            <param name="start">The position in the buffer to start parsing for a SIP message.</param>
            <param name="length">The position in the buffer that indicates the end of the received bytes.</param>
            <param name="sipEncoding"></param>
            <returns>A byte array holding a full SIP message or if no full SIP messages are available null.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPMessageBuffer.GetContentLength(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Attempts to find the Content-Length header is a SIP header and extract it.
            </summary>
            <param name="buffer">The buffer to search in.</param>
            <param name="start">The position in the buffer to start the search from.</param>
            <param name="end">The position in the buffer to stop the search at.</param>
            <param name="sipEncoding"></param>
            <returns>If the Content-Length header is found the value if contains otherwise 0.</returns>
        </member>
        <member name="T:SIPSorcery.SIP.SIPParameters">
            <summary>
            Represents a series of name value pairs that are optionally included in SIP URIs and also as an additional
            optional setting on some SIP Headers (Contact, To, From, Via).
            This class also treats the header value of a SIP URI as a special case of a SIP parameter. The difference between
            a parameter and a SIP URI header is the start and delimiter characters used.
            </summary>
            <code>
            <![CDATA[
            SIP URI with parameters:
            sip:1234@sip.com;key1=value1;key2=value2
            
            SIP URI with headers:
            sip:1234@sip.com?key1=value1&key2=value2
            
            SIP URI with parameters and headers (parameters always come first):
            sip:1234@sip.com;key1=value1;key2=value2?key1=value1&key2=value2
            ]]>
            </code>
        </member>
        <member name="M:SIPSorcery.SIP.SIPParameters.#ctor(System.String,System.Char)">
            <summary>
            Parses the name value pairs from a SIP parameter or header string.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPParameters.op_Equality(SIPSorcery.SIP.SIPParameters,SIPSorcery.SIP.SIPParameters)">
            <summary>
            Two SIPParameters objects are considered equal if they have the same keys and values. The
            order of the keys does not affect the equality comparison.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPRequest">
            <summary>
            Represents a SIP Request.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPRequest.URI">
            <summary>
            The SIP request's URI.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPRequest.StatusLine">
            <summary>
            The first line of the SIP request.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPRequest.Copy">
            <summary>
            Creates an identical copy of the SIP Request for the caller.
            </summary>
            <returns>New copy of the SIPRequest.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPRequest.IsLoop(System.String,System.Int32,System.String)">
            <summary>
            Determines if this SIP header is a looped header. The basis for the decision is the branchid in the Via header. If the branchid for a new
            header computes to the same branchid as a Via header already in the SIP header then it is considered a loop.
            </summary>
            <returns>True if this header is a loop otherwise false.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPRequest.SetSendFromHints(SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Sets the send from hints for this request based on a local SIP end point.
            The local SIP end point should generally be the one a related request or response was
            received on.
            </summary>
            <param name="localEndPoint">The SIP end point to base the send from hints on.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPRequest.GetRequest(SIPSorcery.SIP.SIPMethodsEnum,SIPSorcery.SIP.SIPURI)">
            <summary>
            Builds a very basic SIP request. In most cases additional headers will need to be added in order for it to be useful.
            When this method is called the channel used for sending the request has not been decided. The headers below depend on 
            the sending channel. By setting them to "0.0.0.0:0" the send request methods will substitute in the appropriate value
            at send time:
            - Top Via header.
            - From header.
            - Contact header.
            </summary>
            <param name="method">The method for the SIP request.</param>
            <param name="uri">The destination URI for the request.</param>
            <returns>A SIP request object.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPRequest.GetRequest(SIPSorcery.SIP.SIPMethodsEnum,SIPSorcery.SIP.SIPURI,SIPSorcery.SIP.SIPToHeader,SIPSorcery.SIP.SIPFromHeader)">
            <summary>
            Builds a very basic SIP request. In most cases additional headers will need to be added in order for it to be useful.
            When this method is called the channel used for sending the request has not been decided. The headers below depend on 
            the sending channel. By setting them to "0.0.0.0:0" the send request methods will substitute in the appropriate value
            at send time:
            - Top Via header.
            - From header.
            - Contact header.
            </summary>
            <param name="method">The method for the SIP request.</param>
            <param name="uri">The destination URI for the request.</param>
            <param name="to">The To header for the request.</param>
            <param name="from">The From header for the request.</param>
            <returns>A SIP request object.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPRequest.DuplicateAndAuthenticate(System.Collections.Generic.List{SIPSorcery.SIP.SIPAuthenticationHeader},System.String,System.String)">
            <summary>
            Duplicates an existing SIP request, typically one that received an unauthorised response, to an
            authenticated version. The CSeq and Via branch ID are also incremented so
            that the request will not be flagged as a retransmit.
            </summary>
            <param name="authenticationChallenges">The challenges to authenticate the request against. Typically 
            the challenges come from a SIP response.</param>
            <param name="username">The username to authenticate with.</param>
            <param name="password">The password to authenticate with.</param>
            <returns>A SIP request that is a duplicate of the original but with an authentication header added and
            the state header values updated so as not to be flagged as a retransmit.</returns>
        </member>
        <member name="T:SIPSorcery.SIP.SIPResponse">
            <summary>
            Represents a SIP Response.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPResponse.SIPVersion">
            <summary>
            The version string for the SIP response.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPResponse.Status">
            <summary>
            The status of the SIP response, e.g OK or NotAuthorized.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPResponse.StatusCode">
            <summary>
            The status code of the SIP response, e.g. 200 for an OK response.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPResponse.IsSuccessStatusCode">
            <summary>
            Returns true if a successful status code
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPResponse.ReasonPhrase">
            <summary>
            The optional reason phrase for the SIP response.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPResponse.ShortDescription">
            <summary>
            A short one line summary of the SIP response. Useful for logging or diagnostics.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPResponse.#ctor(SIPSorcery.SIP.SIPResponseStatusCodesEnum,System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            SIPResponse Constructor.
            </summary>
            <param name="responseStatus">The status code for the response.</param>
            <param name="reasonPhrase">Optional description for the response. Should be kept short.</param>
            <param name="sipEncoding"></param>
            <param name="sipBodyEncoding"></param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPResponse.ParseSIPResponse(SIPSorcery.SIP.SIPMessageBuffer,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Parses a SIP response from a SIP message object.
            </summary>
            <param name="sipMessageBuffer">The SIP message to parse a response from.</param>
            <param name="sipEncoding"></param>
            <param name="sipBodyEncoding"></param>
            <returns>A new SIP response object.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPResponse.ParseSIPResponse(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Parses a SIP response from a string.
            </summary>
            <param name="sipMessageStr">The string to parse the SIP response from.</param>
            <param name="sipEncoding"></param>
            <param name="sipBodyEncoding"></param>
            <returns>A new SIP response object.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPResponse.ToString">
            <summary>
            Returns a string representing the full SIP response.
            </summary>
            <returns>A string representation of the SIP response.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPResponse.Copy">
            <summary>
            Creates an identical copy of the SIP Response for the caller.
            </summary>
            <returns>New copy of the SIPResponse.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPResponse.SetSendFromHints(SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Sets the send from hints for this response based on a local SIP end point.
            The local SIP end point should generally be the one a related request or response was
            received on.
            </summary>
            <param name="localEndPoint">The SIP end point to base the send from hints on.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPResponse.GetResponse(SIPSorcery.SIP.SIPRequest,SIPSorcery.SIP.SIPResponseStatusCodesEnum,System.String)">
            <summary>
            Helper method to create a SIP response for a SIP request. This method can be thought of as creating a 
            vanilla (or no frills) response for a request. It's suitable for generating error responses. For requests that
            require an action such as creating a call or registering a contact the response will require additional 
            information and this method will not be suitable.
            </summary>
            <param name="sipRequest">The SIP request to create the response for.</param>
            <param name="responseCode">The response code.</param>
            <param name="reasonPhrase">Optional reason phrase to set on the response (needs to be short).</param>
            <returns>A SIP response object.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPResponse.GetResponse(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPResponseStatusCodesEnum,System.String)">
            <summary>
            Used to create a SIP response for a request when it was not possible to parse the incoming SIP request. 
            The response generated by this method may or may not make it back to the requester. Because the SIP 
            request could not be parsed there are no Via headers available and without those the return network
            path is missing. Instead a new Via header is generated that may get through if the requester is only
            one SIP hop away.
            </summary>
            <param name="localSIPEndPoint">The local SIP end point the request was received on.</param>
            <param name="remoteSIPEndPoint">The remote SIP end point the request was received on.</param>
            <param name="responseCode">The response code to set on the response.</param>
            <param name="reasonPhrase">Optional reason phrase to set on the response (keep short).</param>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransport.PreferIPv6NameResolution">
            <summary>
            Set to true to prefer IPv6 lookups of hostnames. By default IPv4 lookups will be performed.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransport.m_queueIncoming">
            <summary>
            Determines whether the transport later will queue incoming requests for processing on a separate thread of process
            immediately on the same thread. Most SIP elements with the exception of Stateless Proxies will typically want to 
            queue incoming SIP messages.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPTransport.CanCreateMissingChannels">
            <summary>
            If true allows this class to attempt to create a new SIP channel if a required protocol
            is missing. Set to false to prevent new channels being created on demand.
            Note that when listening SIP end points are required they will always need to be
            created manually.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPTransport.MaxInMessageQueueCount">
            <summary>
            The maximum number of SIP message receiving queues, if this number is exceeded, new messages will be discarded directly
            Default:5000,Unlimited:0
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransport.m_sipChannels">
            <summary>
            List of the SIP channels that have been opened and are under management by this instance.
            The dictionary key is channel ID (previously was a serialised SIP end point).
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransport.ResolveSIPUriCallbackAsync">
            <summary>
            Default call to do DNS lookups for SIP URI's. In normal circumstances this property does not need to
            be set manually and care needs to be taken if it is. Can be replaced for custom scenarios
            and unit testing.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransport.ResolveSIPUriFromCacheCallback">
            <summary>
            Default call to do DNS lookups for SIP URI's from cache and avoid a time consuming full DNS lookup. 
            In normal circumstances this property does not need to be set manually and care needs to be taken if 
            it is. Can be replaced for custom scenarios and unit testing.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransport.ContactHost">
            <summary>
            If set this host name (or IP address) will be set whenever the transport layer is asked to
            do a substitution on the Contact URI. The substitution is requested by a request or response
            setting the Contact URI host to IPAddress.Any ("0.0.0.0") or IPAddress.IPV6.Any ("::0").
            <code>
            var sipRequest = GetRequest(
              method,
              uri,
              new SIPToHeader(
                null, 
                new SIPURI(uri.User, uri.Host, null, uri.Scheme, SIPProtocolsEnum.udp), 
                null),
              SIPFromHeader.GetDefaultSIPFromHeader(uri.Scheme));
              
            // Set the Contact header to a default value that lets the transport layer know to update it
            // when the sending socket is selected.
            sipRequest.Header.Contact = new List&lt;SIPContactHeader&gt;() { SIPContactHeader.GetDefaultSIPContactHeader() };
            </code>
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransport.CustomiseRequestHeader">
            <summary>
            Optional callback function that can be set to customise the headers on an outbound SIP request.
            The callback is called BEFORE applying <seealso cref="F:SIPSorcery.SIP.SIPTransport.ContactHost"/> which means do not set
            both if the callback is intended to set the Contact URI.
            Parameters:
             - SIPEndPoint: The local SIP end point the request will be sent from.
             - SIPEndPoint: The remote SIP end point the request has been resolved to.
             - SIPRequest: The SIP request being sent.
            Returns: If the result is non-null it will be used to replace the current SIP Header
            instance on the SIP Request. If null the original header will be left in place.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransport.CustomiseResponseHeader">
            <summary>
            Optional function that can be set to customise the headers on an outbound SIP request.
            The callback is called BEFORE applying <seealso cref="F:SIPSorcery.SIP.SIPTransport.ContactHost"/> which means do not set
            both if the callback is intended to set the Contact URI.
            Parameters:
             - SIPEndPoint: The local SIP end point the request will be sent from.
             - SIPEndPoint: The remote SIP end point the request has been resolved to.
             - SIPRequest: The SIP request being sent.
            Returns: If the result is non-null it will be used to replace the current SIP Header
            instance on the SIP Request. If null the original header will be left in place.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPTransport.DisableRetransmitSending">
            <summary>
            Warning: Do not set this property unless there is a specific problem with a remote
            SIP User Agent accepting SIP retransmits. The effect of setting this property is
            to only send each request and response for a transaction once, i.e. retransmits
            timers firing will not cause additional sending of the requests or responses to be
            put on the wire. SIP transaction processing will still occur as normal with the 
            exception of not sending the retransmitted messages. It's also only likely to
            be useful for cases where reliable transports, such as TCP and TLS, are being used,
            since they are the ones where retransmits have been observed to be misidentified.
            </summary>
            <remarks>
            For additional context see https://lists.cs.columbia.edu/pipermail/sip-implementors/2013-January/028817.html
            and https://github.com/sipsorcery/sipsorcery/issues/370#issuecomment-739495726.
            </remarks>
        </member>
        <member name="P:SIPSorcery.SIP.SIPTransport.MaxPendingTransactionsCount">
            <summary>
            Warning: Do not set this property unless you explicitly require a very high number of 
            in-flight SIP transactions. The default limit is high and increasing it is likely to
            have a significant impact on CPU and memory performance.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.#ctor">
            <summary>
            Creates a SIP transport class with default DNS resolver and SIP transaction engine.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.#ctor(System.Boolean,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            Allows the transport layer to be created to operate in a stateless mode.
            </summary>
            <param name="stateless">If true the transport layer will NOT queue incoming messages
            and will NOT use a transaction engine.</param>
            <param name="sipEncoding"></param>
            <param name="sipBodyEncoding"></param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.AddSIPChannel(System.Collections.Generic.List{SIPSorcery.SIP.SIPChannel})">
            <summary>
            Adds additional SIP Channels to the transport layer.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.AddSIPChannel(SIPSorcery.SIP.SIPChannel)">
            <summary>
            Adds an additional SIP Channel to the transport layer.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.RemoveSIPChannel(SIPSorcery.SIP.SIPChannel)">
            <summary>
            Removes a single SIP channel from the transport layer.
            </summary>
            <param name="sipChannel">The SIP channel to remove.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.Shutdown">
            <summary>
            Shuts down the SIP transport layer by closing all SIP channels and stopping long running tasks.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.ReceiveMessage(SIPSorcery.SIP.SIPChannel,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,System.Byte[])">
            <summary>
            Event handler for messages received on all SIP channels assigned to this transport. There 
            are two distinct modes of operation for processing messages depending on whether the queue
            incoming variable is set. If it is then new messages get added to a queue and are processed on
            a separate thread. If not then the message is processed on the same thread that received the 
            message. Generally only applications that do minimal processing, such as a stateless SIP Proxy,
            should do without the queueing. The biggest blocking risk is DNS. If the message is processed
            on the SIP channel thread and results in a DNS lookup then new receives could be blocked for 
            up to 10s.
            </summary>
            <param name="sipChannel">The SIP channel that received the message.</param>
            <param name="localEndPoint">The local end point the message was received on.</param>
            <param name="remoteEndPoint">The remote end point the message came from.</param>
            <param name="buffer">A buffer containing the received message.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.PreProcessRouteInfo(SIPSorcery.SIP.SIPRequest)">
            <summary>
            This function performs processing on a request to handle any actions that need to be taken based on the Route header.
            </summary>
            <remarks>
            The main sections in the RFC3261 dealing with Route header processing are sections 12.2.1.1 for request processing and
            16.4 for proxy processing.
            The steps to process requests for Route headers are:
             1. If route set is empty no further action is required, forward to destination resolved from request URI,
             2. If the request URI is identified as a value that was previously set as a Route by this SIP agent it means the
                previous hop was a strict router. Replace the request URI with the last Route header and go to next step,
             3. If the top most route header was set by this SIP agent then remove it and go to next step,
             4. If the top most route set does contain the lr parameter then forward to the destination resolved by it,
             5. If the top most route header does NOT contain the lr parameter is must be popped and inserted as the request URI
                and the original request URI must be added to the end of the route set, forward to destination resolved from request URI,
            </remarks>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.SendRawAsync(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,System.Byte[])">
            <summary>
            Allows raw bytes to be sent from one of the SIPTransport sockets. This should not be used for SIP payloads and instead is
            provided to allow other types of payloads to be multiplexed on the SIP socket. Examples are sending NAT keep-alives and
            STUN responses where it's useful to use the same socket as the SIP packets.
            </summary>
            <param name="localSIPEndPoint">The local SIP end point to do the send from. Must match the local end point of one of
            the SIP transports channels.</param>
            <param name="dstEndPoint">The destination end point to send the buffer to.</param>
            <param name="buffer">The data buffer to send.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.SendRequestAsync(SIPSorcery.SIP.SIPRequest,System.Boolean)">
            <summary>
            This send method does NOT wait if a DNS lookup is required. Instead it relies on the
            SIP retransmit logic to avoid to re-attempt the send at pre-defined intervals.
            This type of send is suitable for requests that are part of a transaction or for 
            SIP Proxy servers that are relying on the remote SIP agent to retransmit requests.
            </summary>
            <param name="sipRequest">The SIP request to send.</param>
            <param name="waitForDns">If true the request will wait for any required DNS lookup to 
            complete. This can potentially take many seconds. If false the DNS lookup will be
            queued and the send will need to be called again.</param>
            <returns>Will return InPorgress for a DNS cache miss. HostNotFound for a cache hit on a 
            failure response. Otherwise the result of the send attempt.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.SendRequestAsync(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPRequest)">
            <summary>
            Sends a SIP request asynchronously. This method will attempt to find the most appropriate
            local SIP channel in this SIP transport to send the request on.
            </summary>
            <param name="dstEndPoint">The destination end point to send the request to.</param>
            <param name="sipRequest">The SIP request to send.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.SendRequestAsync(SIPSorcery.SIP.SIPChannel,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPRequest)">
            <summary>
            Attempts to send a SIP request to the destination end point using the specified SIP channel.
            </summary>
            <param name="sipChannel">The SIP channel to use to send the SIP request.</param>
            <param name="dstEndPoint">The destination to send the SIP request to.</param>
            <param name="sipRequest">The SIP request to send.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.AddTransaction(SIPSorcery.SIP.SIPTransaction)">
            <summary>
            Add a SIP transaction to the engine which then keeps track of whether a response/acknowledgement has been received.
            For UDP "reliably" means retransmitting the message up to eleven times.
            If no response is received then periodic retransmits are made for up to T1 x 64 seconds (defaults to 30 seconds with 11 retransmits).
            </summary>
            <param name="sipTransaction">The SIP transaction encapsulating the SIP request or response that needs to be sent reliably.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.SendResponseAsync(SIPSorcery.SIP.SIPResponse,System.Boolean)">
            <summary>
            Forwards a SIP response. There are two main cases for a SIP response to be forwarded:
            - First case is when we have processed a request and are returning a response. In this case the response
              should be sent back on exactly the same socket the request came on.
            - Second case is when we are acting as a Proxy and the response is on it's way back from the agent
              that processed the request. In this case it's highly likely the response needs to be forwarded to
              a different end point then the one it came from and it's also possible it will need to use a completely
              different channel to send on compared to the one it arrived on.
            
            Forwarding logic:
            - If the channel hints are set then an attempt will be made to use them to find an appropriate channel to
              send the response on. If the hinted channel can't be found or it is found but is the wrong protocol then
              move onto the next step,
            - The information in the Top Via header will be used to find the best channel to forward the response on.
            This is a special send method that relies on the SIP transaction retransmit logic to avoid
            blocking when a DNS request is required. This type of send is suitable for responses that 
            are part of a transaction or for SIP Proxy servers that are relying on the remote 
            SIP agent to retransmit requests.
            </summary>
            <param name="sipResponse">The SIP response to send.</param>
            <returns>Will return InPorgress for a DNS cache miss. HostNotFound for a cache hit on a 
            failure response. Otherwise the result of the send attempt.</returns>
            <param name="waitForDns">If true the request will wait for any required DNS lookup to 
            complete. This can potentially take many seconds. If false the DNS lookup will be
            queued and the send will need to be called again.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.SendResponseAsync(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPResponse)">
            <summary>
            Asynchronously forwards a SIP response to the specified destination.
            </summary>
            <param name="dstEndPoint">The destination end point to send the response to.</param>
            <param name="sipResponse">The SIP response to send.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.AdjustHeadersForEndPoint(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPHeader)">
            <summary>
            Checks specific SIP headers for "0.0.0.0" or "::0" strings and where found replaces them with the socket that the
            request or response is being sent from. This mechanism is used to allow higher level agents to indicate they want to defer
            the setting of those header fields to the transport class.
            </summary>
            <param name="sendFromSIPEndPoint">The IP end point the request or response is being sent from.</param>
            <param name="header">The SIP header object to apply the adjustments to. The header object will be updated
            in place with any header adjustments.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.ProcessReceiveQueue">
            <summary>
            Dedicated loop to process queued received messages.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.SIPMessageReceived(SIPSorcery.SIP.SIPChannel,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,System.Byte[])">
            <summary>
            Processes an incoming message from a SIP channel.
            </summary>
            <param name="sipChannel">The SIP channel the message was received on.</param>
            <param name="localEndPoint">The local end point that the SIP channel received the message on.</param>
            <param name="remoteEndPoint">The remote end point the message came from.</param>
            <param name="buffer">The raw message received.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.GetSIPChannelForDestination(SIPSorcery.SIP.SIPProtocolsEnum,System.Net.IPEndPoint,System.String,System.Boolean)">
            <summary>
            Attempts to locate a SIP channel that can be used to communicate with a remote end point
            over a specific SIP protocol.
            </summary>
            <param name="protocol">The SIP protocol required for the communication.</param>
            <param name="dst">The destination end point.</param>
            <param name="channelIDHint">An optional channel ID that gives a hint as to the preferred 
            channel to select.</param>
            <param name="isForResponse">True if the channel is needed for a SIP response. New channels will not be
            created to send responses.</param>
            <returns>If found a SIP channel or null if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.GetSIPChannel(SIPSorcery.SIP.SIPProtocolsEnum,System.Net.IPAddress)">
            <summary>
            Helper method for GetSIPChannelForDestination to do the SIP channel match check when it is known
            exactly which SIP protocol and listening IP address we're after.
            </summary>
            <param name="protocol">The SIP protocol to find a match for.</param>
            <param name="listeningAddress">The listening IP address to find a match for.</param>
            <returns>A SIP channel if a match is found or null if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.GetSIPChannels">
            <summary>
            Gets a list of this transport's SIP channels.
            </summary>
            <returns>A list of SIP channels.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.GetTransaction(System.String)">
            <summary>
            Attempts to retrieve the transaction matching the supplied ID.
            </summary>
            <param name="transactionId">The transaction ID to match.</param>
            <returns>If found a transaction object or null if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.CreateChannel(SIPSorcery.SIP.SIPProtocolsEnum,System.Net.Sockets.AddressFamily,System.Int32)">
            <summary>
            Creates an on demand SIP channel suitable for outbound connections.
            </summary>
            <param name="protocol">The transport protocol of the SIP channel to create.</param>
            <param name="addressFamily">Whether the channel should be created for IPv4 or IPv6.</param>
            <param name="port">Optional. If specified channels that open a listener will attempt to 
            use this port.</param>
            <returns>A SIP channel if it was possible to create or null if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.ResolveSIPUriAsync(SIPSorcery.SIP.SIPURI)">
            <summary>
            Public wrapper for the SIP DNS lookup call being used by this SIP transport.
            </summary>
            <param name="uri">The SIP URI to resolve.</param>
            <returns>If successful a SIP end point for the SIP URI. For failures SIPEndPoint.Empty.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransport.EnableTraceLogs">
            <summary>
            Helper method to enable logging of SIP request, responses and retransmits.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPURI">
            <summary>
            Implements the SIP URI concept from the SIP RFC3261.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPURI.UserParameters">
            <summary>
            contains the user part parameters if there are any
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPURI.UserWithoutParameters">
            <summary>
            Contains the User part without parameters in case there are any
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPURI.Protocol">
            <summary>
            The protocol for a SIP URI is dictated by the scheme of the URI and then by the transport parameter and finally by the 
            use of a default protocol. If the URI is a sips one then the protocol must be TLS. After that if there is a transport
            parameter specified for the URI it dictates the protocol for the URI. Finally if there is no transport parameter for a sip
            URI then the default UDP transport is used.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPURI.CanonicalAddress">
            <summary>
            Returns a string that can be used to compare SIP URI addresses.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPURI.ParseUserParameters">
            <summary>
            this function checks 'User' for user part paramters and puts them into 'UserParameters' and the part before Parameters into UserNumber
            The Function is called automatically if user=phone is set.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPURI.ToParameterlessString">
            <summary>
            Returns a string representation of the URI with any parameter and headers omitted except for the transport
            parameter. The string returned by this function is used amongst other things to match Route headers set by this
            SIP agent.
            </summary>
            <returns>A string representation of the URI with headers and parameters omitted except for the transport parameter if it is required.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPURI.ToAOR">
            <summary>
            Returns an address of record for the SIP URI which is a string in the format user@host.
            </summary>
            <returns>A string representing the address of record for the URI.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPURI.Mangle(SIPSorcery.SIP.SIPURI,System.Net.IPEndPoint)">
            <summary>
            Checks whether the specified SIP URI Host field contains a private IPv4 address
            and if so and the received on IP address is different then "mangles" the host to
            contain the received on IP end point. The purpose of the mangling is to assist
            in dealing with IPv4 NAT's.
            If the SIP URI host is IPv6 or a host name no mangling will be done.
            </summary>
            <param name="uri">The SIP URI to mangle.</param>
            <param name="receivedOn">The IP end point that the SIP message was received from.</param>
            <returns>A new SIP URI if mangling took place. Null if no mangling occurred.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPURI.IsDefaultPort">
            <summary>
            Indicates whether the SIP URI is using the default port for its protocol.
            Default ports are 5060 for UDP and TCP, 5061 for TLS, 80 for WS and 443 for WSS.
            </summary>
            <returns>True if the default port is being used, false if not.</returns>
        </member>
        <member name="T:SIPSorcery.SIP.SIPUserField">
            <summary>
            Encapsulates the format for the SIP Contact, From, PAI and To headers.
            </summary>
            <remarks>
            If no "&lt;" and "&gt;" are present, all parameters after the URI are header
            parameters, not URI parameters.
            </remarks>
            <code>
            <![CDATA[
            name-addr      =  [ display-name ] LAQUOT addr-spec RAQUOT
            addr-spec      =  SIP-URI / SIPS-URI / absoluteURI
            SIP-URI          =  "sip:" [ userinfo ] hostport
            uri-parameters [ headers ]
            SIPS-URI         =  "sips:" [ userinfo ] hostport
            uri-parameters [ headers ]
            userinfo         =  ( user / telephone-subscriber ) [ ":" password ] "@"
            ]]>
            </code>
        </member>
        <member name="T:SIPSorcery.SIP.SIPCDR">
            <summary>
            Call detail record for a SIP call.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPEventDialogInfo">
            <summary>
            Represents the top level XML element on a SIP event dialog payload as described in: 
            RFC4235 "An INVITE-Initiated Dialog Event Package for the Session Initiation Protocol (SIP)".
            </summary>
            <remarks>
            RFC4235 on Dialog Event Packages:
             - To establish a subscription to a specific dialog the call-id, to-tag and from-tag must be specified,
             - To establish a subscription to a set of dialogs the call-id and to-tag must be specified.
             Treatment of the Event header:
              - If the Event header contains dialog identifiers a notification is sent for any dialogs that match them AND the user in the SUBSCRIBE URI.
              - If the Event header does not contain any dialog identifiers then a notification is sent for every dialog that matches the user in the SUBSCRIBE URI.
            - Notifications contain the identities of the dialog participants, the target URIs and the dialog identifiers.
            - The format of the NOTIFY bodies must be in a format specified in a SUBSCRIBE Accept header or if omitted a default format of "application/dialog-info+xml".
            
            Example of an empty dialog notification body:
            
            <code>
            <![CDATA[
             <?xml version="1.0"?>
             <dialog-info xmlns="urn:ietf:params:xml:ns:dialog-info" version="0" notify-state="full" entity="sip:alice@example.com" />
             ]]>
            </code>
            
            Example of a single entry dialog notification body:
            
            <code>
            <![CDATA[
            <?xml version="1.0"?>
            <dialog-info xmlns="urn:ietf:params:xml:ns:dialog-info" version="0" state="partial" entity="sip:alice@example.com">
              <dialog id="as7d900as8" call-id="a84b4c76e66710" local-tag="1928301774" direction="initiator">
               <state event="rejected" code="486">terminated</state> <!-- The state element is the only mandatory child element for a dialog element. -->
               <duration>145</duration>
              </dialog>
             </dialog-info>
             ]]>
            </code>
            </remarks>
        </member>
        <member name="M:SIPSorcery.SIP.SIPEventDialogParticipant.ToXML(System.String)">
            <summary>
            Puts the dialog participant information to an XML element.
            </summary>
            <param name="nodeName">A participant can represent a local or remote party, the node name needs to be set to either "local" or "remote".</param>
            <returns>An XML element representing the dialog participant.</returns>
        </member>
        <member name="F:SIPSorcery.SIP.SIPEventPackagesEnum.Dialog">
            <summary>
            RFC4235 "An INVITE-Initiated Dialog Event Package for the Session Initiation Protocol (SIP)".
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPEventPackagesEnum.MessageSummary">
            <summary>
            RFC3842 "A Message Summary and Message Waiting Indication Event Package for the Session
            Initiation Protocol (SIP)"
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPEventPackagesEnum.Presence">
            <summary>
            RFC3856.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPEventPackagesEnum.Refer">
            <summary>
            RFC3515 "The Session Initiation Protocol (SIP) Refer Method".
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransactionStatesEnum.Cancelled">
            <summary>
            This state is not in the SIP RFC but is deemed the most practical 
            way to record that an INVITE has been cancelled. Other states 
            will have ramifications for the transaction lifetime.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransactionTypesEnum.InviteServer">
            <summary>
            User agent server transaction.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransactionTypesEnum.NonInvite">
            <summary>
            All non-INVITE transaction types.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransactionTypesEnum.InviteClient">
            <summary>
            User agent client transaction.
            </summary>
        </member>
        <member name="T:SIPSorcery.SIP.SIPTransaction">
             <summary>
             A state machine for SIP transactions.
             </summary>
             <note>
             A response matches a client transaction under two conditions:
            
             1.  If the response has the same value of the branch parameter in
             the top Via header field as the branch parameter in the top
             Via header field of the request that created the transaction.
            
             2.  If the method parameter in the CSeq header field matches the
             method of the request that created the transaction.  The
             method is needed since a CANCEL request constitutes a
             different transaction, but shares the same value of the branch
             parameter.
             
             [RFC 3261 17.2.3 page 137]
             A request matches a transaction:
            
             1. the branch parameter in the request is equal to the one in the
                 top Via header field of the request that created the
                 transaction, and
            
              2. the sent-by value in the top Via of the request is equal to the
                 one in the request that created the transaction, and
            
              3. the method of the request matches the one that created the
                 transaction, except for ACK, where the method of the request
                 that created the transaction is INVITE.
             </note>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransaction.m_maxRingTime">
            <summary>
            Maximum time an INVITE will be left ringing for (typically 10 minutes).
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransaction.DeliveryFailed">
            <summary>
            If the transport layer does not receive a response to the request in the 
            allotted time the request will be marked as failed.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransaction.m_sentBy">
            <summary>
             The contact address from the top Via header that created the transaction. 
             This is used for matching requests to server transactions.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransaction.CompletedAt">
            <summary>
            For INVITEs this is the time they received the final response and is used to 
            calculate the time they expire as T6 after this.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransaction.TimedOutAt">
            <summary>
            If the transaction times out this holds the value it timed out at.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransaction.OutboundProxy">
            <summary>
            If not null this value is where ALL transaction requests should be sent to.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPTransaction.UnreliableProvisionalResponse">
            <summary>
            The most recent non reliable provisional response that was requested to be sent.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPTransaction.ReliableProvisionalResponse">
            <summary>
            The most recent provisional response that was requested to be sent. If reliable provisional responses
            are being used then this response needs to be sent reliably in the same manner as the final response.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPTransaction.TransactionFinalResponse">
            <summary>
            This is the final response being sent by a UAS transaction or the one received by a UAC one.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransaction.PrackSupported">
            <summary>
            If am INVITE transaction client indicates RFC3262 support in the Require or Supported header we'll deliver reliable 
            provisional responses.
            </summary> 
        </member>
        <member name="E:SIPSorcery.SIP.SIPTransaction.OnAckRequestReceived">
            <summary>
            The UAS transaction needs the ACK request if the original INVITE did not have an SDP offer.
            In that case the ACK request contains the SDP answer.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransaction.#ctor(SIPSorcery.SIP.SIPTransport,SIPSorcery.SIP.SIPRequest,SIPSorcery.SIP.SIPEndPoint)">
            <summary>
            Creates a new SIP transaction and adds it to the list of in progress transactions.
            </summary>
            <param name="sipTransport">The SIP Transport layer that is to be used with the transaction.</param>
            <param name="transactionRequest">The SIP Request on which the transaction is based.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransaction.PRACKReceived(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPRequest)">
            <summary>
            PRACK request received to acknowledge the last provisional response that was sent.
            </summary>
            <param name="localSIPEndPoint">The SIP socket the request was received on.</param>
            <param name="remoteEndPoint">The remote SIP socket the request originated from.</param>
            <param name="sipRequest">The PRACK request.</param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransaction.HasDeliveryExpired(System.Int32)">
            <summary>
            Checks whether a transaction's delivery window has expired.
            </summary>
            <param name="maxLifetimeMilliseconds">The maximum time a transaction has to get delivered.</param>
            <returns>True if it has expired, false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransaction.Expire(System.DateTime)">
            <summary>
            Marks a transaction as expired and prevents any more delivery attempts of outstanding 
            requests of responses.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransaction.IsRetransmitDue(System.Int32,System.Int32)">
            <summary>
            Checks if the transaction is due for a retransmit.
            </summary>
            <param name="t1">SIP timing constant T1.</param>
            <param name="t2">SIP timing constant T2.</param>
            <returns>True if a retransmit is due, false if not.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransaction.SendRequestAsync(SIPSorcery.SIP.SIPRequest)">
            <summary>
            Sends a SIP request in a non-reliable fashion. The request will be sent once and no automatic retransmits occur.
            This is suitable for requests like ACK which do not get a response.
            </summary>
            <param name="sipRequest">The SIP request to send.</param>
            <returns>Success if no errors occurred sending the request or an error indication if there were.</returns>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransactionEngine.MaxReliableTranismissionsCount">
            <summary>
            The maximum number of pending transactions that can be outstanding.
            </summary>
        </member>
        <member name="F:SIPSorcery.SIP.SIPTransactionEngine.m_pendingTransactions">
            <summary>
            Contains a list of the transactions that are being monitored or responses and retransmitted 
            on when none is received to attempt a more reliable delivery rather then just relying on the initial 
            request to get through.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.SIPTransactionEngine.DisableRetransmitSending">
            <summary>
            Disables sending of retransmitted requests and responses.
            <seealso cref="P:SIPSorcery.SIP.SIPTransport.DisableRetransmitSending"/>
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransactionEngine.GetTransaction(SIPSorcery.SIP.SIPRequest)">
            <summary>
            Transaction matching see RFC3261 17.1.3 &amp; 17.2.3 for matching client and server transactions respectively. 
            IMPORTANT NOTE this transaction matching applies to all requests and responses EXCEPT ACK requests to 2xx responses see 13.2.2.4. 
            For ACK's to 2xx responses the ACK represents a separate transaction. However for a UAS sending an INVITE response the ACK still 
            has to be matched to an existing server transaction in order to transition it to a Confirmed state.
            
            ACK's:
             - The ACK for a 2xx response will have the same CallId, From Tag and To Tag.
             - An ACK for a non-2xx response will have the same branch ID as the INVITE whose response it acknowledges.
             
            PRACK Requests:
            (From RFC3262)
            A matching PRACK is defined as one within the same dialog as the response, and
            whose method, CSeq-num, and response-num in the RAck header field
            match, respectively, the method from the CSeq, the sequence number
            from the CSeq, and the sequence number from the RSeq of the reliable
            provisional response.
            </summary>
            <param name="sipRequest">The request to attempt to locate a matching transaction for.</param>
            <returns>A matching transaction or null if no match found.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransactionEngine.RemoveTransaction(System.String)">
            <summary>
            Removes a transaction from the pending list.
            </summary>
            <param name="transactionId"></param>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransactionEngine.IsCallIdUniqueForPending(System.String)">
            <summary>
             Checks whether there is only a single transaction outstanding for a Call-ID header. This is used in an experimental trial of matching
             ACK's on the Call-ID if the full check fails.
            </summary>
            <param name="callId">The SIP Header Call-ID to check for.</param>
            <returns>True if there is only a single pending transaction with the specified  Call-ID, false otherwise.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransactionEngine.ProcessPendingTransactions">
            <summary>
            A long running method that monitors and processes a list of transactions that need to send a reliable
            request or response.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransactionEngine.SendTransactionProvisionalResponse(SIPSorcery.SIP.SIPTransaction)">
            <summary>
            Sends or resends a Invite Server transaction provisional response. Only
            relevant reliable provisional responses as per RFC3262 are supported.
            </summary>
            <param name="transaction">The transaction to send the provisional response for.</param>
            <returns>The result of the send attempt.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransactionEngine.SendTransactionFinalResponse(SIPSorcery.SIP.SIPTransaction)">
            <summary>
            Sends or resends a transaction final response.
            </summary>
            <param name="transaction">The transaction to send the final response for.</param>
            <returns>The result of the send attempt.</returns>
        </member>
        <member name="M:SIPSorcery.SIP.SIPTransactionEngine.SendTransactionRequest(SIPSorcery.SIP.SIPTransaction)">
            <summary>
            Sends or resends the transaction request.
            </summary>
            <param name="transaction">The transaction to resend the request for.</param>
            <returns>The result of the send attempt.</returns>
        </member>
        <member name="T:SIPSorcery.SIP.UACInviteTransaction">
            <summary>
            SIP transaction that initiates a call to a SIP User Agent Server. This transaction 
            processes outgoing calls SENT by the application.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.UACInviteTransaction.#ctor(SIPSorcery.SIP.SIPTransport,SIPSorcery.SIP.SIPRequest,SIPSorcery.SIP.SIPEndPoint,System.Boolean,System.Boolean)">
            <summary>
            Default constructor for user agent client INVITE transaction.
            </summary>
            <param name="sendOkAckManually">If set an ACK request for the 2xx response will NOT be sent and it will be up to 
            the application to explicitly call the SendACK request.</param>
            <param name="disablePrackSupport">If set to true then PRACK support will not be set in the initial INVITE request.</param>
        </member>
        <member name="M:SIPSorcery.SIP.UACInviteTransaction.#ctor(SIPSorcery.SIP.SIPTransport,SIPSorcery.SIP.SIPRequest,SIPSorcery.SIP.SIPEndPoint,System.Boolean)">
            <summary>
            Default constructor for user agent client INVITE transaction.
            </summary>
            <param name="sendOkAckManually">If set an ACK request for the 2xx response will NOT be sent and it will be up to 
            the application to explicitly call the SendACK request.</param>
        </member>
        <member name="M:SIPSorcery.SIP.UACInviteTransaction.GetAcknowledgeRequest(SIPSorcery.SIP.SIPResponse,SIPSorcery.SIP.SIPMethodsEnum,System.Int32,System.String,System.String)">
            <summary>
            Generates the ACK or PRACK request to acknowledge a response. This method generates the ACK requests 
            for INVITE 2xx and PRACK for 1xx responses. The request needs to be sent as part of a new transaction. 
            Note for constructing the ACK for INVITE >= 300 responses is <seealso cref="M:SIPSorcery.SIP.UACInviteTransaction.GetInTransactionACKRequest(SIPSorcery.SIP.SIPResponse,SIPSorcery.SIP.SIPURI)"/>.
            </summary>
            <param name="ackResponse">The response being acknowledged.</param>
            <param name="ackMethod">The acknowledgement request method, either ACK or PRACK.</param>
            <param name="cseq">The SIP CSeq header value to set on the acknowledge request.</param>
            <param name="content">The optional content body for the ACK request.</param>
            <param name="contentType">The optional content type.</param>
        </member>
        <member name="M:SIPSorcery.SIP.UACInviteTransaction.GetNewTxACKRequest(SIPSorcery.SIP.SIPMethodsEnum,System.Int32,SIPSorcery.SIP.SIPResponse,SIPSorcery.SIP.SIPURI)">
            <summary>
            New transaction ACK requests are for 2xx responses, i.e. INVITE accepted and 
            dialogue being created.
            </summary>
            <remarks>
            From RFC 3261 Chapter 13.2.2.4 - ACK for 2xx final responses
            
            IMPORTANT:
            an ACK for a 2xx final response is a new transaction and has a new branch ID.
            
            The UAC core MUST generate an ACK request for each 2xx received from
            the transaction layer.  The header fields of the ACK are constructed
            in the same way as for any request sent within a dialog (see Section
            12) with the exception of the CSeq and the header fields related to
            authentication.  The sequence number of the CSeq header field MUST be
            the same as the INVITE being acknowledged, but the CSeq method MUST
            be ACK.  The ACK MUST contain the same credentials as the INVITE.  If
            the 2xx contains an offer (based on the rules above), the ACK MUST
            carry an answer in its body.  If the offer in the 2xx response is not
            acceptable, the UAC core MUST generate a valid answer in the ACK and
            then send a BYE immediately.
            </remarks>
        </member>
        <member name="M:SIPSorcery.SIP.UACInviteTransaction.GetInTransactionACKRequest(SIPSorcery.SIP.SIPResponse,SIPSorcery.SIP.SIPURI)">
             <summary>
             In transaction ACK requests are for non-2xx responses, i.e. INVITE rejected and no dialogue being created.
             </summary>
             <remarks>
             From RFC 3261 Chapter 17.1.1.3 - ACK for non-2xx final responses
             
             IMPORTANT:
             an ACK for a non-2xx response will also have the same branch ID as the INVITE whose response it acknowledges.
             
             The ACK request constructed by the client transaction MUST contain
             values for the Call-ID, From, and Request-URI that are equal to the
             values of those header fields in the request passed to the transport
             by the client transaction (call this the "original request").  The To
             header field in the ACK MUST equal the To header field in the
             response being acknowledged, and therefore will usually differ from
             the To header field in the original request by the addition of the
             tag parameter.  The ACK MUST contain a single Via header field, and
             this MUST be equal to the top Via header field of the original
             request.  The CSeq header field in the ACK MUST contain the same
             value for the sequence number as was present in the original request,
             but the method parameter MUST be equal to "ACK".
            
             If the INVITE request whose response is being acknowledged had Route
             header fields, those header fields MUST appear in the ACK.  This is
             to ensure that the ACK can be routed properly through any downstream
             stateless proxies.
             </remarks>
        </member>
        <member name="M:SIPSorcery.SIP.UACInviteTransaction.CancelCall(System.String)">
            <summary>
            Cancels this transaction. This does NOT generate a CANCEL request. A separate
            reliable transaction needs to be created for that.
            </summary>
            <param name="cancelReason">The reason for cancelling the transaction.</param>
        </member>
        <member name="M:SIPSorcery.SIP.UACInviteTransaction.AckAnswer(SIPSorcery.SIP.SIPResponse,System.String,System.String)">
            <summary>
            Sends AckAnswer response.
            </summary>
            <param name="sipResponse">SIPResponse to acknowledge</param>
            <param name="content">The optional content body for the ACK request.</param>
            <param name="contentType">The optional content type.</param>
        </member>
        <member name="T:SIPSorcery.SIP.UASInviteTransaction">
            <summary>
            The server transaction for an INVITE request. This transaction processes incoming calls RECEIVED by the application.
            </summary>
        </member>
        <member name="P:SIPSorcery.SIP.UASInviteTransaction.LocalTag">
            <summary>
            The local tag is set on the To SIP header and forms part of the information used to identify a SIP dialog.
            </summary>
        </member>
        <member name="E:SIPSorcery.SIP.UASInviteTransaction.OnAckReceived">
            <summary>
            An application will be interested in getting a notification about the ACK request if it
            is being used to carry the SDP answer. This occurs if the original INVITE did not contain an
            SDP offer.
            </summary>
        </member>
        <member name="M:SIPSorcery.SIP.UASInviteTransaction.CancelCall(SIPSorcery.SIP.SIPRequest)">
            <summary>
            Cancels this transaction stopping any further processing or transmission of a previously
            generated final response.
            </summary>
            <returns>A socket error with the result of the cancel.</returns>
        </member>
        <member name="E:SIPSorcery.Net.DtlsSrtpClient.OnAlert">
            <summary>
            Parameters:
             - alert level,
             - alert type,
             - alert description.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.DtlsSrtpServer.OnAlert">
            <summary>
            Parameters:
             - alert level,
             - alert type,
             - alert description.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.DtlsSrtpServer.NotifySecureRenegotiation(System.Boolean)">
            <summary>
            This override prevents a TLS fault from being generated if a "Client Hello" is received that
            does not support TLS renegotiation (https://tools.ietf.org/html/rfc5746).
            This override is required to be able to complete a DTLS handshake with the Pion WebRTC library,
            see https://github.com/pion/dtls/issues/274.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.DtlsSrtpTransport._chunks">
            <summary>The collection of chunks to be written.</summary>
        </member>
        <member name="F:SIPSorcery.Net.DtlsSrtpTransport.TimeoutMilliseconds">
            <summary>
            Sets the period in milliseconds that the handshake attempt will timeout
            after.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.DtlsSrtpTransport.RetransmissionMilliseconds">
            <summary>
            Sets the period in milliseconds that receive will wait before try retransmission
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.DtlsSrtpTransport.OnAlert">
            <summary>
            Parameters:
             - alert level,
             - alert type,
             - alert description.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.DtlsSrtpTransport.GetMillisecondsRemaining">
            <summary>
            Returns the number of milliseconds remaining until a timeout occurs.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.DtlsSrtpTransport.Dispose(System.Boolean)">
            <summary>
            Close the transport if the instance is out of scope.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.DtlsSrtpTransport.Dispose">
            <summary>
            Close the transport if the instance is out of scope.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.DtlsSrtpTransport.BackOff(System.Int32)">
            <summary>
            Handle retransmission time based in DTLS 1.3 
            </summary>
            <param name="currentWaitMillis"></param>
            <returns></returns>
        </member>
        <member name="F:SIPSorcery.Net.DtlsUtils.DEFAULT_KEY_SIZE">
            <summary>
            The key size when generating random keys for self signed certificates.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.DtlsUtils.ConvertBouncyCert(Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair)">
            <remarks>Plagiarised from https://github.com/CryptLink/CertBuilder/blob/master/CertBuilder.cs.
            NOTE: netstandard2.1+ and netcoreapp3.1+ have x509.CopyWithPrivateKey which will avoid the need to
            use the serialize/deserialize from pfx to get from bouncy castle to .NET Core X509 certificates.</remarks>
        </member>
        <member name="M:SIPSorcery.Net.DtlsUtils.ToRSA(Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters)">
            <summary>
            This method and the related ones have been copied from the BouncyCode DotNetUtilities 
            class due to https://github.com/bcgit/bc-csharp/issues/160 which prevents the original
            version from working on non-Windows platforms.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.DtlsUtils.IsHashSupported(System.String)">
            <summary>
            Verifies the hash algorithm is supported by the utility functions in this class.
            </summary>
            <param name="hashAlgorithm">The hash algorithm to check.</param>
        </member>
        <member name="T:SIPSorcery.Net.SrtpPolicy">
             <summary>
             SrtpPolicy holds the SRTP encryption / authentication policy of a SRTP
             session.
            
             @author Bing SU (nova.su @gmail.com)
             </summary>
        </member>
        <member name="M:SIPSorcery.Net.SrtpPolicy.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             Construct a SRTPPolicy object based on given parameters.
             This class acts as a storage class, so all the parameters are passed in
             through this constructor.
            
             @param encType SRTP encryption type
             @param encKeyLength SRTP encryption key length
             @param authType SRTP authentication type
             @param authKeyLength SRTP authentication key length
             @param authTagLength SRTP authentication tag length
             @param saltKeyLength SRTP salt key length
        </member>
        <member name="M:SIPSorcery.Net.IPacketTransformer.Transform(System.Byte[])">
            Transforms a non-secure packet.
            
            @param pkt
                       the packet to be transformed
            @return The transformed packet. Returns null if the packet cannot be transformed.
        </member>
        <member name="M:SIPSorcery.Net.IPacketTransformer.Transform(System.Byte[],System.Int32,System.Int32)">
            Transforms a specific non-secure packet.
            
            @param pkt
                       The packet to be secured
            @param offset
                       The offset of the packet data
            @param length
                       The length of the packet data
            @return The transformed packet. Returns null if the packet cannot be
                    transformed.
        </member>
        <member name="M:SIPSorcery.Net.IPacketTransformer.ReverseTransform(System.Byte[])">
            Reverse-transforms a specific packet (i.e. transforms a transformed
            packet back).
            
            @param pkt
                       the transformed packet to be restored
            @return Whether the packet was successfully restored
        </member>
        <member name="M:SIPSorcery.Net.IPacketTransformer.ReverseTransform(System.Byte[],System.Int32,System.Int32)">
            Reverse-transforms a specific packet (i.e. transforms a transformed
            packet back).
            
            @param pkt
                       the packet to be restored
            @param offset
                       the offset of the packet data
            @param length
                       the length of data in the packet
            @return The restored packet. Returns null if packet cannot be restored.
        </member>
        <member name="M:SIPSorcery.Net.IPacketTransformer.Close">
            Close the transformer and underlying transform engine.
            
            The close functions closes all stored crypto contexts. This deletes key
            data and forces a cleanup of the crypto contexts.
        </member>
        <member name="M:SIPSorcery.Net.ITransformEngine.GetRTPTransformer">
             Gets the <tt>PacketTransformer</tt> for RTP packets.
            
             @return the <tt>PacketTransformer</tt> for RTP packets
        </member>
        <member name="M:SIPSorcery.Net.ITransformEngine.GetRTCPTransformer">
             Gets the <tt>PacketTransformer</tt> for RTCP packets.
            
             @return the <tt>PacketTransformer</tt> for RTCP packets
        </member>
        <member name="F:SIPSorcery.Net.RawPacket.EXT_HEADER_SIZE">
            The size of the extension header as defined by RFC 3550.
        </member>
        <member name="F:SIPSorcery.Net.RawPacket.FIXED_HEADER_SIZE">
            The size of the fixed part of the RTP header as defined by RFC 3550.
        </member>
        <member name="F:SIPSorcery.Net.RawPacket.buffer">
            Byte array storing the content of this Packet
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.#ctor">
            Initializes a new empty <tt>RawPacket</tt> instance.
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.#ctor(System.Byte[],System.Int32,System.Int32)">
             Initializes a new <tt>RawPacket</tt> instance with a specific
             <tt>byte</tt> array buffer.
            
             @param buffer the <tt>byte</tt> array to be the buffer of the new
             instance 
             @param offset the offset in <tt>buffer</tt> at which the actual data to
             be represented by the new instance starts
             @param length the number of <tt>byte</tt>s in <tt>buffer</tt> which
             constitute the actual data to be represented by the new instance
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.Append(System.Byte[],System.Int32)">
             Append a byte array to the end of the packet. This may change the data
             buffer of this packet.
            
             @param data byte array to append
             @param len the number of bytes to append
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetBuffer">
             Get buffer containing the content of this packet
            
             @return buffer containing the content of this packet
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetExtensionBit">
             Returns <tt>true</tt> if the extension bit of this packet has been set
             and <tt>false</tt> otherwise.
            
             @return  <tt>true</tt> if the extension bit of this packet has been set
             and <tt>false</tt> otherwise.
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetExtensionLength">
             Returns the length of the extensions currently added to this packet.
            
             @return the length of the extensions currently added to this packet.
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetCsrcCount">
             Returns the number of CSRC identifiers currently included in this packet.
            
             @return the CSRC count for this <tt>RawPacket</tt>.
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetHeaderLength">
             Get RTP header length from a RTP packet
            
             @return RTP header length from source RTP packet
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetLength">
             Get the length of this packet's data
            
             @return length of this packet's data
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetPaddingSize">
             Get RTP padding size from a RTP packet
            
             @return RTP padding size from source RTP packet
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetPayload">
             Get the RTP payload (bytes) of this RTP packet.
            
             @return an array of <tt>byte</tt>s which represents the RTP payload of
             this RTP packet
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetPayloadLength">
             Get RTP payload length from a RTP packet
            
             @return RTP payload length from source RTP packet
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetPayloadType">
             Get RTP payload type from a RTP packet
            
             @return RTP payload type of source RTP packet
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetRTCPSSRC">
             Get RTCP SSRC from a RTCP packet
            
             @return RTP SSRC from source RTP packet
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetSequenceNumber">
             Get RTP sequence number from a RTP packet
            
             @return RTP sequence num from source packet
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetSRTCPIndex(System.Int32)">
             Get SRTCP sequence number from a SRTCP packet
            
             @param authTagLen authentication tag length
             @return SRTCP sequence num from source packet
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetSSRC">
             Get RTP SSRC from a RTP packet
            
             @return RTP SSRC from source RTP packet
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.GetTimestamp">
             Returns the timestamp for this RTP <tt>RawPacket</tt>.
            
             @return the timestamp for this RTP <tt>RawPacket</tt>.
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.Grow(System.Int32)">
             Grow the internal packet buffer.
            
             This will change the data buffer of this packet but not the
             length of the valid data. Use this to grow the internal buffer
             to avoid buffer re-allocations when appending data.
            
             @param delta number of bytes to grow
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.ReadInt(System.Int32)">
             Read a integer from this packet at specified offset
            
             @param off start offset of the integer to be read
             @return the integer to be read
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.ReadRegion(System.Int32,System.Int32)">
             Read a byte region from specified offset with specified length
            
             @param off start offset of the region to be read
             @param len length of the region to be read
             @return byte array of [offset, offset + length)
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.ReadRegionToBuff(System.Int32,System.Int32,System.Byte[])">
            Read a byte region from specified offset in the RTP packet and with
            specified length into a given buffer
            
            @param off
                       start offset in the RTP packet of the region to be read
            @param len
                       length of the region to be read
            @param outBuff
                       output buffer
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.ReadUnsignedShortAsInt(System.Int32)">
             Read an unsigned short at specified offset as a int
            
             @param off start offset of the unsigned short
             @return the int value of the unsigned short at offset
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.ReadUnsignedIntAsLong(System.Int32)">
             Read an unsigned integer as long at specified offset
            
             @param off start offset of this unsigned integer
             @return unsigned integer as long at offset
        </member>
        <member name="M:SIPSorcery.Net.RawPacket.shrink(System.Int32)">
             Shrink the buffer of this packet by specified length
            
             @param len length to shrink
        </member>
        <member name="F:SIPSorcery.Net.SrtcpCryptoContext.REPLAY_WINDOW_SIZE">
            The replay check windows size 
        </member>
        <member name="F:SIPSorcery.Net.SrtcpCryptoContext.ssrcCtx">
            RTCP SSRC of this cryptographic context 
        </member>
        <member name="F:SIPSorcery.Net.SrtcpCryptoContext.mki">
            Master key identifier 
        </member>
        <member name="F:SIPSorcery.Net.SrtcpCryptoContext.receivedIndex">
            Index received so far 
        </member>
        <member name="F:SIPSorcery.Net.SrtcpCryptoContext.sentIndex">
            Index sent so far 
        </member>
        <member name="F:SIPSorcery.Net.SrtcpCryptoContext.replayWindow">
            Bit mask for replay check 
        </member>
        <member name="F:SIPSorcery.Net.SrtcpCryptoContext.masterKey">
            Master encryption key 
        </member>
        <member name="F:SIPSorcery.Net.SrtcpCryptoContext.masterSalt">
            Master salting key 
        </member>
        <member name="F:SIPSorcery.Net.SrtcpCryptoContext.encKey">
            Derived session encryption key 
        </member>
        <member name="F:SIPSorcery.Net.SrtcpCryptoContext.authKey">
            Derived session authentication key 
        </member>
        <member name="F:SIPSorcery.Net.SrtcpCryptoContext.saltKey">
            Derived session salting key 
        </member>
        <member name="F:SIPSorcery.Net.SrtcpCryptoContext.policy">
            Encryption / Authentication policy for this session 
        </member>
        <member name="F:SIPSorcery.Net.SrtcpCryptoContext.mac">
            The HMAC object we used to do packet authentication
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.#ctor(System.Int64)">
            Construct an empty SRTPCryptoContext using ssrc.
            The other parameters are set to default null value.
            
            @param ssrc SSRC of this SRTPCryptoContext
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.#ctor(System.Int64,System.Byte[],System.Byte[],SIPSorcery.Net.SrtpPolicy)">
            Construct a normal SRTPCryptoContext based on the given parameters.
            
            @param ssrc
                       the RTP SSRC that this SRTP cryptographic context protects.
            @param masterKey
                       byte array holding the master key for this SRTP cryptographic
                       context. Refer to chapter 3.2.1 of the RFC about the role of
                       the master key.
            @param masterSalt
                       byte array holding the master salt for this SRTP cryptographic
                       context. It is used to computer the initialization vector that
                       in turn is input to compute the session key, session
                       authentication key and the session salt.
            @param policy
                       SRTP policy for this SRTP cryptographic context, defined the
                       encryption algorithm, the authentication algorithm, etc
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.Close">
            Close the crypto context.
            
            The close functions deletes key data and performs a cleanup of the 
            crypto context.
            
            Clean up key data, maybe this is the second time. However, sometimes
            we cannot know if the CryptoContext was used and the application called
            deriveSrtpKeys(...) that would have cleaned the key data.
            
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.GetAuthTagLength">
            Get the authentication tag length of this SRTP cryptographic context
            
            @return the authentication tag length of this SRTP cryptographic context
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.GetMKILength">
            Get the MKI length of this SRTP cryptographic context
            
            @return the MKI length of this SRTP cryptographic context
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.GetSSRC">
             Get the SSRC of this SRTP cryptographic context
            
             @return the SSRC of this SRTP cryptographic context
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.TransformPacket(SIPSorcery.Net.RawPacket)">
            Transform a RTP packet into a SRTP packet. 
            This method is called when a normal RTP packet ready to be sent.
            
            Operations done by the transformation may include: encryption, using
            either Counter Mode encryption, or F8 Mode encryption, adding
            authentication tag, currently HMC SHA1 method.
            
            Both encryption and authentication functionality can be turned off
            as long as the SRTPPolicy used in this SRTPCryptoContext is requires no
            encryption and no authentication. Then the packet will be sent out
            untouched. However this is not encouraged. If no SRTP feature is enabled,
            then we shall not use SRTP TransformConnector. We should use the original
            method (RTPManager managed transportation) instead.  
            
            @param pkt the RTP packet that is going to be sent out
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.ReverseTransformPacket(SIPSorcery.Net.RawPacket)">
            Transform a SRTCP packet into a RTCP packet.
            This method is called when a SRTCP packet was received.
            
            Operations done by the this operation include:
            Authentication check, Packet replay check and decryption.
            
            Both encryption and authentication functionality can be turned off
            as long as the SRTPPolicy used in this SRTPCryptoContext requires no
            encryption and no authentication. Then the packet will be sent out
            untouched. However this is not encouraged. If no SRTCP feature is enabled,
            then we shall not use SRTP TransformConnector. We should use the original
            method (RTPManager managed transportation) instead.  
            
            @param pkt the received RTCP packet 
            @return true if the packet can be accepted
                    false if authentication or replay check failed 
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.ProcessPacketAESCM(SIPSorcery.Net.RawPacket,System.Int32)">
            Perform Counter Mode AES encryption / decryption 
            @param pkt the RTP packet to be encrypted / decrypted
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.ProcessPacketAESF8(SIPSorcery.Net.RawPacket,System.Int32)">
             Perform F8 Mode AES encryption / decryption
            
             @param pkt the RTP packet to be encrypted / decrypted
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.AuthenticatePacket(SIPSorcery.Net.RawPacket,System.Int32)">
             Authenticate a packet.
             
             Calculated authentication tag is stored in tagStore area.
            
             @param pkt the RTP packet to be authenticated
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.CheckReplay(System.Int32)">
             Checks if a packet is a replayed on based on its sequence number.
             
             This method supports a 64 packet history relative to the given
             sequence number.
            
             Sequence Number is guaranteed to be real (not faked) through 
             authentication.
             
             @param index index number of the SRTCP packet
             @return true if this sequence number indicates the packet is not a
             replayed one, false if not
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.ComputeIv(System.Byte)">
            Compute the initialization vector, used later by encryption algorithms,
            based on the label.
            
            @param label label specified for each type of iv 
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.DeriveSrtcpKeys">
            Derives the srtcp session keys from the master key.
            
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.Update(System.Int32)">
            Update the SRTP packet index.
            
            This method is called after all checks were successful. 
            
            @param index index number of the accepted packet
        </member>
        <member name="M:SIPSorcery.Net.SrtcpCryptoContext.DeriveContext(System.Int64)">
            Derive a new SRTPCryptoContext for use with a new SSRC
            
            This method returns a new SRTPCryptoContext initialized with the data of
            this SRTPCryptoContext. Replacing the SSRC, Roll-over-Counter, and the
            key derivation rate the application cab use this SRTPCryptoContext to
            encrypt / decrypt a new stream (Synchronization source) inside one RTP
            session.
            
            Before the application can use this SRTPCryptoContext it must call the
            deriveSrtpKeys method.
            
            @param ssrc
                       The SSRC for this context
            @return a new SRTPCryptoContext with all relevant data set.
        </member>
        <member name="T:SIPSorcery.Net.SrtcpTransformer">
             <summary>
             SRTCPTransformer implements PacketTransformer.
             It encapsulate the encryption / decryption logic for SRTCP packets
            
             @author Bing SU (nova.su @gmail.com)
             @author Werner Dittmann (Werner.Dittmann@t-online.de)
             </summary>
        </member>
        <member name="F:SIPSorcery.Net.SrtcpTransformer.contexts">
            All the known SSRC's corresponding SRTCPCryptoContexts 
        </member>
        <member name="M:SIPSorcery.Net.SrtcpTransformer.Transform(System.Byte[])">
            <summary>
            Encrypts a SRTCP packet
            </summary>
            <param name="pkt">plain SRTCP packet to be encrypted.</param>
            <returns>encrypted SRTCP packet.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SrtcpTransformer.Close">
            <summary>
            Close the transformer and underlying transform engine.
            The close functions closes all stored crypto contexts. This deletes key data
            and forces a cleanup of the crypto contexts.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SrtpCipherCTR">
             SRTPCipherCTR implements SRTP Counter Mode AES Encryption (AES-CM).
             Counter Mode AES Encryption algorithm is defined in RFC3711, section 4.1.1.
             
             Other than Null Cipher, RFC3711 defined two two encryption algorithms:
             Counter Mode AES Encryption and F8 Mode AES encryption. Both encryption
             algorithms are capable to encrypt / decrypt arbitrary length data, and the
             size of packet data is not required to be a multiple of the AES block 
             size (128bit). So, no padding is needed.
             
             Please note: these two encryption algorithms are specially defined by SRTP.
             They are not common AES encryption modes, so you will not be able to find a 
             replacement implementation in common cryptographic libraries. 
            
             As defined by RFC3711: Counter Mode Encryption is mandatory..
            
                                    mandatory to impl     optional      default
             -------------------------------------------------------------------------
               encryption           AES-CM, NULL          AES-f8        AES-CM
               message integrity    HMAC-SHA1                -          HMAC-SHA1
               key derivation       (PRF) AES-CM             -          AES-CM 
            
             We use AESCipher to handle basic AES encryption / decryption.
             
             @author Werner Dittmann (Werner.Dittmann@t-online.de)
             @author Bing SU (nova.su@gmail.com)
        </member>
        <member name="M:SIPSorcery.Net.SrtpCipherCTR.GetCipherStream(Org.BouncyCastle.Crypto.IBlockCipher,System.Byte[],System.Int32,System.Byte[])">
            Computes the cipher stream for AES CM mode. See section 4.1.1 in RFC3711
            for detailed description.
            
            @param out
                       byte array holding the output cipher stream
            @param length
                       length of the cipher stream to produce, in bytes
            @param iv
                       initialization vector used to generate this cipher stream
        </member>
        <member name="F:SIPSorcery.Net.SrtpCipherF8.BLKLEN">
            AES block size, just a short name.
        </member>
        <member name="T:SIPSorcery.Net.SrtpCipherF8.F8Context">
            F8 mode encryption context, see RFC3711 section 4.1.2 for detailed
            description.
        </member>
        <member name="M:SIPSorcery.Net.SrtpCipherF8.ProcessBlock(Org.BouncyCastle.Crypto.IBlockCipher,SIPSorcery.Net.SrtpCipherF8.F8Context,System.IO.MemoryStream,System.Int32,System.IO.MemoryStream,System.Int32,System.Int32)">
            Encrypt / Decrypt a block using F8 Mode AES algorithm, read len bytes
            data from in at inOff and write the output into out at outOff
            
            @param f8ctx
                       F8 encryption context
            @param in
                       byte array holding the data to be processed
            @param inOff
                       start offset of the data to be processed inside in array
            @param out
                       byte array that will hold the processed data
            @param outOff
                       start offset of output data in out
            @param len
                       length of the input data
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.REPLAY_WINDOW_SIZE">
            The replay check windows size
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.ssrcCtx">
            RTP SSRC of this cryptographic context
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.mki">
            Master key identifier
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.roc">
            Roll-Over-Counter, see RFC3711 section 3.2.1 for detailed description
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.guessedROC">
            Roll-Over-Counter guessed from packet
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.seqNum">
            RTP sequence number of the packet current processing
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.seqNumSet">
            Whether we have the sequence number of current packet
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.keyDerivationRate">
            Key Derivation Rate, used to derive session keys from master keys
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.replayWindow">
            Bit mask for replay check
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.masterKey">
            Master encryption key
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.masterSalt">
            Master salting key
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.encKey">
            Derived session encryption key
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.authKey">
            Derived session authentication key
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.saltKey">
            Derived session salting key
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.policy">
            Encryption / Authentication policy for this session
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.mac">
            The HMAC object we used to do packet authentication
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.cipher">
            The symmetric cipher engines we need here
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.cipherF8">
            Used inside F8 mode only
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.cipherCtr">
            implements the counter cipher mode for RTP according to RFC 3711
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.tagStore">
            Temp store.
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.ivStore">
            Temp store.
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.rbStore">
            Temp store.
        </member>
        <member name="F:SIPSorcery.Net.SrtpCryptoContext.tempStore">
            this is a working store, used by some methods to avoid new operations the
            methods must use this only to store results for immediate processing
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.#ctor(System.Int64)">
            Construct an empty SRTPCryptoContext using ssrc. The other parameters are
            set to default null value.
            
            @param ssrcIn
                       SSRC of this SRTPCryptoContext
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.#ctor(System.Int64,System.Int32,System.Int64,System.Byte[],System.Byte[],SIPSorcery.Net.SrtpPolicy)">
            Construct a normal SRTPCryptoContext based on the given parameters.
            
            @param ssrcIn
                       the RTP SSRC that this SRTP cryptographic context protects.
            @param rocIn
                       the initial Roll-Over-Counter according to RFC 3711. These are
                       the upper 32 bit of the overall 48 bit SRTP packet index.
                       Refer to chapter 3.2.1 of the RFC.
            @param kdr
                       the key derivation rate defines when to recompute the SRTP
                       session keys. Refer to chapter 4.3.1 in the RFC.
            @param masterK
                       byte array holding the master key for this SRTP cryptographic
                       context. Refer to chapter 3.2.1 of the RFC about the role of
                       the master key.
            @param masterS
                       byte array holding the master salt for this SRTP cryptographic
                       context. It is used to computer the initialization vector that
                       in turn is input to compute the session key, session
                       authentication key and the session salt.
            @param policyIn
                       SRTP policy for this SRTP cryptographic context, defined the
                       encryption algorithm, the authentication algorithm, etc
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.Close">
            Close the crypto context.
            
            The close functions deletes key data and performs a cleanup of the crypto
            context.
            
            Clean up key data, maybe this is the second time however, sometimes we
            cannot know if the CryptoCOntext was used and the application called
            deriveSrtpKeys(...) .
            
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.GetAuthTagLength">
            Get the authentication tag length of this SRTP cryptographic context
            
            @return the authentication tag length of this SRTP cryptographic context
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.GetMKILength">
            Get the MKI length of this SRTP cryptographic context
            
            @return the MKI length of this SRTP cryptographic context
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.GetSSRC">
            Get the SSRC of this SRTP cryptographic context
            
            @return the SSRC of this SRTP cryptographic context
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.GetROC">
            Get the Roll-Over-Counter of this SRTP cryptographic context
            
            @return the Roll-Over-Counter of this SRTP cryptographic context
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.SetROC(System.Int32)">
            Set the Roll-Over-Counter of this SRTP cryptographic context
            
            @param rocIn
                       the Roll-Over-Counter of this SRTP cryptographic context
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.TransformPacket(SIPSorcery.Net.RawPacket)">
            Transform a RTP packet into a SRTP packet. This method is called when a
            normal RTP packet ready to be sent.
            
            Operations done by the transformation may include: encryption, using
            either Counter Mode encryption, or F8 Mode encryption, adding
            authentication tag, currently HMC SHA1 method.
            
            Both encryption and authentication functionality can be turned off as
            long as the SRTPPolicy used in this SRTPCryptoContext is requires no
            encryption and no authentication. Then the packet will be sent out
            untouched. However this is not encouraged. If no SRTP feature is enabled,
            then we shall not use SRTP TransformConnector. We should use the original
            method (RTPManager managed transportation) instead.
            
            @param pkt
                       the RTP packet that is going to be sent out
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.ReverseTransformPacket(SIPSorcery.Net.RawPacket)">
            Transform a SRTP packet into a RTP packet. This method is called when a
            SRTP packet is received.
            
            Operations done by the this operation include: Authentication check,
            Packet replay check and Decryption.
            
            Both encryption and authentication functionality can be turned off as
            long as the SRTPPolicy used in this SRTPCryptoContext requires no
            encryption and no authentication. Then the packet will be sent out
            untouched. However this is not encouraged. If no SRTP feature is enabled,
            then we shall not use SRTP TransformConnector. We should use the original
            method (RTPManager managed transportation) instead.
            
            @param pkt
                       the RTP packet that is just received
            @return true if the packet can be accepted false if the packet failed
                    authentication or failed replay check
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.ProcessPacketAESCM(SIPSorcery.Net.RawPacket)">
            Perform Counter Mode AES encryption / decryption
            
            @param pkt
                       the RTP packet to be encrypted / decrypted
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.ProcessPacketAESF8(SIPSorcery.Net.RawPacket)">
            Perform F8 Mode AES encryption / decryption
            
            @param pkt
                       the RTP packet to be encrypted / decrypted
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.AuthenticatePacketHMCSHA1(SIPSorcery.Net.RawPacket,System.Int32)">
            Authenticate a packet. Calculated authentication tag is returned.
            
            @param pkt
                       the RTP packet to be authenticated
            @param rocIn
                       Roll-Over-Counter
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.CheckReplay(System.Int32,System.Int64)">
            Checks if a packet is a replayed on based on its sequence number.
            
            This method supports a 64 packet history relative the the given sequence
            number.
            
            Sequence Number is guaranteed to be real (not faked) through
            authentication.
            
            @param seqNo
                       sequence number of the packet
            @param guessedIndex
                       guessed roc
            @return true if this sequence number indicates the packet is not a
                    replayed one, false if not
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.ComputeIv(System.Int64,System.Int64)">
            Compute the initialization vector, used later by encryption algorithms,
            based on the lable, the packet index, key derivation rate and master salt
            key.
            
            @param label
                       label specified for each type of iv
            @param index
                       48bit RTP packet index
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.DeriveSrtpKeys(System.Int64)">
            Derives the srtp session keys from the master key
            
            @param index
                       the 48 bit SRTP packet index
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.GuessIndex(System.Int32)">
            Compute (guess) the new SRTP index based on the sequence number of a
            received RTP packet.
            
            @param seqNo
                       sequence number of the received RTP packet
            @return the new SRTP packet index
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.Update(System.Int32,System.Int64)">
            Update the SRTP packet index.
            
            This method is called after all checks were successful. See section 3.3.1
            in RFC3711 for detailed description.
            
            @param seqNo
                       sequence number of the accepted packet
            @param guessedIndex
                       guessed roc
        </member>
        <member name="M:SIPSorcery.Net.SrtpCryptoContext.deriveContext(System.Int64,System.Int32,System.Int64)">
            Derive a new SRTPCryptoContext for use with a new SSRC
            
            This method returns a new SRTPCryptoContext initialized with the data of
            this SRTPCryptoContext. Replacing the SSRC, Roll-over-Counter, and the
            key derivation rate the application cab use this SRTPCryptoContext to
            encrypt / decrypt a new stream (Synchronization source) inside one RTP
            session.
            
            Before the application can use this SRTPCryptoContext it must call the
            deriveSrtpKeys method.
            
            @param ssrc
                       The SSRC for this context
            @param roc
                       The Roll-Over-Counter for this context
            @param deriveRate
                       The key derivation rate for this context
            @return a new SRTPCryptoContext with all relevant data set.
        </member>
        <member name="F:SIPSorcery.Net.SrtpTransformEngine.defaultContext">
            The default SRTPCryptoContext, which will be used to derivate other
            contexts.
        </member>
        <member name="F:SIPSorcery.Net.SrtpTransformEngine.defaultContextControl">
            The default SRTPCryptoContext, which will be used to derive other
            contexts.
        </member>
        <member name="M:SIPSorcery.Net.SrtpTransformEngine.#ctor(System.Byte[],System.Byte[],SIPSorcery.Net.SrtpPolicy,SIPSorcery.Net.SrtpPolicy)">
            Construct a SRTPTransformEngine based on given master encryption key,
            master salt key and SRTP/SRTCP policy.
            
            @param masterKey
                       the master encryption key
            @param masterSalt
                       the master salt key
            @param srtpPolicy
                       SRTP policy
            @param srtcpPolicy
                       SRTCP policy
        </member>
        <member name="M:SIPSorcery.Net.SrtpTransformEngine.Close">
            Close the transformer engine.
            
            The close functions closes all stored default crypto contexts. This
            deletes key data and forces a cleanup of the crypto contexts.
        </member>
        <member name="M:SIPSorcery.Net.SrtpTransformEngine.GetRTCPTransformer">
            Gets the <tt>PacketTransformer</tt> for RTCP packets.
            
            @return the <tt>PacketTransformer</tt> for RTCP packets
        </member>
        <member name="M:SIPSorcery.Net.SrtpTransformEngine.GetDefaultContext">
            Get the default SRTPCryptoContext
            
            @return the default SRTPCryptoContext
        </member>
        <member name="M:SIPSorcery.Net.SrtpTransformEngine.GetDefaultContextControl">
            Get the default SRTPCryptoContext
            
            @return the default SRTPCryptoContext
        </member>
        <member name="F:SIPSorcery.Net.SrtpTransformer.contexts">
            All the known SSRC's corresponding SRTPCryptoContexts
        </member>
        <member name="M:SIPSorcery.Net.SrtpTransformer.ReverseTransform(System.Byte[])">
            Reverse-transforms a specific packet (i.e. transforms a transformed
            packet back).
            
            @param pkt
                       the transformed packet to be restored
            @return the restored packet
        </member>
        <member name="M:SIPSorcery.Net.SrtpTransformer.Close">
            Close the transformer and underlying transform engine.
            
            The close functions closes all stored crypto contexts. This deletes key
            data and forces a cleanup of the crypto contexts.
        </member>
        <member name="M:SIPSorcery.Net.HepChunk.InitBuffer(SIPSorcery.Net.ChunkTypeEnum,System.UInt16)">
            <summary>
            Creates the initial buffer for the HEP packet and sets the vendor, chunk type ID and length fields.
            Note: Vendor ID could change and make endianess relevant.
            </summary>
            <param name="chunkType">The chunk type to set in the serialised chunk.</param>
            <param name="length">The value to set in the length field of the serialised chunk.</param>
            <returns>A buffer that contains the serialised chunk EXCEPT for the payload.</returns>
        </member>
        <member name="M:SIPSorcery.Net.HepChunk.GetBytes(SIPSorcery.Net.ChunkTypeEnum,System.Byte)">
            <summary>
            Gets the chunk bytes for a single byte chunk type.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.HepChunk.GetBytes(SIPSorcery.Net.ChunkTypeEnum,System.UInt16)">
            <summary>
            Gets the chunk bytes for an unsigned short chunk type.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.HepChunk.GetBytes(SIPSorcery.Net.ChunkTypeEnum,System.UInt32)">
            <summary>
            Gets the chunk bytes for an unsigned int chunk type.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.HepChunk.GetBytes(SIPSorcery.Net.ChunkTypeEnum,System.Byte[])">
            <summary>
            Gets the chunk bytes for an arbitrary payload.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.HepChunk.GetBytes(SIPSorcery.Net.ChunkTypeEnum,System.Net.IPAddress)">
            <summary>
            Gets the chunk bytes for IP address type chunks.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.HepPacket">
            <summary>
            This class can produce a serialised Homer Encapsulation Protocol (HEP) packet. The implementation
            has only been done to accommodate packet types required by this library (at the time of writing 
            the sole type is SIP).
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.HepPacket.GetProtocolNumber(SIPSorcery.SIP.SIPProtocolsEnum)">
            <summary>
            All the SIP protocols except UDP use TCP as the underlying transport protocol.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.HepPacket.GetBytes(SIPSorcery.SIP.SIPEndPoint,SIPSorcery.SIP.SIPEndPoint,System.DateTime,System.UInt32,System.String,System.String)">
            <summary>
            Gets a serialised HEP packet for a SIP request or response that can be sent to a HOMER server.
            </summary>
            <param name="srcEndPoint">The end point that sent the SIP request or response.</param>
            <param name="dstEndPoint">The end point that the SIP request or response was sent to.</param>
            <param name="timestamp">The timestamp the request or response was generated.</param>
            <param name="agentID">An agent ID that is used by the HOMER server to identify the agent generating 
            HEP packets. Ideally should be unique amongst all agents logging to the same HOMER server.</param>
            <param name="password">The password required by the HOMER server. Can be set to null if no password
            is required. Default value for HOMER5 and 7 is 'myHep".</param>
            <param name="payload">The SIP request or response.</param>
            <returns>An array of bytes representing the serialised HEP packet and that is ready for transmission
            to a HOMER server.</returns>
        </member>
        <member name="T:SIPSorcery.Net.ChecklistEntryState">
            <summary>
            List of state conditions for a check list entry as the connectivity checks are 
            carried out.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistEntryState.Waiting">
            <summary>
            A check has not been sent for this pair, but the pair is not Frozen.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistEntryState.InProgress">
            <summary>
            A check has been sent for this pair, but the transaction is in progress.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistEntryState.Succeeded">
            <summary>
            A check has been sent for this pair, and it produced a successful result.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistEntryState.Failed">
            <summary>
            A check has been sent for this pair, and it failed (a response to the 
            check was never received, or a failure response was received).
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistEntryState.Frozen">
            <summary>
            A check for this pair has not been sent, and it cannot be sent until the 
            pair is unfrozen and moved into the Waiting state.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.ChecklistState">
            <summary>
            Represents the state of the ICE checks for a checklist.
            </summary>
            <remarks>
            As specified in https://tools.ietf.org/html/rfc8445#section-6.1.2.1.
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistState.Running">
            <summary>
            The checklist is neither Completed nor Failed yet.
            Checklists are initially set to the Running state.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistState.Completed">
            <summary>
            The checklist contains a nominated pair for each
            component of the data stream.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistState.Failed">
            <summary>
            The checklist does not have a valid pair for each component
            of the data stream, and all of the candidate pairs in the
            checklist are in either the Failed or the Succeeded state.  In
            other words, at least one component of the checklist has candidate
            pairs that are all in the Failed state, which means the component
            has failed, which means the checklist has failed.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.ChecklistEntry">
            <summary>
            A check list entry represents an ICE candidate pair (local candidate + remote candidate)
            that is being checked for connectivity. If the overall ICE session does succeed it will
            be due to one of these checklist entries successfully completing the ICE checks.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistEntry.State">
            <summary>
            The current state of this checklist entry. Indicates whether a STUN check has been
            sent, responded to, timed out etc.
            </summary>
            <remarks>
            See https://tools.ietf.org/html/rfc8445#section-6.1.2.6 for the state
            transition diagram for a check list entry.
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistEntry.Default">
            <summary>
            The candidate pairs whose local and remote candidates are both the
            default candidates for a particular component is called the "default
            candidate pair" for that component.  This is the pair that would be
            used to transmit data if both agents had not been ICE aware.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistEntry.Valid">
            <summary>
            Gets set to true when the connectivity checks for the candidate pair are
            successful. Valid entries are eligible to be set as nominated.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.ChecklistEntry.Nominated">
            <summary>
            Gets set to true if this entry is selected as the single nominated entry to be
            used for the session communications. Setting a check list entry as nominated
            indicates the ICE checks have been successful and the application can begin
            normal communications.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.ChecklistEntry.Priority">
            <summary>
            The priority for the candidate pair:
             - Let G be the priority for the candidate provided by the controlling agent.
             - Let D be the priority for the candidate provided by the controlled agent.
            Pair Priority = 2^32*MIN(G,D) + 2*MAX(G,D) + (G>D?1:0)
            </summary>
            <remarks>
            See https://tools.ietf.org/html/rfc8445#section-6.1.2.3.
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistEntry.FirstCheckSentAt">
            <summary>
            Timestamp the first connectivity check (STUN binding request) was sent at.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistEntry.LastCheckSentAt">
            <summary>
            Timestamp the last connectivity check (STUN binding request) was sent at.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ChecklistEntry.ChecksSent">
            <summary>
            The number of checks that have been sent without a response.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.ChecklistEntry.RequestTransactionID">
            <summary>
            The transaction ID that was set in the last STUN request connectivity check.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.ChecklistEntry.TurnPermissionsRequestSent">
            <summary>
            Before a remote peer will be able to use the relay it's IP address needs
            to be authorised by sending a Create Permissions request to the TURN server.
            This field records the number of Create Permissions requests that have been
            sent for this entry.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.ChecklistEntry.TurnPermissionsResponseAt">
            <summary>
            This field records the time a Create Permissions response was received.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.ChecklistEntry.LastConnectedResponseAt">
            <summary>
            If a candidate has been nominated this field records the time the last
            STUN binding response was received from the remote peer.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.ChecklistEntry.LastBindingRequestReceivedAt">
            <summary>
            Timestamp for the most recent binding request received from the remote peer.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.ChecklistEntry.#ctor(SIPSorcery.Net.RTCIceCandidate,SIPSorcery.Net.RTCIceCandidate,System.Boolean)">
            <summary>
            Creates a new entry for the ICE session checklist.
            </summary>
            <param name="localCandidate">The local candidate for the checklist pair.</param>
            <param name="remoteCandidate">The remote candidate for the checklist pair.</param>
            <param name="isLocalController">True if we are acting as the controlling agent in the ICE session.</param>
        </member>
        <member name="M:SIPSorcery.Net.ChecklistEntry.CompareTo(System.Object)">
            <summary>
            Compare method to allow the checklist to be sorted in priority order.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.IceServer">
            <summary>
            If ICE servers (STUN or TURN) are being used with the session this class is used to track
            the connection state for each server that gets used.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.IceServer.ICE_SERVER_TXID_PREFIX">
            <summary>
            A magic cookie to use as the prefix for STUN requests generated for ICE servers.
            Allows quick matching of responses for ICE servers compared to responses for
            ICE candidate connectivity checks;
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.IceServer.ICE_SERVER_TXID_PREFIX_LENGTH">
            <summary>
            The length of the magic cookie of server ID that are used as the prefix for
            each ICE server transaction ID.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.IceServer.MINIMUM_ICE_SERVER_ID">
            <summary>
            The minimum ICE server ID that can be set.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.IceServer.MAXIMUM_ICE_SERVER_ID">
            <summary>
            The maximum ICE server ID that can be set. Means the number of ICE servers per
            session is limited to 10. Checking 10 ICE servers when attempting to establish
            a peer connection seems very, very high. It would generally be expected that only
            1 or 2 ICE servers would ever be used.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.IceServer.MAX_REQUESTS">
            <summary>
            The maximum number of requests to send to an ICE server without getting 
            a response.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.IceServer.MAX_ERRORS">
            <summary>
            The maximum number of error responses before failing the ICE server checks.
            A success response will reset the count.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.IceServer.DNS_LOOKUP_TIMEOUT_SECONDS">
            <summary>
            Time to wait for a DNS lookup of an ICE server to complete.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.IceServer.STUN_BINDING_REQUEST_REFRESH_SECONDS">
            <summary>
            The period at which to refresh a successful STUN binding. If the ICE
            server did not get used as the nominated candidate the ICE server 
            checks timer will be stopped.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.IceServer.STUN_UNAUTHORISED_ERROR_CODE">
            <summary>
            The STUN error code response indicating an authenticated request is required.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.IceServer.STUN_STALE_NONCE_ERROR_CODE">
            <summary>
            The STUN error code response indicating a stale nonce
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.IceServer._id">
            <summary>
            An incrementing number that needs to be unique for each server in the session.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IceServer.ServerEndPoint">
            <summary>
            The end point for this STUN or TURN server. Will be set asynchronously once
            any required DNS lookup completes.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IceServer.TransactionID">
            <summary>
            The transaction ID to use in STUN requests. It is used to match responses
            with connection checks for this ICE serve entry.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IceServer.DnsLookupSentAt">
            <summary>
            The timestamp that the DNS lookup for this ICE server was sent at.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IceServer.OutstandingRequestsSent">
            <summary>
            The number of requests that have been sent to the server without
            a response.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IceServer.LastRequestSentAt">
            <summary>
            The timestamp the most recent binding request was sent at.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IceServer.LastResponseReceivedAt">
            <summary>
            The timestamp of the most recent response received from the ICE server.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IceServer.TurnTimeToExpiry">
            <summary>
            This field records the time when allocation expires
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IceServer.Error">
            <summary>
            Records the failure message if there was an error configuring or contacting
            the STUN or TURN server.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IceServer.ServerReflexiveEndPoint">
            <summary>
            If the initial Binding (for STUN) or Allocate (for TURN) connection check is successful 
            this will hold the resultant server reflexive transport address.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IceServer.RelayEndPoint">
            <summary>
            If the ICE server being checked is a TURN one and the Allocate request is successful this
            will hold the relay transport address.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IceServer.Nonce">
            <summary>
            If requests to the server need to be authenticated this is the nonce to set. 
            Normally the nonce will come from the server in a 401 Unauthorized response.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IceServer.Realm">
            <summary>
            If requests to the server need to be authenticated this is the realm to set. 
            The realm may be known in advance or can come from the server in a 401 
            Unauthorized response.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.IceServer.ErrorResponseCount">
            <summary>
            Count of the number of error responses received without a success response.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.IceServer.#ctor(SIPSorcery.Net.STUNUri,System.Int32,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="uri">The STUN or TURN server URI the connection is being attempted to.</param>
            <param name="id">Needs to be set uniquely for each ICE server used in this session. Gets added to the
            transaction ID to facilitate quick matching of STUN requests and responses. Needs to be between
            0 and 9.</param>
            <param name="username">Optional. If authentication is required the username to use.</param>
            <param name="password">Optional. If authentication is required the password to use.</param>
        </member>
        <member name="M:SIPSorcery.Net.IceServer.GetCandidate(SIPSorcery.Net.RTCIceCandidateInit,SIPSorcery.Net.RTCIceCandidateType)">
            <summary>
            Gets an ICE candidate for this ICE server once the required server responses have been received.
            Note the related address and port are deliberately not set to avoid leaking information about
            internal network configuration.
            </summary>
            <param name="init">The initialisation parameters for the ICE candidate (mainly local username).</param>
            <param name="type">The type of ICE candidate to get, must be srflx or relay.</param>
            <returns>An ICE candidate that can be sent to the remote peer.</returns>
        </member>
        <member name="M:SIPSorcery.Net.IceServer.GenerateNewTransactionID">
            <summary>
            A new transaction ID is needed for each request.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.IceServer.IsTransactionIDMatch(System.String)">
            <summary>
            Checks whether a STUN response transaction ID belongs to a request that was sent for
            this ICE server entry.
            </summary>
            <param name="responseTxID">The transaction ID from the STUN response.</param>
            <returns>True if it dos match. False if not.</returns>
        </member>
        <member name="M:SIPSorcery.Net.IceServer.GotStunResponse(SIPSorcery.Net.STUNMessage,System.Net.IPEndPoint)">
            <summary>
            Handler for a STUN response received in response to an ICE server connectivity check.
            Note that no STUN requests are expected to be received from an ICE server during the initial
            connection to an ICE server. Requests will only arrive if a TURN relay is used and data
            indications arrive but this will be at a later stage.
            </summary>
            <param name="stunResponse">The STUN response received.</param>
            <param name="remoteEndPoint">The remote end point the STUN response was received from.</param>
            <returns>True if the STUN response resulted in new ICE candidates being available (which
            will be either a "server reflexive" or "relay" candidate.</returns>
        </member>
        <member name="M:SIPSorcery.Net.IceServer.SetAuthenticationFields(SIPSorcery.Net.STUNMessage)">
            <summary>
            Extracts the fields required for authentication from a STUN error response.
            </summary>
            <param name="stunResponse">The STUN authentication required error response.</param>
        </member>
        <member name="T:SIPSorcery.Net.IceImplementationEnum">
            <summary>
            The ICE set up roles that a peer can be in. The role determines how the DTLS
            handshake is performed, i.e. which peer is the client and which is the server.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.IceRolesEnum">
            <summary>
            The ICE set up roles that a peer can be in. The role determines how the DTLS
            handshake is performed, i.e. which peer is the client and which is the server.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTCIceGatheringState">
            <summary>
            The gathering states an ICE session transitions through.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#dom-rtcicegatheringstate.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.RTCIceConnectionState">
            <summary>
            The states an ICE session transitions through.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#rtciceconnectionstate-enum.
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.RTCIceConnectionState.closed">
            <summary>
            The connection has been closed. All checks stop.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCIceConnectionState.failed">
            <summary>
            The connection attempt has failed or connection checks on an established
            connection have failed.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCIceConnectionState.disconnected">
            <summary>
            Connection attempts on an established connection have failed. Attempts
            will continue until the state transitions to failure.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCIceConnectionState.new">
            <summary>
            The initial state.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCIceConnectionState.checking">
            <summary>
            Checks are being carried out in an attempt to establish a connection.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCIceConnectionState.connected">
            <summary>
            The checks have been successful and the connection has been established.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTCIceCandidateInit">
            <summary>
            Represents an ICE candidate and associated properties that link it to the SDP.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#dom-rtcicecandidateinit.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.RTCIceComponent">
            <summary>
            
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#dom-rtcicecomponent.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.RTCIceProtocol">
            <summary>
            The transport protocol types for an ICE candidate.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#rtciceprotocol-enum.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.RTCIceTcpCandidateType">
            <summary>
            The RTCIceTcpCandidateType represents the type of the ICE TCP candidate.
            </summary>
            <remarks>
            As defined in https://www.w3.org/TR/webrtc/#rtcicetcpcandidatetype-enum.
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.RTCIceTcpCandidateType.active">
            <summary>
            An active TCP candidate is one for which the transport will attempt to 
            open an outbound connection but will not receive incoming connection requests.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCIceTcpCandidateType.passive">
            <summary>
            A passive TCP candidate is one for which the transport will receive incoming 
            connection attempts but not attempt a connection.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCIceTcpCandidateType.so">
            <summary>
            An so candidate is one for which the transport will attempt to open a connection 
            simultaneously with its peer.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTCIceCandidateType">
            <summary>
            The RTCIceCandidateType represents the type of the ICE candidate.
            </summary>
            <remarks>
            As defined in https://www.w3.org/TR/webrtc/#rtcicecandidatetype-enum.
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.RTCIceCandidateType.host">
            <summary>
            A host candidate, locally gathered.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCIceCandidateType.prflx">
            <summary>
            A peer reflexive candidate, obtained as a result of a connectivity check 
            (e.g. STUN request from a previously unknown address).
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCIceCandidateType.srflx">
            <summary>
            A server reflexive candidate, obtained from STUN and/or TURN (non-relay TURN).
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCIceCandidateType.relay">
            <summary>
            A relay candidate, TURN (relay).
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.IRTCIceCandidate">
            <remarks>
            As defined in: https://www.w3.org/TR/webrtc/#rtcicecandidate-interface
            
            Rhe 'priority` field was adjusted from ulong to uint due to an issue that 
            occurred with the STUN PRIORITY attribute being rejected for not being 4 bytes.
            The ICE and WebRTC specifications are contradictory so went with the same as
            libwebrtc which is 4 bytes.
            See https://github.com/sipsorcery/sipsorcery/issues/350.
            </remarks>
        </member>
        <member name="P:SIPSorcery.Net.RTCIceCandidate.IceServer">
            <summary>
            The ICE server (STUN or TURN) the candidate was generated from.
            Will be null for non-ICE server candidates.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCIceCandidate.foundation">
            <summary>
            Composed of 1 to 32 chars. It is an
            identifier that is equivalent for two candidates that are of the
            same type, share the same base, and come from the same STUN
            server.
            </summary>
            <remarks>
            See https://tools.ietf.org/html/rfc8445#section-5.1.1.3.
            </remarks>
        </member>
        <member name="P:SIPSorcery.Net.RTCIceCandidate.component">
            <summary>
             Is a positive integer between 1 and 256 (inclusive)
            that identifies the specific component of the data stream for
            which this is a candidate.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCIceCandidate.priority">
            <summary>
            A positive integer between 1 and (2**31 - 1) inclusive.
            This priority will be used by ICE to determine the order of the
            connectivity checks and the relative preference for candidates.
            Higher-priority values give more priority over lower values.
            </summary>
            <remarks>
            See specification at https://tools.ietf.org/html/rfc8445#section-5.1.2.
            </remarks>
        </member>
        <member name="P:SIPSorcery.Net.RTCIceCandidate.address">
            <summary>
            The address or hostname for the candidate.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCIceCandidate.protocol">
            <summary>
            The transport protocol for the candidate, supported options are UDP and TCP.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCIceCandidate.port">
            <summary>
            The local port the candidate is listening on.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCIceCandidate.type">
            <summary>
            The type of ICE candidate, host, srflx etc.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCIceCandidate.tcpType">
            <summary>
            For TCP candidates the role they are fulfilling (client, server or both).
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCIceCandidate.DestinationEndPoint">
            <summary>
            This is the end point to use for a remote candidate. The address supplied for an ICE
            candidate could be a hostname or IP address. This field will be set before the candidate
            is used.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCIceCandidate.#ctor(SIPSorcery.Net.RTCIceProtocol,System.Net.IPAddress,System.UInt16,SIPSorcery.Net.RTCIceCandidateType)">
            <summary>
            Convenience constructor for cases when the application wants
            to create an ICE candidate,
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCIceCandidate.ToString">
            <summary>
            Serialises an ICE candidate to a string that's suitable for inclusion in an SDP session
            description payload.
            </summary>
            <remarks>
            The specification regarding how an ICE candidate should be serialised in SDP is at
            https://tools.ietf.org/html/draft-ietf-mmusic-ice-sip-sdp-39#section-5.1.   
            </remarks>
            <returns>A string representing the ICE candidate suitable for inclusion in an SDP session
            description.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCIceCandidate.SetDestinationEndPoint(System.Net.IPEndPoint)">
            <summary>
            Sets the remote end point for a remote candidate.
            </summary>
            <param name="destinationEP">The resolved end point for the candidate.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCIceCandidate.IsEquivalentEndPoint(SIPSorcery.Net.RTCIceProtocol,System.Net.IPEndPoint)">
            <summary>
            Checks the candidate to identify whether it is equivalent to the specified
            protocol and IP end point. Primary use case is to check whether a candidate
            is a match for a remote end point that a message has been received from.
            </summary>
            <param name="epPotocol">The protocol to check equivalence for.</param>
            <param name="ep">The IP end point to check equivalence for.</param>
            <returns>True if the candidate is deemed equivalent or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCIceCandidate.ToShortString">
            <summary>
            Gets a short description for the candidate that's helpful for log messages.
            </summary>
            <returns>A short string describing the key properties of the candidate.</returns>
        </member>
        <member name="T:SIPSorcery.Net.RtpIceChannel">
            <summary>
            An RTP ICE Channel carries out connectivity checks with a remote peer in an
            attempt to determine the best destination end point to communicate with the
            remote party.
            </summary>
            <remarks>
            Local server reflexive candidates don't get added to the checklist since they are just local
            "host" candidates with an extra NAT address mapping. The NAT address mapping is needed for the
            remote ICE peer but locally a server reflexive candidate is always going to be represented by
            a "host" candidate.
            
            Limitations:
             - To reduce complexity only a single checklist is used. This is based on the main 
               webrtc use case where RTP (audio and video) and RTCP are all multiplexed on a 
               single socket pair. Therefore  there only needs to be a single component and single 
               data stream. If an additional use case occurs then multiple checklists could be added.
               
            Developer Notes:
            There are 4 main tasks occurring during the ICE checks:
            - Local candidates: ICE server checks (which can take seconds) are being carried out to
              gather "server reflexive" and "relay" candidates.
            - Remote candidates: the remote peer should be trickling in its candidates which need to
              be validated and if accepted new entries added to the checklist.
            - Checklist connectivity checks: the candidate pairs in the checklist need to have
              connectivity checks sent.
            - Match STUN messages: STUN requests and responses are being received and need to be 
              matched to either an ICE server check or a checklist entry check. After matching 
              action needs to be taken to update the status of the ICE server or checklist entry
              check.
            </remarks>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.IceTcpReceiver.BeginReceiveFrom">
            <summary>
            Starts the receive. This method returns immediately. An event will be fired in the corresponding "End" event to
            return any data received.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.IceTcpReceiver.EndReceiveFrom(System.IAsyncResult)">
            <summary>
            Handler for end of the begin receive call.
            </summary>
            <param name="ar">Contains the results of the receive.</param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.IceTcpReceiver.Close(System.String)">
            <summary>
            Closes the socket and stops any new receives from being initiated.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RtpIceChannel.Ta">
            <summary>
            ICE transaction spacing interval in milliseconds.
            </summary>
            <remarks>
            See https://tools.ietf.org/html/rfc8445#section-14.
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.RtpIceChannel.DISCONNECTED_TIMEOUT_PERIOD">
            <summary>
            The period in seconds after which a connection will be flagged as disconnected.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RtpIceChannel.FAILED_TIMEOUT_PERIOD">
            <summary>
            The period in seconds after which a connection will be flagged as failed.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RtpIceChannel.REFRESH_PERMISSION_PERIOD">
            <summary>
            The period in seconds after which a CreatePermission will be sent.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RtpIceChannel.ALLOCATION_TIME_TO_EXPIRY_VALUE">
            <summary>
            The lifetime value used in refresh request.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RtpIceChannel.IsController">
            <summary>
            True if we are the "controlling" ICE agent (we initiated the communications) or
            false if we are the "controlled" agent.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RtpIceChannel.Candidates">
            <summary>
            The list of host ICE candidates that have been gathered for this peer.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RtpIceChannel._pendingRemoteCandidates">
            <summary>
            A queue of remote ICE candidates that have been added to the session and that
            are waiting to be processed to determine if they will create a new checklist entry.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RtpIceChannel._checklistState">
            <summary>
            The state of the checklist as the ICE checks are carried out.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RtpIceChannel._checklist">
            <summary>
            The checklist of local and remote candidate pairs
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RtpIceChannel.Checklist">
            <summary>
            Creates a copy of the checklist of local and remote candidate pairs
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RtpIceChannel._localChecklistCandidate">
            <summary>
            For local candidates this implementation takes a shortcut to reduce complexity. 
            The RTP socket will always be bound to one of:
             - IPAddress.IPv6Any [::], 
             - IPAddress.Any 0.0.0.0, or,
             - a specific single IP address. 
            As such it's only necessary to create a single checklist entry to cover all local
            Host type candidates.
            Host candidates must still be generated, based on all local IP addresses, and
            will need to be transmitted to the remote peer but they don't need to
            be used when populating the checklist.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RtpIceChannel._relayChecklistCandidate">
            <summary>
            If a TURN server is being used for this session and has received a successful
            response to the allocate request then this field will hold the candidate to
            use in the checklist.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RtpIceChannel.NominatedEntry">
            <summary>
            If the connectivity checks are successful this will hold the entry that was 
            nominated by the connection check process.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RtpIceChannel.RTO">
            <summary>
            Retransmission timer for STUN transactions, measured in milliseconds.
            </summary>
            <remarks>
            As specified in https://tools.ietf.org/html/rfc8445#section-14.
            </remarks>
        </member>
        <member name="E:SIPSorcery.Net.RtpIceChannel.OnStunMessageReceived">
            <summary>
            This event gets fired when a STUN message is received by this channel.
            The event is for diagnostic purposes only.
            Parameters:
             - STUNMessage: The received STUN message.
             - IPEndPoint: The remote end point the STUN message was received from.
             - bool: True if the message was received via a TURN server relay.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RtpIceChannel.OnStunMessageSent">
            <summary>
            This event gets fired when a STUN message is sent by this channel.
            The event is for diagnostic purposes only.
            Parameters:
             - STUNMessage: The STUN message that was sent.
             - IPEndPoint: The remote end point the STUN message was sent to.
             - bool: True if the message was sent via a TURN server relay.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RtpIceChannel.MdnsResolve">
            <summary>
            An optional callback function to resolve remote ICE candidates with MDNS hostnames.
            </summary>
            <remarks>
            The order is <see cref="F:SIPSorcery.Net.RtpIceChannel.MdnsGetAddresses"/>, then <see cref="F:SIPSorcery.Net.RtpIceChannel.MdnsResolve"/>.
            If both are null system <see cref="T:System.Net.Dns">DNS resolver</see> will be used.
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.RtpIceChannel.MdnsGetAddresses">
            <summary>
            An optional callback function to resolve remote ICE candidates with MDNS hostnames.
            </summary>
            <remarks>
            The order is <see cref="F:SIPSorcery.Net.RtpIceChannel.MdnsGetAddresses"/>, then <see cref="F:SIPSorcery.Net.RtpIceChannel.MdnsResolve"/>.
            If both are null system <see cref="T:System.Net.Dns">DNS resolver</see> will be used.
            </remarks>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.#ctor">
            <summary>
            Creates a new instance of an RTP ICE channel to provide RTP channel functions 
            with ICE connectivity checks.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.#ctor(System.Net.IPAddress,SIPSorcery.Net.RTCIceComponent,System.Collections.Generic.List{SIPSorcery.Net.RTCIceServer},SIPSorcery.Net.RTCIceTransportPolicy,System.Boolean,System.Int32,SIPSorcery.Sys.PortRange)">
            <summary>
            Creates a new instance of an RTP ICE channel to provide RTP channel functions 
            with ICE connectivity checks.
            </summary>
            <param name="bindAddress"> Optional. If this is not set then the default is to 
            bind to the IPv6 wildcard address in dual mode to the IPv4 wildcard address if
            IPv6 is not available.</param>
            <param name="component">The component (RTP or RTCP) the channel is being used for. Note
            for cases where RTP and RTCP are multiplexed the component is set to RTP.</param>
            <param name="iceServers">A list of STUN or TURN servers that can be used by this ICE agent.</param>
            <param name="policy">Determines which ICE candidates can be used in this RTP ICE Channel.</param>
            <param name="includeAllInterfaceAddresses">If set to true then IP addresses from ALL local  
            interfaces will be used for host ICE candidates. If left as the default false value host 
            candidates will be restricted to the single interface that the OS routing table matches to
            the destination address or the Internet facing interface if the destination is not known.
            The restrictive behaviour is as per the recommendation at:
            https://tools.ietf.org/html/draft-ietf-rtcweb-ip-handling-12#section-5.2.
            </param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.StartGathering">
            <summary>
            We've been given the green light to start the ICE candidate gathering process.
            This could include contacting external STUN and TURN servers. Events will 
            be fired as each ICE is identified and as the gathering state machine changes
            state.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.SetRemoteCredentials(System.String,System.String)">
            <summary>
            Set the ICE credentials that have been supplied by the remote peer. Once these
            are set the connectivity checks should be able to commence.
            </summary>
            <param name="username">The remote peer's ICE username.</param>
            <param name="password">The remote peer's ICE password.</param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.Close">
            <summary>
            Closes the RTP ICE Channel and stops any further connectivity checks.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.AddRemoteCandidate(SIPSorcery.Net.RTCIceCandidate)">
            <summary>
            Adds a remote ICE candidate to the RTP ICE Channel.
            </summary>
            <param name="candidate">An ICE candidate from the remote party.</param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.Restart">
            <summary>
            Restarts the ICE gathering and connection checks for this RTP ICE Channel.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.GetHostCandidates">
             <summary>
             Acquires an ICE candidate for each IP address that this host has except for:
             - Loopback addresses must not be included.
             - Deprecated IPv4-compatible IPv6 addresses and IPv6 site-local unicast addresses
               must not be included,
             - IPv4-mapped IPv6 address should not be included.
             - If a non-location tracking IPv6 address is available use it and do not included 
               location tracking enabled IPv6 addresses (i.e. prefer temporary IPv6 addresses over 
               permanent addresses), see RFC6724.
            
             SECURITY NOTE: https://tools.ietf.org/html/draft-ietf-rtcweb-ip-handling-12#section-5.2
             Makes recommendations about how host IP address information should be exposed.
             Of particular relevance are:
             
               Mode 1:  Enumerate all addresses: WebRTC MUST use all network
               interfaces to attempt communication with STUN servers, TURN
               servers, or peers.This will converge on the best media
               path, and is ideal when media performance is the highest
               priority, but it discloses the most information.
                
               Mode 2:  Default route + associated local addresses: WebRTC MUST
               follow the kernel routing table rules, which will typically
               cause media packets to take the same route as the
               application's HTTP traffic.  If an enterprise TURN server is
               present, the preferred route MUST be through this TURN
               server.Once an interface has been chosen, the private IPv4
               and IPv6 addresses associated with this interface MUST be
               discovered and provided to the application as host
               candidates.This ensures that direct connections can still
               be established in this mode.
               
             This implementation implements Mode 2.
             </summary>
             <remarks>
             See https://tools.ietf.org/html/rfc8445#section-5.1.1.1
             See https://tools.ietf.org/html/rfc6874 for a recommendation on how scope or zone ID's
             should be represented as strings in IPv6 link local addresses. Due to parsing
             issues in at least two other WebRTC stacks (as of Feb 2021) any zone ID is removed
             from an ICE candidate string.
             </remarks>
             <returns>A list of "host" ICE candidates for the local machine.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.InitialiseIceServers(System.Collections.Generic.List{SIPSorcery.Net.RTCIceServer})">
            <summary>
            Initialises the ICE servers if any were provided in the initial configuration.
            ICE servers are STUN and TURN servers and are used to gather "server reflexive"
            and "relay" candidates. If the transport policy is "relay only" then only TURN 
            servers will be added to the list of ICE servers being checked.
            </summary>
            <remarks>See https://tools.ietf.org/html/rfc8445#section-5.1.1.2</remarks>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.CheckIceServers(System.Object)">
            <summary>
            Checks the list of ICE servers to perform STUN binding or TURN reservation requests.
            Only one of the ICE server entries should end up being used. If at least one TURN server
            is provided it will take precedence as it can potentially supply both Server Reflexive 
            and Relay candidates.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.AddCandidatesForIceServer(SIPSorcery.Net.IceServer)">
            <summary>
            Adds candidates and updates the checklist for an ICE server that has completed
            the initial connectivity checks.
            </summary>
            <param name="iceServer">The ICE server that the initial checks have been completed
            for.</param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.UpdateChecklist(SIPSorcery.Net.RTCIceCandidate,SIPSorcery.Net.RTCIceCandidate)">
            <summary>
            Updates the checklist with new candidate pairs.
            </summary>
            <remarks>
            From https://tools.ietf.org/html/rfc8445#section-6.1.2.2:
            IPv6 link-local addresses MUST NOT be paired with other than link-local addresses.
            </remarks>
            <param name="localCandidate">The local candidate for the checklist entry.</param>
            <param name="remoteCandidate">The remote candidate to attempt to create a new checklist
            entry for.</param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.AddChecklistEntry(SIPSorcery.Net.ChecklistEntry)">
            <summary>
            Attempts to add a checklist entry. If there is already an equivalent entry in the checklist
            the entry may not be added or may replace an existing entry.
            </summary>
            <param name="entry">The new entry to attempt to add to the checklist.</param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.DoConnectivityCheck(System.Object)">
            <summary>
            The periodic logic to run to establish or monitor an ICE connection.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.ProcessChecklist">
            <summary>
            Processes the checklist and sends any required STUN requests to perform connectivity checks.
            </summary>
            <remarks>
            The scheduling mechanism for ICE is specified in https://tools.ietf.org/html/rfc8445#section-6.1.4.
            </remarks>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.SetNominatedEntry(SIPSorcery.Net.ChecklistEntry)">
            <summary>
            Sets the nominated checklist entry. This action completes the checklist processing and 
            indicates the connection checks were successful.
            </summary>
            <param name="entry">The checklist entry that was nominated.</param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.SendConnectivityCheck(SIPSorcery.Net.ChecklistEntry,System.Boolean)">
            <summary>
            Performs a connectivity check for a single candidate pair entry.
            </summary>
            <param name="candidatePair">The candidate pair to perform a connectivity check for.</param>
            <param name="setUseCandidate">If true indicates we are acting as the "controlling" ICE agent
            and are nominating this candidate as the chosen one.</param>
            <remarks>As specified in https://tools.ietf.org/html/rfc8445#section-7.2.4.
            
            Relay candidates are a special (and more difficult) case. The extra steps required to send packets via
            a TURN server are:
            - A Channel Bind request needs to be sent for each peer end point the channel will be used to
              communicate with.
            - Packets need to be sent and received as TURN Channel Data messages.
            </remarks>
            
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.SendSTUNBindingRequest(SIPSorcery.Net.ChecklistEntry,System.Boolean)">
            <summary>
            Builds and sends a STUN binding request to a remote peer based on the candidate pair properties.
            </summary>
            <param name="candidatePair">The candidate pair identifying the remote peer to send the STUN Binding Request
            to.</param>
            <param name="setUseCandidate">Set to true to add a "UseCandidate" attribute to the STUN request.</param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.SendCheckOnConnectedPair(SIPSorcery.Net.ChecklistEntry)">
            <summary>
            Builds and sends the connectivity check on a candidate pair that is set
            as the current nominated, connected pair.
            </summary>
            <param name="candidatePair">The pair to send the connectivity check on.</param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.ProcessStunMessage(SIPSorcery.Net.STUNMessage,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Processes a received STUN request or response.
            </summary>
            <remarks>
            Actions to take on a successful STUN response https://tools.ietf.org/html/rfc8445#section-7.2.5.3
            - Discover peer reflexive remote candidates as per https://tools.ietf.org/html/rfc8445#section-7.2.5.3.1.
            - Construct a valid pair which means match a candidate pair in the check list and mark it as valid (since a successful STUN exchange 
              has now taken place on it). A new entry may need to be created for this pair for a peer reflexive candidate.
            - Update state of candidate pair that generated the check to Succeeded.
            - If the controlling candidate set the USE_CANDIDATE attribute then the ICE agent that receives the successful response sets the nominated
              flag of the pair to true. Once the nominated flag is set it concludes the ICE processing for that component.
            </remarks>
            <param name="stunMessage">The STUN message received.</param>
            <param name="remoteEndPoint">The remote end point the STUN packet was received from.</param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.ProcessNominateLogicAsController(SIPSorcery.Net.ChecklistEntry)">
            <summary>
            Handles Nominate logic when Agent is the controller
            </summary>
            <param name="possibleMatchingCheckEntry">Optional initial ChecklistEntry.</param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.GotStunBindingRequest(SIPSorcery.Net.STUNMessage,System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Handles STUN binding requests received from remote candidates as part of the ICE connectivity checks.
            </summary>
            <param name="bindingRequest">The binding request received.</param>
            <param name="remoteEndPoint">The end point the request was received from.</param>
            <param name="wasRelayed">True of the request was relayed via the TURN server in use
            by this ICE channel (i.e. the ICE server that this channel is acting as the client with).</param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.GetChecklistEntryForStunResponse(System.Byte[])">
            <summary>
            Attempts to get the matching checklist entry for the transaction ID in a STUN response.
            </summary>
            <param name="transactionID">The STUN response transaction ID.</param>
            <returns>A checklist entry or null if there was no match.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.GetIceServerForTransactionID(System.Byte[])">
            <summary>
            Checks a STUN response transaction ID to determine if it matches a check being carried
            out for an ICE server.
            </summary>
            <param name="transactionID">The transaction ID from the STUN response.</param>
            <returns>If found a matching state object or null if not.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.SendStunBindingRequest(SIPSorcery.Net.IceServer)">
            <summary>
            Sends a STUN binding request to an ICE server.
            </summary>
            <param name="iceServer">The ICE server to send the request to.</param>
            <returns>The result of the send attempt. Note this is the return code from the
            socket send call and not the result code from the STUN response.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.SendTurnAllocateRequest(SIPSorcery.Net.IceServer)">
            <summary>
            Sends an allocate request to a TURN server.
            </summary>
            <param name="iceServer">The TURN server to send the request to.</param>
            <returns>The result from the socket send (not the response code from the TURN server).</returns>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.SendTurnRefreshRequest(SIPSorcery.Net.IceServer)">
            <summary>
            Sends an allocate request to a TURN server.
            </summary>
            <param name="iceServer">The TURN server to send the request to.</param>
            <returns>The result from the socket send (not the response code from the TURN server).</returns>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.SendTurnCreatePermissionsRequest(System.String,SIPSorcery.Net.IceServer,System.Net.IPEndPoint)">
            <summary>
            Sends a create permissions request to a TURN server for a peer end point.
            </summary>
            <param name="transactionID">The transaction ID to set on the request. This
            gets used to match responses back to the sender.</param>
            <param name="iceServer">The ICE server to send the request to.</param>
            <param name="peerEndPoint">The peer end point to request the channel bind for.</param>
            <returns>The result from the socket send (not the response code from the TURN server).</returns>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.GetAuthenticatedStunRequest(SIPSorcery.Net.STUNMessage,System.String,System.Byte[],System.String,System.Byte[])">
            <summary>
            Adds the authentication fields to a STUN request.
            </summary>
            <returns>The serialised STUN request.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.OnRTPPacketReceived(SIPSorcery.Net.UdpReceiver,System.Int32,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Event handler for packets received on the RTP UDP socket. This channel will detect STUN messages
            and extract STUN messages to deal with ICE connectivity checks and TURN relays.
            </summary>
            <param name="receiver">The UDP receiver the packet was received on.</param>
            <param name="localPort">The local port it was received on.</param>
            <param name="remoteEndPoint">The remote end point of the sender.</param>
            <param name="packet">The raw packet received (note this may not be RTP if other protocols are being multiplexed).</param>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.SendRelay(System.Net.Sockets.ProtocolType,System.Net.IPEndPoint,System.Byte[],System.Net.IPEndPoint,SIPSorcery.Net.IceServer)">
            <summary>
            Sends a packet via a TURN relay server.
            </summary>
            <param name="dstEndPoint">The peer destination end point.</param>
            <param name="buffer">The data to send to the peer.</param>
            <param name="relayEndPoint">The TURN server end point to send the relayed request to.</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.Net.RtpIceChannel.Send(SIPSorcery.Net.RTPChannelSocketsEnum,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            The send method for the RTP ICE channel. The sole purpose of this overload is to package up
            sends that need to be relayed via a TURN server. If the connected channel is not a relay then
            the send can be passed straight through to the underlying RTP channel.
            </summary>
            <param name="sendOn">The socket to send on. Can be the RTP or Control socket.</param>
            <param name="dstEndPoint">The destination end point to send to.</param>
            <param name="buffer">The data to send.</param>
            <returns>The result of initiating the send. This result does not reflect anything about
            whether the remote party received the packet or not.</returns>
        </member>
        <member name="T:SIPSorcery.Net.ReceptionReportSample">
            <summary>
            Represents a point in time sample for a reception report.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReportSample.SSRC">
            <summary>
            Data source being reported.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReportSample.FractionLost">
            <summary>
            Fraction lost since last SR/RR.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReportSample.PacketsLost">
            <summary>
            Cumulative number of packets lost (signed!).
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReportSample.ExtendedHighestSequenceNumber">
            <summary>
            Extended last sequence number received.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReportSample.Jitter">
            <summary>
            Interarrival jitter.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReportSample.LastSenderReportTimestamp">
            <summary>
            Last SR packet from this source.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReportSample.DelaySinceLastSenderReport">
            <summary>
            Delay since last SR packet.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.ReceptionReportSample.#ctor(System.UInt32,System.Byte,System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new Reception Report object.
            </summary>
            <param name="ssrc">The synchronisation source this reception report is for.</param>
            <param name="fractionLost">The fraction of RTP packets lost since the previous Sender or Receiver
            Report was sent.</param>
            <param name="packetsLost">The total number of RTP packets that have been lost since the
            beginning of reception.</param>
            <param name="highestSeqNum">Extended highest sequence number received from source.</param>
            <param name="jitter">Interarrival jitter of the RTP packets received within the last reporting period.</param>
            <param name="lastSRTimestamp">The timestamp from the most recent RTCP Sender Report packet
            received.</param>
            <param name="delaySinceLastSR">The delay between receiving the last Sender Report packet and the sending
            of this Reception Report.</param>
        </member>
        <member name="M:SIPSorcery.Net.ReceptionReportSample.GetBytes">
            <summary>
            Serialises the reception report block to a byte array.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="T:SIPSorcery.Net.ReceptionReport">
            <summary>
            Maintains the reception statistics for a received RTP stream.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReport.SSRC">
            <summary>
            Data source being reported.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReport.m_max_seq">
            <summary>
            highest seq. number seen
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReport.m_cycles">
            <summary>
            Increments by UInt16.MaxValue each time the sequence number wraps around.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReport.m_base_seq">
            <summary>
            The first sequence number received.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReport.m_bad_seq">
            <summary>
            last 'bad' seq number + 1.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReport.m_received">
            <summary>
            packets received.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReport.m_expected_prior">
            <summary>
            packet expected at last interval.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReport.m_received_prior">
            <summary>
            packet received at last interval.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReport.m_transit">
            <summary>
            relative trans time for prev pkt.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReport.m_jitter">
            <summary>
            Estimated jitter.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceptionReport.m_receivedLSRTimestamp">
            <summary>
            Received last SR packet timestamp.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.ReceptionReport.#ctor(System.UInt32)">
            <summary>
            Creates a new Reception Report object.
            </summary>
            <param name="ssrc">The synchronisation source this reception report is for.</param>
        </member>
        <member name="M:SIPSorcery.Net.ReceptionReport.RtcpSenderReportReceived(System.UInt64)">
            <summary>
            Updates the state when an RTCP sender report is received from the remote party.
            </summary>
            <param name="srNtpTimestamp">The sender report timestamp.</param>
        </member>
        <member name="M:SIPSorcery.Net.ReceptionReport.RtpPacketReceived(System.UInt16,System.UInt32,System.UInt32)">
            <summary>
            Carries out the calculations required to measure properties related to the reception of 
            received RTP packets. The algorithms employed are:
             - RFC3550 A.1 RTP Data Header Validity Checks (for sequence number calculations).
             - RFC3550 A.3 Determining Number of Packets Expected and Lost.
             - RFC3550 A.8 Estimating the Interarrival Jitter.
            </summary>
            <param name="seq">The sequence number in the RTP header.</param>
            <param name="rtpTimestamp">The timestamp in the RTP header.</param>
            <param name="arrivalTimestamp">The current timestamp in the SAME units as the RTP timestamp.
            For example for 8Khz audio the arrival timestamp needs 8000 ticks per second.</param>
        </member>
        <member name="M:SIPSorcery.Net.ReceptionReport.GetSample(System.UInt32)">
            <summary>
            Gets a point in time sample for the reception report.
            </summary>
            <returns>A reception report sample.</returns>
        </member>
        <member name="F:SIPSorcery.Net.ReceivedSRTimestamp.NTP">
            <summary>
            NTP timestamp in sender report packet, in 32bit.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.ReceivedSRTimestamp.ReceivedAt">
            <summary>
            Datetime the sender report was received at.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTCPBye">
            <summary>
            RTCP Goodbye packet as defined in RFC3550. The BYE packet indicates 
            that one or more sources are no longer active.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPBye.#ctor(System.UInt32,System.String)">
            <summary>
            Creates a new RTCP Bye payload.
            </summary>
            <param name="ssrc">The synchronisation source of the RTP stream being closed.</param>
            <param name="reason">Optional reason for closing. Maximum length is 255 bytes 
            (note bytes not characters).</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPBye.#ctor(System.Byte[])">
            <summary>
            Create a new RTCP Goodbye packet from a serialised byte array.
            </summary>
            <param name="packet">The byte array holding the Goodbye packet.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPBye.GetBytes">
            <summary>
            Gets the raw bytes for the Goodbye packet.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPBye.GetPaddedLength(System.Int32)">
            <summary>
            The packet has to finish on a 4 byte boundary. This method calculates the minimum
            packet length for the Goodbye fields to fit within a 4 byte boundary.
            </summary>
            <param name="reasonLength">The length of the optional reason string, can be 0.</param>
            <returns>The minimum length for the full packet to be able to fit within a 4 byte
            boundary.</returns>
        </member>
        <member name="T:SIPSorcery.Net.RTCPCompoundPacket">
            <summary>
            Represents an RTCP compound packet consisting of 1 or more
            RTCP packets combined together in a single buffer. According to RFC3550 RTCP 
            transmissions should always have at least 2 RTCP packets (a sender/receiver report
            and an SDES report). This implementation does not enforce that constraint for
            received reports but does for sends.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPCompoundPacket.#ctor(System.Byte[])">
            <summary>
            Creates a new RTCP compound packet from a serialised buffer.
            </summary>
            <param name="packet">The serialised RTCP compound packet to parse.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPCompoundPacket.GetBytes">
            <summary>
            Serialises a compound RTCP packet to a byte array ready for transmission.
            </summary>
            <returns>A byte array representing a serialised compound RTCP packet.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPCompoundPacket.TryParse(System.Byte[],SIPSorcery.Net.RTCPCompoundPacket,System.Int32@)">
            <summary>
            Creates a new RTCP compound packet from a serialised buffer.
            </summary>
            <param name="packet"></param>
            <param name="rtcpCompoundPacket"></param>
            <param name="consumed"></param>
            <returns>The amount read from the packet</returns>
        </member>
        <member name="T:SIPSorcery.Net.RTCPFeedbackTypesEnum">
            <summary>
            The different types of Feedback Message Types. (RFC4585)
            https://tools.ietf.org/html/rfc4585#page-35
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.PSFBFeedbackTypesEnum">
            <summary>
            The different types of Feedback Message Types. (RFC4585)
            https://tools.ietf.org/html/rfc4585#page-35
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPFeedback.#ctor(System.UInt32,System.UInt32,SIPSorcery.Net.RTCPFeedbackTypesEnum)">
            <summary>
            Constructor for RTP feedback reports that do not require any additional feedback control
            indication parameters (e.g. RTCP Rapid Resynchronisation Request).
            </summary>
            <param name="feedbackMessageType">The payload specific feedback type.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPFeedback.#ctor(System.UInt32,System.UInt32,SIPSorcery.Net.PSFBFeedbackTypesEnum)">
            <summary>
            Constructor for payload feedback reports that do not require any additional feedback control
            indication parameters (e.g. Picture Loss Indication reports).
            </summary>
            <param name="feedbackMessageType">The payload specific feedback type.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPFeedback.#ctor(System.Byte[])">
            <summary>
            Create a new RTCP Report from a serialised byte array.
            </summary>
            <param name="packet">The byte array holding the serialised feedback report.</param>
        </member>
        <member name="T:SIPSorcery.Net.RTCPReportTypesEnum">
            <summary>
            The different types of RTCP packets as defined in RFC3550.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTCPHeader">
            <summary>
            RTCP Header as defined in RFC3550.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPHeader.FeedbackMessageType">
            <summary>
            The Feedback Message Type is used for RFC4585 transport layer feedback reports.
            When used this field gets set in place of the Reception Report Counter field.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPHeader.PayloadFeedbackMessageType">
            <summary>
            The Payload Feedback Message Type is used for RFC4585 payload layer feedback reports.
            When used this field gets set in place of the Reception Report Counter field.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPHeader.IsFeedbackReport">
            <summary>
            Identifies whether an RTCP header is for a standard RTCP packet or for an
            RTCP feedback report.
            </summary>
            <returns>True if the header is for an RTCP feedback report or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPHeader.#ctor(System.Byte[])">
            <summary>
            Extract and load the RTCP header from an RTCP packet.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPHeader.SetLength(System.UInt16)">
            <summary>
            The length of this RTCP packet in 32-bit words minus one,
            including the header and any padding.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPReceiverReport.#ctor(System.UInt32,System.Collections.Generic.List{SIPSorcery.Net.ReceptionReportSample})">
            <summary>
            Creates a new RTCP Reception Report payload.
            </summary>
            <param name="ssrc">The synchronisation source of the RTP packet being sent. Can be zero
            if there are none being sent.</param>
            <param name="receptionReports">A list of the reception reports to include. Can be empty.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPReceiverReport.#ctor(System.Byte[])">
            <summary>
            Create a new RTCP Receiver Report from a serialised byte array.
            </summary>
            <param name="packet">The byte array holding the serialised receiver report.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPReceiverReport.GetBytes">
            <summary>
            Gets the serialised bytes for this Receiver Report.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="T:SIPSorcery.Net.RTCPSDesReport">
            <summary>
            RTCP Source Description (SDES) report as defined in RFC3550.
            Only the mandatory CNAME item is supported.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSDesReport.#ctor(System.UInt32,System.String)">
            <summary>
            Creates a new RTCP SDES payload that can be included in an RTCP packet.
            </summary>
            <param name="ssrc">The synchronisation source of the SDES.</param>
            <param name="cname">Canonical End-Point Identifier SDES item. This should be a 
            unique string common to all RTP streams in use by the application. Maximum
            length is 255 bytes (note bytes not characters).</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSDesReport.#ctor(System.Byte[])">
            <summary>
            Create a new RTCP SDES item from a serialised byte array.
            </summary>
            <param name="packet">The byte array holding the SDES report.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSDesReport.GetBytes">
            <summary>
            Gets the raw bytes for the SDES item. This packet is ready to be included 
            directly in an RTCP packet.
            </summary>
            <returns>A byte array containing the serialised SDES item.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSDesReport.GetPaddedLength(System.Int32)">
            <summary>
            The packet has to finish on a 4 byte boundary. This method calculates the minimum
            packet length for the SDES fields to fit within a 4 byte boundary.
            </summary>
            <param name="cnameLength">The length of the cname string.</param>
            <returns>The minimum length for the full packet to be able to fit within a 4 byte
            boundary.</returns>
        </member>
        <member name="T:SIPSorcery.Net.RTCPSenderReport">
            <summary>
            An RTCP sender report is for use by active RTP senders. 
            </summary>
            <remarks>
            From https://tools.ietf.org/html/rfc3550#section-6.4:
            "The only difference between the
            sender report(SR) and receiver report(RR) forms, besides the packet
            type code, is that the sender report includes a 20-byte sender
            information section for use by active senders.The SR is issued if a
            site has sent any data packets during the interval since issuing the
            last report or the previous one, otherwise the RR is issued."
            </remarks>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSenderReport.#ctor(System.Byte[])">
            <summary>
            Create a new RTCP Sender Report from a serialised byte array.
            </summary>
            <param name="packet">The byte array holding the serialised sender report.</param>
        </member>
        <member name="T:SIPSorcery.Net.RTCPSession">
            <summary>
            Represents an RTCP session intended to be used in conjunction with an 
            RTP session. This class needs to get notified of all RTP sends and receives 
            and will take care of RTCP reporting.
            </summary>
            <remarks>
            RTCP Design Decisions:
            - Minimum Report Period set to 5s as per RFC3550: 6.2 RTCP Transmission Interval (page 24).
            - Delay for initial report transmission set to 2.5s (0.5 * minimum report period) as per RFC3550: 6.2 RTCP Transmission Interval (page 26).
            - Randomisation factor to apply to report intervals to attempt to ensure RTCP reports amongst participants don't become synchronised
              [0.5 * interval, 1.5 * interval] as per RFC3550: 6.2 RTCP Transmission Interval (page 26).
            - Timeout period during which if no RTP or RTCP packets received a participant is assumed to have dropped
              5 x minimum report period as per RFC3550: 6.2.1 (page 27) and 6.3.5 (page 31).
            - All RTCP composite reports must satisfy (this includes when a BYE is sent):
              - First RTCP packet must be a SR or RR,
              - Must contain an SDES packet.
            </remarks>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.MediaType">
            <summary>
            The media type this report session is measuring.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.Ssrc">
            <summary>
            The SSRC number of the RTP packets we are sending.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.CreatedAt">
            <summary>
            Timestamp that the RTCP session was created at.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.StartedAt">
            <summary>
            Timestamp that the RTCP session sender report scheduler was started at.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.LastActivityAt">
            <summary>
            Timestamp that the last RTP or RTCP packet for was received at.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.IsTimedOut">
            <summary>
            Indicates whether the session is currently in a timed out state. This
            occurs if no RTP or RTCP packets have been received during an expected
            interval.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.PacketsSentCount">
            <summary>
            Number of RTP packets sent to the remote party.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.OctetsSentCount">
            <summary>
            Number of RTP bytes sent to the remote party.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.LastSeqNum">
            <summary>
            The last RTP sequence number sent by us.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.LastRtpTimestampSent">
            <summary>
            The last RTP timestamp sent by us.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.LastNtpTimestampSent">
            <summary>
            The last NTP timestamp corresponding to the last RTP timestamp sent by us.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.PacketsReceivedCount">
            <summary>
            Number of RTP packets received from the remote party.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.OctetsReceivedCount">
            <summary>
            Number of RTP bytes received from the remote party.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.Cname">
            <summary>
            Unique common name field for use in SDES packets.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.ReceptionReport">
            <summary>
            The reception report to keep track of the RTP statistics
            from packets received from the remote call party.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.IsClosed">
            <summary>
            Indicates whether the RTCP session has been closed.
            An RTCP BYE request will typically trigger an close.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPSession.PayloadSampleRateHz">
            <summary>
            Indicates the sample rate for RTP media data.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCPSession.m_rtcpReportTimer">
            <summary>
            Time to schedule the delivery of RTCP reports.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTCPSession.OnReportReadyToSend">
            <summary>
            Event handler for sending RTCP reports.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTCPSession.OnTimeout">
            <summary>
            Fires when the connection is classified as timed out due to not
            receiving any RTP or RTCP packets within the given period.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSession.#ctor(SIPSorcery.Net.SDPMediaTypesEnum,System.UInt32)">
            <summary>
            Default constructor.
            </summary>
            <param name="mediaType">The media type this reporting session will be measuring.</param>
            <param name="ssrc">The SSRC of the RTP stream being sent.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSession.RecordRtpPacketReceived(SIPSorcery.Net.RTPPacket)">
            <summary>
            Event handler for an RTP packet being received by the RTP session.
            Used for measuring transmission statistics.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSession.RemoveReceptionReport(System.UInt32)">
            <summary>
            Removes the reception report when the remote party indicates no more RTP packets
            for that SSRC will be received by sending an RTCP BYE.
            </summary>
            <param name="ssrc">The SSRC of the reception report being closed. Typically this
            should be the SSRC received in the RTCP BYE.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSession.RecordRtpPacketSend(SIPSorcery.Net.RTPPacket)">
            <summary>
            Event handler for an RTP packet being sent by the RTP session.
            Used for measuring transmission statistics.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSession.ReportReceived(System.Net.IPEndPoint,SIPSorcery.Net.RTCPCompoundPacket)">
            <summary>
            Event handler for an RTCP packet being received from the remote party.
            </summary>
            <param name="remoteEndPoint">The end point the packet was received from.</param>
            <param name="rtcpCompoundPacket">The data received.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSession.SendReportTimerCallback(System.Object)">
            <summary>
            Callback function for the RTCP report timer.
            </summary>
            <param name="stateInfo">Not used.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSession.GetRtcpReport">
            <summary>
            Gets the RTCP compound packet containing the RTCP reports we send.
            </summary>
            <returns>An RTCP compound packet.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSession.GetNextRtcpInterval(System.Int32)">
            <summary>
            Gets a pseudo-randomised interval for the next RTCP report period.
            </summary>
            <param name="baseInterval">The base report interval to randomise.</param>
            <returns>A value in milliseconds to use for the next RTCP report interval.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPSession.DateTimeToNtpTimestamp(System.DateTime)">
            <summary>
            Converts specified DateTime value to long NTP time.
            </summary>
            <param name="value">DateTime value to convert. This value must be in local time.</param>
            <returns>Returns NTP value.</returns>
            <notes>
            Wallclock time (absolute date and time) is represented using the
            timestamp format of the Network Time Protocol (NPT), which is in
            seconds relative to 0h UTC on 1 January 1900 [4].  The full
            resolution NPT timestamp is a 64-bit unsigned fixed-point number with
            the integer part in the first 32 bits and the fractional part in the
            last 32 bits. In some fields where a more compact representation is
            appropriate, only the middle 32 bits are used; that is, the low 16
            bits of the integer part and the high 16 bits of the fractional part.
            The high 16 bits of the integer part must be determined independently.
            </notes>
        </member>
        <member name="P:SIPSorcery.Net.MediaStreamTrack.Kind">
            <summary>
            The type of media stream represented by this track. Must be audio or video.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.MediaStreamTrack.Ssrc">
            <summary>
            The value used in the RTP Synchronisation Source header field for media packets
            sent using this media stream.
            Be careful that the RTP Synchronisation Source header field should not be changed
            unless specific implementations require it. By default this value is chosen randomly,
            with the intent that no two synchronization sources within the same RTP session
            will have the same SSRC.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.MediaStreamTrack.LastRemoteSeqNum">
            <summary>
            The last seqnum received from the remote peer for this stream.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.MediaStreamTrack.LastAbsoluteCaptureTimestamp">
            <summary>
            The last abs-capture-time received from the remote peer for this stream.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.MediaStreamTrack.Timestamp">
            <summary>
            The value used in the RTP Timestamp header field for media packets
            sent using this media stream.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.MediaStreamTrack.IsRemote">
            <summary>
            Indicates whether this track was sourced by a remote connection.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.MediaStreamTrack.NoDtmfSupport">
            <summary>
            By default audio channels will support DTMF via telephone events. To opt
            out of DTMF support set this property to true.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.MediaStreamTrack.Capabilities">
            <summary>
            The media capabilities supported by this track.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.MediaStreamTrack.HeaderExtensions">
            <summary>
             a=extmap - Mapping for RTP header extensions
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.MediaStreamTrack.DefaultStreamStatus">
            <summary>
            Represents the original and default stream status for the track. This is set
            when the track is created and does not change. It allows tracks to be set back to
            their original state after being put on hold etc. For example if a track is
            added as receive only video source then when after on and off hold it needs to
            be known that the track reverts receive only rather than sendrecv.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.MediaStreamTrack.StreamStatus">
            <summary>
            Holds the stream state of the track.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.MediaStreamTrack.SdpSsrc">
            <summary>
            If the SDP remote the remote party provides "a=ssrc" attributes, as specified
            in RFC5576, this property will hold the values. The list can be used when
            an RTP/RTCP packet is received and needs to be matched against a media type or 
            RTCP report.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.MediaStreamTrack.MaximumBandwidth">
            <summary>
            If set to a non-zero value for local tracks then a Transport Independent Bandwidth (TIAS) attribute
            will be included in any SDP for the track's media announcement. For remote tracks thi a non-zero
            value indicates the a TIAS attribute was set in the remote SDP media announcement.
            The bandwith is specified in bits per seconds (bps).
            </summary>
            <remarks>
            See https://tools.ietf.org/html/rfc3890.
            </remarks>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamTrack.#ctor(SIPSorcery.Net.SDPMediaTypesEnum,System.Boolean,System.Collections.Generic.List{SIPSorcery.Net.SDPAudioVideoMediaFormat},SIPSorcery.Net.MediaStreamStatusEnum,System.Collections.Generic.List{SIPSorcery.Net.SDPSsrcAttribute},System.Collections.Generic.Dictionary{System.Int32,SIPSorcery.net.RTP.RTPHeaderExtension})">
            <summary>
            Creates a lightweight class to track a media stream track within an RTP session 
            When supporting RFC3550 (the standard RTP specification) the relationship between
            an RTP stream and session is 1:1. For WebRTC and RFC8101 there can be multiple
            streams per session.
            </summary>
            <param name="kind">The type of media for this stream. There can only be one
            stream per media type.</param>
            <param name="isRemote">True if this track corresponds to a media announcement from the 
            remote party.</param>
            <param name="capabilities">The capabilities for the track being added. Where the same media
            type is supported locally and remotely only the mutual capabilities can be used. This will
            occur if we receive an SDP offer (add track initiated by the remote party) and we need
            to remove capabilities we don't support.</param>
            <param name="streamStatus">The initial stream status for the media track. Defaults to
            send receive.</param>
            <param name="ssrcAttributes">Optional. If the track is being created from an SDP announcement this
            parameter contains a list of the SSRC attributes that should then match the RTP header SSRC value
            for this track.</param>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamTrack.#ctor(SIPSorceryMedia.Abstractions.AudioFormat,SIPSorcery.Net.MediaStreamStatusEnum)">
            <summary>
            Add a local audio track.
            </summary>
            <param name="format">The audio format that the local application supports.</param>
            <param name="streamStatus">Optional. The stream status for the audio track, e.g. whether
            send and receive or only one of.</param>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamTrack.#ctor(System.Collections.Generic.List{SIPSorceryMedia.Abstractions.AudioFormat},SIPSorcery.Net.MediaStreamStatusEnum)">
            <summary>
            Add a local audio track.
            </summary>
            <param name="formats">The audio formats that the local application supports.</param>
            <param name="streamStatus">Optional. The stream status for the audio track, e.g. whether
            send and receive or only one of.</param>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamTrack.#ctor(SIPSorceryMedia.Abstractions.VideoFormat,SIPSorcery.Net.MediaStreamStatusEnum)">
            <summary>
            Add a local video track.
            </summary>
            <param name="format">The video format that the local application supports.</param>
            <param name="streamStatus">Optional. The stream status for the video track, e.g. whether
            send and receive or only one of.</param>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamTrack.#ctor(System.Collections.Generic.List{SIPSorceryMedia.Abstractions.VideoFormat},SIPSorcery.Net.MediaStreamStatusEnum)">
            <summary>
            Add a local video track.
            </summary>
            <param name="formats">The video formats that the local application supports.</param>
            <param name="streamStatus">Optional. The stream status for the video track, e.g. whether
            send and receive or only one of.</param>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamTrack.#ctor(SIPSorceryMedia.Abstractions.SDPWellKnownMediaFormatsEnum[])">
            <summary>
            Adds a local audio track based on one or more well known audio formats.
            There is no equivalent for a local video track as there is no support in this library for any of
            the well known video formats.
            </summary>
            <param name="wellKnownAudioFormats">One or more well known audio formats.</param>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamTrack.IsPayloadIDMatch(System.Int32)">
            <summary>
            Checks whether the payload ID in an RTP packet received from the remote call party
            is in this track's list.
            </summary>
            <param name="payloadID">The payload ID to check against.</param>
            <returns>True if the payload ID matches one of the codecs for this stream. False if not.</returns>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamTrack.IsSsrcMatch(System.UInt32)">
            <summary>
            Checks whether a SSRC value from an RTP header or RTCP report matches
            a value expected for this track.
            </summary>
            <param name="ssrc">The SSRC value to check.</param>
            <returns>True if the SSRC value is expected for this track. False if not.</returns>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamTrack.GetFormatForPayloadID(System.Int32)">
            <summary>
            Gets the matching audio or video format for a payload ID.
            </summary>
            <param name="payloadID">The payload ID to get the format for.</param>
            <returns>An audio or video format or null if no payload ID matched.</returns>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamTrack.RestrictCapabilities(SIPSorcery.Net.SDPAudioVideoMediaFormat)">
            <summary>
            To restrict MediaStream Capabilties to one Audio/Video format. This Audio/Video format must already be present in the previous list or if the list is empty/null
            
            Usefull once you have successfully created a connection with a Peer to use the same format even even others negocitions are performed
            </summary>
            <param name="sdpAudioVideoMediaFormat">The Audio/Video Format to restrict</param>
            <returns>True if the operation has been performed</returns>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamTrack.RestrictCapabilities(SIPSorceryMedia.Abstractions.VideoFormat)">
            <summary>
            To restrict MediaStream Capabilties to one Video format. This Video format must already be present in the previous list or if the list is empty/null
            
            Usefull once you have successfully created a connection with a Peer to use the same format even even others negocitions are performed
            </summary>
            <param name="videoFormat">The Video Format to restrict</param>
            <returns>True if the operation has been performed</returns>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamTrack.RestrictCapabilities(SIPSorceryMedia.Abstractions.AudioFormat)">
            <summary>
            To restrict MediaStream Capabilties to one Audio format. This Audio format must already be present in the previous list or if the list is empty/null
            
            Usefull once you have successfully created a connection with a Peer to use the same format even even others negocitions are performed
            </summary>
            <param name="audioFormat">The Audio Format to restrict</param>
            <returns>True if the operation has been performed</returns>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamTrack.GetNextSeqNum">
            <summary>
            Returns the next SeqNum to be used in the RTP Sequence Number header field for media packets
            sent using this media stream. 
            </summary>
            <returns></returns>
        </member>
        <member name="T:SIPSorcery.Net.H264Depacketiser">
            <summary>
            Based in https://github.com/BogdanovKirill/RtspClientSharp/blob/master/RtspClientSharp/MediaParsers/H264VideoPayloadParser.cs 
            Distributed under MIT License
            
            @author raf.csoares@kyubinteractive.com
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.H264Packetiser.GetH264RtpHeader(System.Byte,System.Boolean,System.Boolean)">
             <summary>
             Constructs the RTP header for an H264 NAL. This method does NOT support
             aggregation packets where multiple NALs are sent as a single RTP payload.
             The supported H264 header type is Single-Time Aggregation Packet type A 
             (STAP-A) and Fragmentation Unit A (FU-A). The headers produced correspond
             to H264 packetization-mode=1.
             </summary>
             <remarks>
             RTP Payload Format for H.264 Video:
             https://tools.ietf.org/html/rfc6184
             
             FFmpeg H264 RTP packetisation code:
             https://github.com/FFmpeg/FFmpeg/blob/master/libavformat/rtpenc_h264_hevc.c
             
             When the payload size is less than or equal to max RTP payload, send as 
             Single-Time Aggregation Packet (STAP):
             https://tools.ietf.org/html/rfc6184#section-5.7.1
             
                  0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                          RTP Header                           |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |STAP-A NAL HDR |         NALU 1 Size           | NALU 1 HDR    |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |F|NRI|  Type   |                                               |
             +-+-+-+-+-+-+-+-+
             
             Type = 24 for STAP-A (NOTE: this is the type of the H264 RTP header 
             and NOT the NAL type).
             
             When the payload size is greater than max RTP payload, send as 
             Fragmentation Unit A (FU-A):
             https://tools.ietf.org/html/rfc6184#section-5.8
                  0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             | FU indicator  |   FU header   |                               |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ 
             |   Fragmentation Unit (FU) Payload
             |
             ...
             
             
             The FU indicator octet has the following format:
            
             +---------------+
             |0|1|2|3|4|5|6|7|
             +-+-+-+-+-+-+-+-+
             |F|NRI|  Type   |
             +---------------+
             
             F and NRI bits come from the NAL being transmitted.
             Type = 28 for FU-A (NOTE: this is the type of the H264 RTP header 
             and NOT the NAL type).
             
             The FU header has the following format:
            
             +---------------+
             |0|1|2|3|4|5|6|7|
             +-+-+-+-+-+-+-+-+
             |S|E|R|  Type   |
             +---------------+
             
             S: Set to 1 for the start of the NAL FU (i.e. first packet in frame).
             E: Set to 1 for the end of the NAL FU (i.e. the last packet in the frame).
             R: Reserved bit must be 0.
             Type: The NAL unit payload type, comes from NAL packet (NOTE: this IS the type of the NAL message).
             </remarks>
        </member>
        <member name="M:SIPSorcery.Net.RtpVideoFramer.CreateLowQualityRtpJpegHeader(System.UInt32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Utility function to create RtpJpegHeader either for initial packet or template for further packets
            
            <code>
            0                   1                   2                   3
            0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            | Type-specific |              Fragment Offset                  |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |      Type     |       Q       |     Width     |     Height    |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            </code>
            </summary>
            <param name="fragmentOffset"></param>
            <param name="quality"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="T:SIPSorcery.Net.RtpVP8Header">
            <summary>
            Representation of the VP8 RTP header as specified in RFC7741
            https://tools.ietf.org/html/rfc7741.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.UdpReceiver">
            <summary>
            A basic UDP socket manager. The RTP channel may need both an RTP and Control socket. This class encapsulates
            the common logic for UDP socket management.
            </summary>
            <remarks>
            .NET Framework Socket source:
            https://referencesource.microsoft.com/#system/net/system/net/Sockets/Socket.cs
            .NET Core Socket source:
            https://github.com/dotnet/runtime/blob/master/src/libraries/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
            Mono Socket source:
            https://github.com/mono/mono/blob/master/mcs/class/System/System.Net.Sockets/Socket.cs
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.UdpReceiver.RECEIVE_BUFFER_SIZE">
            <summary>
            MTU is 1452 bytes so this should be heaps.
            TODO: What about fragmented UDP packets that are put back together by the OS?
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.UdpReceiver.OnPacketReceived">
            <summary>
            Fires when a new packet has been received on the UDP socket.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.UdpReceiver.OnClosed">
            <summary>
            Fires when there is an error attempting to receive on the UDP socket.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.UdpReceiver.BeginReceiveFrom">
            <summary>
            Starts the receive. This method returns immediately. An event will be fired in the corresponding "End" event to
            return any data received.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.UdpReceiver.EndReceiveFrom(System.IAsyncResult)">
            <summary>
            Handler for end of the begin receive call.
            </summary>
            <param name="ar">Contains the results of the receive.</param>
        </member>
        <member name="M:SIPSorcery.Net.UdpReceiver.Close(System.String)">
            <summary>
            Closes the socket and stops any new receives from being initiated.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTPChannel">
            <summary>
            A communications channel for transmitting and receiving Real-time Protocol (RTP) and
            Real-time Control Protocol (RTCP) packets. This class performs the socket management
            functions.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPChannel.LastRtpDestination">
            <summary>
            The last remote end point an RTP packet was sent to or received from. Used for 
            reporting purposes only.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPChannel.LastControlDestination">
            <summary>
            The last remote end point an RTCP packet was sent to or received from. Used for
            reporting purposes only.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPChannel.RTPPort">
            <summary>
            The local port we are listening for RTP (and whatever else is multiplexed) packets on.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPChannel.RTPLocalEndPoint">
            <summary>
            The local end point the RTP socket is listening on.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPChannel.ControlPort">
            <summary>
            The local port we are listening for RTCP packets on.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPChannel.ControlLocalEndPoint">
            <summary>
            The local end point the control socket is listening on.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPChannel.IsDualMode">
            <summary>
            Returns true if the RTP socket supports dual mode IPv4 and IPv6. If the control
            socket exists it will be the same.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPChannel.#ctor(System.Boolean,System.Net.IPAddress,System.Int32,SIPSorcery.Sys.PortRange)">
            <summary>
            Creates a new RTP channel. The RTP and optionally RTCP sockets will be bound in the constructor.
            They do not start receiving until the Start method is called.
            </summary>
            <param name="createControlSocket">Set to true if a separate RTCP control socket should be created. If RTP and
            RTCP are being multiplexed (as they are for WebRTC) there's no need to a separate control socket.</param>
            <param name="bindAddress">Optional. An IP address belonging to a local interface that will be used to bind
            the RTP and control sockets to. If left empty then the IPv6 any address will be used if IPv6 is supported
            and fallback to the IPv4 any address.</param>
            <param name="bindPort">Optional. The specific port to attempt to bind the RTP port on.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPChannel.Start">
            <summary>
            Starts listening on the RTP and control ports.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPChannel.StartRtpReceiver">
            <summary>
            Starts the UDP receiver that listens for RTP packets.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPChannel.StartControlReceiver">
            <summary>
            Starts the UDP receiver that listens for RTCP (control) packets.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPChannel.Close(System.String)">
            <summary>
            Closes the session's RTP and control ports.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPChannel.Send(SIPSorcery.Net.RTPChannelSocketsEnum,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            The send method for the RTP channel.
            </summary>
            <param name="sendOn">The socket to send on. Can be the RTP or Control socket.</param>
            <param name="dstEndPoint">The destination end point to send to.</param>
            <param name="buffer">The data to send.</param>
            <returns>The result of initiating the send. This result does not reflect anything about
            whether the remote party received the packet or not.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTPChannel.EndSendTo(System.IAsyncResult)">
            <summary>
            Ends an async send on one of the channel's sockets.
            </summary>
            <param name="ar">The async result to complete the send with.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPChannel.OnRTPPacketReceived(SIPSorcery.Net.UdpReceiver,System.Int32,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Event handler for packets received on the RTP UDP socket.
            </summary>
            <param name="receiver">The UDP receiver the packet was received on.</param>
            <param name="localPort">The local port it was received on.</param>
            <param name="remoteEndPoint">The remote end point of the sender.</param>
            <param name="packet">The raw packet received (note this may not be RTP if other protocols are being multiplexed).</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPChannel.OnControlPacketReceived(SIPSorcery.Net.UdpReceiver,System.Int32,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Event handler for packets received on the control UDP socket.
            </summary>
            <param name="receiver">The UDP receiver the packet was received on.</param>
            <param name="localPort">The local port it was received on.</param>
            <param name="remoteEndPoint">The remote end point of the sender.</param>
            <param name="packet">The raw packet received which should always be an RTCP packet.</param>
        </member>
        <member name="P:SIPSorcery.Net.RTPEvent.EventID">
            <summary>
            The ID for the event. For a DTMF tone this is the digit/letter to represent.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPEvent.EndOfEvent">
            <summary>
            If true the end of event flag will be set.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPEvent.Volume">
            <summary>
            The volume level to set.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPEvent.TotalDuration">
            <summary>
            The duration for the full event.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPEvent.Duration">
            <summary>
            The duration of the current event payload. This value is set in the RTP event data payload.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPEvent.PayloadTypeID">
            <summary>
            The ID of the event payload type. This gets set in the RTP header.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPEvent.#ctor(System.Byte,System.Boolean,System.UInt16,System.UInt16,System.Int32)">
            <summary>
            Create a new RTP event object.
            </summary>
            <param name="eventID">The ID for the event. For a DTMF tone this is the digit/letter to represent.</param>
            <param name="endOfEvent">If true the end of event flag will be set.</param>
            <param name="volume">The volume level to set.</param>
            <param name="totalDuration">The event duration.</param>
            <param name="payloadTypeID">The ID of the event payload type. This gets set in the RTP header.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPEvent.GetEventPayload">
            <summary>
            Gets the raw buffer for the event.
            </summary>
            <returns>A raw byte buffer for the event.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTPEvent.#ctor(System.Byte[])">
            <summary>
            Extract and load an RTP Event from a packet buffer.
            </summary>
            <param name="packet">The packet buffer containing the RTP Event.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPHeader.#ctor(System.Byte[])">
            <summary>
            Extract and load the RTP header from an RTP packet.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="F:SIPSorcery.Net.SetDescriptionResultEnum.OK">
            <summary>
            At least one media stream with a compatible format was available.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SetDescriptionResultEnum.AudioIncompatible">
            <summary>
            Both parties had audio but no compatible format was available.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SetDescriptionResultEnum.VideoIncompatible">
            <summary>
            Both parties had video but no compatible format was available.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SetDescriptionResultEnum.NoLocalMedia">
            <summary>
            No media tracks are available on the local session.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SetDescriptionResultEnum.NoRemoteMedia">
            <summary>
            The remote description did not contain any media announcements.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SetDescriptionResultEnum.NoMatchingMediaType">
            <summary>
            Indicates there was no media type match. For example only have audio locally
            but video remote or vice-versa.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SetDescriptionResultEnum.Error">
            <summary>
            An unknown error.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SetDescriptionResultEnum.DtlsFingerprintMissing">
            <summary>
            A required DTLS fingerprint was missing from the session description.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SetDescriptionResultEnum.DtlsFingerprintInvalid">
            <summary>
            The DTLS fingerprint was present but the format was not recognised.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SetDescriptionResultEnum.DtlsFingerprintDigestNotSupported">
            <summary>
            The DTLS fingerprint was provided with an unsupported digest. It won't
            be possible to check that the certificate supplied during the DTLS handshake
            matched the fingerprint.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SetDescriptionResultEnum.DataChannelTransportNotSupported">
            <summary>
            An unsupported data channel transport was requested (at the time of writing only
            SCTP over DTLS is supported, no TCP option).
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SetDescriptionResultEnum.WrongSdpTypeOfferAfterOffer">
            <summary>
            An SDP offer was received when the local agent had already entered have local offer state.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SetDescriptionResultEnum.CryptoNegotiationFailed">
            <summary>
            Crypto attributes invalid or not compatible.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTPSession">
            <summary>
            The RTPSession class is the primary point for interacting with the Real-Time
            Protocol. It manages all the resources required for setting up and then sending
            and receiving RTP packets. This class IS designed to be inherited by child 
            classes and for child classes to add audio and video processing logic.
            </summary>
            <remarks>
            The setting up of an RTP stream involved the exchange of Session Descriptions 
            (SDP) with the remote party. This class has adopted the mechanism used by WebRTC.
            The steps are:
            1. If acting as the initiator:
              a. Create offer,
              b. Send offer to remote party and get their answer (external to this class, requires signalling),
              c. Set remote description,
              d. Optionally perform any additional set up, such as negotiating SRTP keying material,
              e. Call Start to commence RTCP reporting.
            2. If acting as the recipient:
              a. Receive offer,
              b. Set remote description. This step MUST be done before an SDP answer can be generated.
                 This step can also result in an error condition if the codecs/formats offered aren't supported,
              c. Create answer,
              d. Send answer to remote party (external to this class, requires signalling),
              e. Optionally perform any additional set up, such as negotiating SRTP keying material,
              f. Call Start to commence RTCP reporting.
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.RTPSession.SRTP_MAX_PREFIX_LENGTH">
            <summary>
            From libsrtp: SRTP_MAX_TRAILER_LEN is the maximum length of the SRTP trailer
            (authentication tag and MKI) supported by libSRTP.This value is
            the maximum number of octets that will be added to an RTP packet by
            srtp_protect().
            
            srtp_protect():
            @warning This function assumes that it can write SRTP_MAX_TRAILER_LEN
            into the location in memory immediately following the RTP packet.
            Callers MUST ensure that this much writeable memory is available in
            the buffer that holds the RTP packet.
            
            srtp_protect_rtcp():
            @warning This function assumes that it can write SRTP_MAX_TRAILER_LEN+4
            to the location in memory immediately following the RTCP packet.
            Callers MUST ensure that this much writeable memory is available in
            the buffer that holds the RTCP packet.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTPSession.RTCP_RR_NOSTREAM_SSRC">
            <summary>
            When there are no RTP packets being sent for an audio or video stream webrtc.lib
            still sends RTCP Receiver Reports with this hard coded SSRC. No doubt it's defined
            in an RFC somewhere but I wasn't able to find it from a quick search.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.RequireRenegotiation">
            <summary>
            Track if current remote description is invalid (used in Renegotiation logic)
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.PrimaryStream">
            <summary>
            The primary stream for this session - can be an AudioStream or a VideoStream
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.AudioStream">
            <summary>
            The primary Audio Stream for this session
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.VideoStream">
            <summary>
            The primary Video Stream for this session
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.AudioLocalTrack">
            <summary>
            The primary local audio stream for this session. Will be null if we are not sending audio.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.AudioRemoteTrack">
            <summary>
            The primary remote audio track for this session. Will be null if the remote party is not sending audio.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.AudioRtcpSession">
            <summary>
            The primary reporting session for the audio stream. Will be null if only video is being sent.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.AudioDestinationEndPoint">
            <summary>
            The primary Audio remote RTP end point this stream is sending media to.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.AudioControlDestinationEndPoint">
            <summary>
            The primary Audio remote RTP control end point this stream is sending to RTCP reports for the media stream to.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.VideoLocalTrack">
            <summary>
            The primary local video track for this session. Will be null if we are not sending video.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.VideoRemoteTrack">
            <summary>
            The primary remote video track for this session. Will be null if the remote party is not sending video.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.VideoRtcpSession">
            <summary>
            The primary reporting session for the video stream. Will be null if only audio is being sent.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.VideoDestinationEndPoint">
            <summary>
            The primary Video remote RTP end point this stream is sending media to.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.VideoControlDestinationEndPoint">
            <summary>
            The primary Video remote RTP control end point this stream is sending to RTCP reports for the media stream to.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.AudioStreamList">
            <summary>
            List of all Audio Streams for this session
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.VideoStreamList">
            <summary>
            List of all Video Streams for this session
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.RemoteDescription">
            <summary>
            The SDP offered by the remote call party for this session.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.IsSecureContextReady">
            <summary>
            If this session is using a secure context this flag MUST be set to indicate
            the security delegate (SrtpProtect, SrtpUnprotect etc) have been set.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.SrtpCryptoSuites">
            <summary>
            If this session is using a secure context this list MAY contain custom
            Crypto Suites
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.MaxReconstructedVideoFrameSize">
            <summary>
            Indicates the maximum frame size that can be reconstructed from RTP packets during the depacketisation
            process.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.IsClosed">
            <summary>
            Indicates whether the session has been closed. Once a session is closed it cannot
            be restarted.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.IsStarted">
            <summary>
            Indicates whether the session has been started. Starting a session tells the RTP 
            socket to start receiving,
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.HasAudio">
            <summary>
            Indicates whether this session is using audio.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.HasVideo">
            <summary>
            Indicates whether this session is using video.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.AcceptRtpFromAny">
            <summary>
            If set to true RTP will be accepted from ANY remote end point. If false
            certain rules are used to determine whether RTP should be accepted for 
            a particular audio or video stream. It is recommended to leave the
            value to false unless a specific need exists.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTPSession.RtpBindAddress">
            <summary>
            Set if the session has been bound to a specific IP address.
            Normally not required but some esoteric call or network set ups may need.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnAudioFormatsNegotiated">
            <summary>
            Gets fired when the remote SDP is received and the set of common audio formats is set. (on the primary one)
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnAudioFormatsNegotiatedByIndex">
            <summary>
            Gets fired when the remote SDP is received and the set of common audio formats is set. (using its index)
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnVideoFormatsNegotiated">
            <summary>
            Gets fired when the remote SDP is received and the set of common video formats is set. (on the primary one)
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnVideoFormatsNegotiatedByIndex">
            <summary>
            Gets fired when the remote SDP is received and the set of common video formats is set. (using its index)
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnVideoFrameReceived">
            <summary>
            Gets fired when a full video frame is reconstructed from one or more RTP packets
            received from the remote party. (on the primary one)
            </summary>
            <remarks>
             - Received from end point,
             - The frame timestamp,
             - The encoded video frame payload.
             - The video format of the encoded frame.
            </remarks>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnVideoFrameReceivedByIndex">
            <summary>
            Gets fired when a full video frame is reconstructed from one or more RTP packets
            received from the remote party. (using its index)
            </summary>
            <remarks>
             - Index of the VideoStream
             - Received from end point,
             - The frame timestamp,
             - The encoded video frame payload.
             - The video format of the encoded frame.
            </remarks>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnRtpPacketReceived">
            <summary>
            Gets fired when an RTP packet is received from a remote party. (on the primary one)
            Parameters are:
             - Remote endpoint packet was received from,
             - The media type the packet contains, will be audio or video,
             - The full RTP packet.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnRtpPacketReceivedByIndex">
            <summary>
            Gets fired when an RTP packet is received from a remote party (using its index).
            Parameters are:
             - index of the AudioStream or VideoStream
             - Remote endpoint packet was received from,
             - The media type the packet contains, will be audio or video,
             - The full RTP packet.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnRtpEvent">
            <summary>
            Gets fired when an RTP event is detected on the remote call party's RTP stream (on the primary one).
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnRtpEventByIndex">
            <summary>
            Gets fired when an RTP event is detected on the remote call party's RTP stream (using its index).
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnRtpClosed">
            <summary>
            Gets fired when the RTP session and underlying channel are closed.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnRtcpBye">
            <summary>
            Gets fired when an RTCP BYE packet is received from the remote party.
            The string parameter contains the BYE reason. Normally a BYE
            report means the RTP session is finished. But... cases have been observed where
            an RTCP BYE is received when a remote party is put on hold and then the session
            resumes when take off hold. It's up to the application to decide what action to
            take when n RTCP BYE is received.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnTimeout">
            <summary>
            Fires when the connection for a media type (the primary one) is classified as timed out due to not
            receiving any RTP or RTCP packets within the given period.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnTimeoutByIndex">
            <summary>
            Fires when the connection for a media type (using its index) is classified as timed out due to not
            receiving any RTP or RTCP packets within the given period.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnReceiveReport">
            <summary>
            Gets fired when an RTCP report is received (the primary one). This event is for diagnostics only.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnReceiveReportByIndex">
            <summary>
            Gets fired when an RTCP report is received (using its index). This event is for diagnostics only.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnSendReport">
            <summary>
            Gets fired when an RTCP report is sent (the primary one). This event is for diagnostics only.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnSendReportByIndex">
            <summary>
            Gets fired when an RTCP report is sent (using its nidex). This event is for diagnostics only.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnStarted">
            <summary>
            Gets fired when the start method is called on the session. This is the point
            audio and video sources should commence generating samples.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTPSession.OnClosed">
            <summary>
            Gets fired when the session is closed. This is the point audio and video
            source should stop generating samples.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Net.IPAddress,System.Int32,SIPSorcery.Sys.PortRange)">
            <summary>
            Creates a new RTP session. The synchronisation source and sequence number are initialised to
            pseudo random values.
            </summary>
            <param name="isRtcpMultiplexed">If true RTCP reports will be multiplexed with RTP on a single channel.
            If false (standard mode) then a separate socket is used to send and receive RTCP reports.</param>
            <param name="isSecure">If true indicated this session is using SRTP to encrypt and authorise
            RTP and RTCP packets. No communications or reporting will commence until the 
            is explicitly set as complete.</param>
            <param name="isMediaMultiplexed">If true only a single RTP socket will be used for both audio
            and video (standard case for WebRTC). If false two separate RTP sockets will be used for
            audio and video (standard case for VoIP).</param>
            <param name="bindAddress">Optional. If specified this address will be used as the bind address for any RTP
            and control sockets created. Generally this address does not need to be set. The default behaviour
            is to bind to [::] or 0.0.0.0,d depending on system support, which minimises network routing
            causing connection issues.</param>
            <param name="bindPort">Optional. If specified a single attempt will be made to bind the RTP socket
            on this port. It's recommended to leave this parameter as the default of 0 to let the Operating
            System select the port number.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.#ctor(SIPSorcery.Net.RtpSessionConfig)">
            <summary>
            Creates a new RTP session. The synchronisation source and sequence number are initialised to
            pseudo random values.
            </summary>
            <param name="config">Contains required settings.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.CreateOffer(System.Net.IPAddress)">
            <summary>
            Generates the SDP for an offer that can be made to a remote user agent.
            </summary>
            <param name="connectionAddress">Optional. If specified this IP address
            will be used as the address advertised in the SDP offer. If not provided
            the kernel routing table will be used to determine the local IP address used
            for Internet access. Any and IPv6Any are special cases. If they are set the respective
            Internet facing IPv4 or IPv6 address will be used.</param>
            <returns>A task that when complete contains the SDP offer.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.CreateAnswer(System.Net.IPAddress)">
            <summary>
            Generates an SDP answer in response to an offer. The remote description MUST be set 
            prior to calling this method.
            </summary>
            <param name="connectionAddress">Optional. If set this address will be used as 
            the SDP Connection address. If not specified the Operating System routing table
            will be used to lookup the address used to connect to the SDP connection address
            from the remote offer. Any and IPv6Any are special cases. If they are set the respective
            Internet facing IPv4 or IPv6 address will be used.</param>
            <returns>A task that when complete contains the SDP answer.</returns>
            <remarks>As specified in https://tools.ietf.org/html/rfc3264#section-6.1.
             "If the answerer has no media formats in common for a particular
              offered stream, the answerer MUST reject that media stream by setting
              the port to zero."
            </remarks>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.SetRemoteDescription(SIPSorcery.SIP.App.SdpType,SIPSorcery.Net.SDP)">
            <summary>
            Sets the remote SDP description for this session.
            </summary>
            <param name="sdpType">Whether the remote SDP is an offer or answer.</param>
            <param name="sessionDescription">The SDP that will be set as the remote description.</param>
            <returns>If successful an OK enum result. If not an enum result indicating the failure cause.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.SetMediaStreamStatus(SIPSorcery.Net.SDPMediaTypesEnum,SIPSorcery.Net.MediaStreamStatusEnum)">
            <summary>
            Sets the stream status on the primary local audio or primary video media track.
            </summary>
            <param name="kind">The type of the media track. Must be audio or video.</param>
            <param name="status">The stream status for the media track.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.GetAnnouncementRTPDestination(SIPSorcery.Net.SDPMediaAnnouncement,System.Net.IPAddress)">
            <summary>
            Gets the RTP end point for an SDP media announcement from the remote peer.
            </summary>
            <param name="announcement">The media announcement to get the connection address for.</param>
            <param name="connectionAddress">The remote SDP session level connection address. Will be null if not available.</param>
            <returns>An IP end point for an SDP media announcement from the remote peer.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.addSingleTrack(System.Boolean)">
            <summary>
            Used for child classes that require a single RTP channel for all RTP (audio and video)
            and RTCP communications.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.addTrack(SIPSorcery.Net.MediaStreamTrack)">
            <summary>
            Adds a media track to this session. A media track represents an audio or video
            stream and can be a local (which means we're sending) or remote (which means
            we're receiving).
            </summary>
            <param name="track">The media track to add to the session.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.removeTrack(SIPSorcery.Net.MediaStreamTrack)">
            <summary>
            Removes a media track from this session. A media track represents an audio or video
            stream and can be a local (which means we're sending) or remote (which means
            we're receiving).
            </summary>
            <param name="track">The media track to add to the session.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.RemoveLocalTrack(SIPSorcery.Net.MediaStreamTrack)">
            <summary>
            Removes a local media stream to this session.
            </summary>
            <param name="track">The local track to remove.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.RemoveRemoteTrack(SIPSorcery.Net.MediaStreamTrack)">
            <summary>
            Removes a remote media stream to this session.
            </summary>
            <param name="track">The remote track to remove.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.AddLocalTrack(SIPSorcery.Net.MediaStreamTrack)">
            <summary>
            Adds a local media stream to this session. Local media tracks should be added by the
            application to control what session description offers and answers can be made as
            well as being used to match up with remote tracks.
            </summary>
            <param name="track">The local track to add.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.AddRemoteTrack(SIPSorcery.Net.MediaStreamTrack)">
            <summary>
            Adds a remote media stream to this session. Typically the only way remote tracks
            should get added is from setting the remote session description. Adding a remote
            track does not cause the creation of any local resources.
            </summary>
            <param name="track">The remote track to add.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.SetLocalTrackStreamStatus(SIPSorcery.Net.MediaStreamTrack,SIPSorcery.Net.MediaStreamStatusEnum,System.Net.IPEndPoint)">
            <summary>
            Adjust the stream status of the local media tracks based on the remote tracks.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.GetSessionDescription(System.Collections.Generic.List{SIPSorcery.net.RTP.MediaStream},System.Net.IPAddress)">
            <summary>
            Generates a session description from the provided list of MediaStream.
            </summary>
            <param name="mediaStreamList">The list of tracks to generate the session description for.</param>
            <param name="connectionAddress">Optional. If set this address will be used as 
            the SDP Connection address. If not specified the Internet facing address will
            be used. IPAddress.Any and IPAddress. Any and IPv6Any are special cases. If they are set the respective
            Internet facing IPv4 or IPv6 address will be used.</param>
            <returns>A session description payload.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.CreateRtpChannel">
            <summary>
            Creates a new RTP channel (which manages the UDP socket sending and receiving RTP
            packets) for use with this session.
            </summary>
            <returns>A new RTPChannel instance.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.GetMediaStreams">
            <summary>
            Gets the media streams available in this session. Will only be audio, video or both.
            media streams represent an audio or video source that we are sending to the remote party.
            </summary>
            <returns>A list of the local tracks that have been added to this session.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.Start">
            <summary>
            Starts the RTCP session(s) that monitor this RTP session.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.SendAudio(System.UInt32,System.Byte[])">
            <summary>
            Sends an audio sample to the remote peer. (on the primary one)
            </summary>
            <param name="durationRtpUnits">The duration in RTP timestamp units of the audio sample. This
            value is added to the previous RTP timestamp when building the RTP header.</param>
            <param name="sample">The audio sample to set as the RTP packet payload.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.SendVideo(System.UInt32,System.Byte[])">
            <summary>
            Sends a video sample to the remote peer. (on the primary one)
            </summary>
            <param name="durationRtpUnits">The duration in RTP timestamp units of the video sample. This
            value is added to the previous RTP timestamp when building the RTP header.</param>
            <param name="sample">The video sample to set as the RTP packet payload.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.SendDtmf(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Sends a DTMF toneas an RTP event to the remote party. (on the primary one)
            </summary>
            <param name="key">The DTMF tone to send.</param>
            <param name="ct">RTP events can span multiple RTP packets. This token can
            be used to cancel the send.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.Close(System.String)">
            <summary>
            Close the session and RTP channel.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.GetMediaStream(SIPSorcery.Net.RTCPCompoundPacket)">
            <summary>
            Attempts to get MediaStream that matches a received RTCP report.
            </summary>
            <param name="rtcpPkt">The RTCP compound packet received from the remote party.</param>
            <returns>If a match could be found an SSRC the MediaStream otherwise null.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.SendRtpRaw(SIPSorcery.Net.SDPMediaTypesEnum,System.Byte[],System.UInt32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Allows additional control for sending raw RTP payloads (on the primary one). No framing or other processing is carried out.
            </summary>
            <param name="mediaType">The media type of the RTP packet being sent. Must be audio or video.</param>
            <param name="payload">The RTP packet payload.</param>
            <param name="timestamp">The timestamp to set on the RTP header.</param>
            <param name="markerBit">The value to set on the RTP header marker bit, should be 0 or 1.</param>
            <param name="payloadTypeID">The payload ID to set in the RTP header.</param>
            <param name="seqNum">The sequence number of the packet.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.SendRtpRaw(SIPSorcery.Net.SDPMediaTypesEnum,System.Byte[],System.UInt32,System.Int32,System.Int32)">
            <summary>
            Allows additional control for sending raw RTP payloads (on the primary one). No framing or other processing is carried out.
            </summary>
            <param name="mediaType">The media type of the RTP packet being sent. Must be audio or video.</param>
            <param name="payload">The RTP packet payload.</param>
            <param name="timestamp">The timestamp to set on the RTP header.</param>
            <param name="markerBit">The value to set on the RTP header marker bit, should be 0 or 1.</param>
            <param name="payloadTypeID">The payload ID to set in the RTP header.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.SendRtcpRaw(SIPSorcery.Net.SDPMediaTypesEnum,System.Byte[])">
            <summary>
            Allows additional control for sending raw RTCP payloads (on the primary one).
            </summary>
            <param name="mediaType">The media type of the RTCP packet being sent. Must be audio or video.</param>
            <param name="payload">The RTCP packet payload.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.SetDestination(SIPSorcery.Net.SDPMediaTypesEnum,System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Sets the remote end points for a media type supported by this RTP session. (on the primary one)
            </summary>
            <param name="mediaType">The media type, must be audio or video, to set the remote end point for.</param>
            <param name="rtpEndPoint">The remote end point for RTP packets corresponding to the media type.</param>
            <param name="rtcpEndPoint">The remote end point for RTCP packets corresponding to the media type.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.SendRtcpFeedback(SIPSorcery.Net.SDPMediaTypesEnum,SIPSorcery.Net.RTCPFeedback)">
            <summary>
            Allows sending of RTCP feedback reports (on the primary one)
            </summary>
            <param name="mediaType">The media type of the RTCP report  being sent. Must be audio or video.</param>
            <param name="feedback">The feedback report to send.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.SendRtcpReport(SIPSorcery.Net.SDPMediaTypesEnum,SIPSorcery.Net.RTCPCompoundPacket)">
            <summary>
            Sends the RTCP report to the remote call party. (on the primary one)
            </summary>
            <param name="report">RTCP report to send.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.OnRTPChannelClosed(System.String)">
            <summary>
            Event handler for the RTP channel closure.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.Dispose(System.Boolean)">
            <summary>
            Close the session if the instance is out of scope.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTPSession.Dispose">
            <summary>
            Close the session if the instance is out of scope.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RtpSecureMediaOptionEnum.None">
            <summary>
            Secure media not used.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RtpSecureMediaOptionEnum.DtlsSrtp">
            <summary>
            Secure media controled by DtlsSrtp for WebRTC.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RtpSecureMediaOptionEnum.SdpCryptoNegotiation">
            <summary>
            Secure media negotiated with SDP crypto attributes.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RtpSessionConfig.IsMediaMultiplexed">
            <summary>
            If true only a single RTP socket will be used for both audio
            and video (standard case for WebRTC). If false two separate RTP sockets will be used for
            audio and video (standard case for VoIP).
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RtpSessionConfig.IsRtcpMultiplexed">
            <summary>
            If true RTCP reports will be multiplexed with RTP on a single channel.
            If false (standard mode) then a separate socket is used to send and receive RTCP reports.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RtpSessionConfig.RtpSecureMediaOption">
            <summary>
            Select type of secure media to use.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RtpSessionConfig.BindAddress">
            <summary>
            Optional. If specified this address will be used as the bind address for any RTP
            and control sockets created. Generally this address does not need to be set. The default behaviour
            is to bind to [::] or 0.0.0.0,d depending on system support, which minimises network routing
            causing connection issues.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RtpSessionConfig.BindPort">
            <summary>
            Optional. If specified a single attempt will be made to bind the RTP socket
            on this port. It's recommended to leave this parameter as the default of 0 to let the Operating
            System select the port number.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RtpSessionConfig.RtpPortRange">
            <summary>
            Optional. If specified, overwrites BindPort and calls the PortRange whenever an RTP-Port
            should be created.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.Mjpeg.CreateQuantizationTables(System.UInt32,System.UInt32,System.Byte)">
            <summary>
            Creates a Luma and Chroma Table in ZigZag order using the default quantizer
            </summary>
            <param name="Q">The quality factor</param>
            <returns>64 luma bytes and 64 chroma</returns>
        </member>
        <member name="M:SIPSorcery.Net.Mjpeg.CreateQuantizationTablesMarker(System.ArraySegment{System.Byte},System.Byte)">
            <summary>
            Creates a Jpeg QuantizationTableMarker for each table given in the tables
            </summary>
            <param name="tables">The tables verbatim, either 1 or 2 (Luminance and Chrominance)</param>
            <returns>The table with marker and prefix</returns>
        </member>
        <member name="M:SIPSorcery.Net.Mjpeg.ProcessMjpegFrame(System.Collections.Generic.List{SIPSorcery.Net.RTPPacket})">
            <summary>
            Writes the packets to a memory stream and creates the default header and quantization tables if necessary.
            Assigns Image from the result
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTSPTransportHeader">
            <summary>
            Represents the Transport header used in RTSP requests and responses.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTSPTransportHeader.GetClientRTPPort">
            <summary>
            Attempts to determine the client RTP port based on the transport header attributes.
            </summary>
            <returns>The client port that RTP packets should be sent to. If the port cannot be determined then 0.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTSPTransportHeader.GetClientRtcpPort">
            <summary>
            Attempts to determine the client RTCP port based on the transport header attributes.
            </summary>
            <returns>The client port that RTCP packets should be sent to. If the port cannot be determined then 0.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTSPTransportHeader.GetServerRTPPort">
            <summary>
            Attempts to determine the server RTP port based on the transport header attributes.
            </summary>
            <returns>The server port that RTP packets should be sent to. If the port cannot be determined then 0.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTSPTransportHeader.GetServerRtcpPort">
            <summary>
            Attempts to determine the server Rtcp port based on the transport header attributes.
            </summary>
            <returns>The server port that RTCP packets should be sent to. If the port cannot be determined then 0.</returns>
        </member>
        <member name="T:SIPSorcery.Net.RTSPRequest">
            <summary>
            RFC2326 6.1:
            Request-Line = Method SP Request-URI SP RTSP-Version CRLF
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTSPResponse">
            <summary>
            RFC2326 7.1:
            Status-Line =   RTSP-Version SP Status-Code SP Reason-Phrase CRLF
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTSPURL">
            <summary>
            RFC2326 3.2:
            <code>
            <![CDATA[
            rtsp_URL  =   ( "rtsp:" | "rtspu:" )
                        "//" host [ ":" port ] [ abs_path ]
                        host      =   <A legal Internet host domain name of IP address (in dotted decimal form), as defined by Section 2.1 of RFC 1123 cite{rfc1123}>
                        port      =   *DIGIT
            abs_path is defined in RFC2616 (HTTP 1.1) 3.2.1 which refers to RFC2396 (URI Generic Syntax) 
                       abs_path      = "/"  path_segments
                       path_segments = segment *( "/" segment )
                       segment       = *pchar *( ";" param )
                       param         = *pchar
                       pchar         = unreserved | escaped | ":" | "@" | "&" | "=" | "+" | "$" | ","
            ]]>
            </code>
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpAbortChunk">
            <summary>
            The ABORT chunk is sent to the peer of an association to close the
            association.The ABORT chunk may contain Cause Parameters to inform
            the receiver about the reason of the abort.DATA chunks MUST NOT be
            bundled with ABORT.Control chunks (except for INIT, INIT ACK, and
            SHUTDOWN COMPLETE) MAY be bundled with an ABORT, but they MUST be
            placed before the ABORT in the SCTP packet or they will be ignored by
            the receiver.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.3.7
            </remarks>
        </member>
        <member name="M:SIPSorcery.Net.SctpAbortChunk.#ctor(System.Boolean)">
            <summary>
            Creates a new ABORT chunk.
            </summary>
            <param name="verificationTagBit">If set to true sets a bit in the chunk header to indicate
            the sender filled in the Verification Tag expected by the peer.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpAbortChunk.GetAbortReason">
            <summary>
            Gets the user supplied abort reason if available.
            </summary>
            <returns>The abort reason or null if not present.</returns>
        </member>
        <member name="T:SIPSorcery.Net.SctpChunkType">
            <summary>
            The values of the Chunk Types.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.2
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.SctpUnrecognisedChunkActions">
            <summary>
            The actions required for unrecognised chunks. The byte value corresponds to the highest 
            order two bits of the chunk type value.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.2
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.SctpUnrecognisedChunkActions.Stop">
            <summary>
            Stop processing this SCTP packet and discard it, do not process any further chunks within it.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpUnrecognisedChunkActions.StopAndReport">
            <summary>
            Stop processing this SCTP packet and discard it, do not process any further chunks within it, and report the
            unrecognized chunk in an 'Unrecognized Chunk Type'.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpUnrecognisedChunkActions.Skip">
            <summary>
            Skip this chunk and continue processing.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpUnrecognisedChunkActions.SkipAndReport">
            <summary>
            Skip this chunk and continue processing, but report in an ERROR chunk using the 'Unrecognized Chunk Type' cause of
            error.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpChunk.ChunkType">
            <summary>
            This field identifies the type of information contained in the
            Chunk Value field.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpChunk.ChunkFlags">
            <summary>
            The usage of these bits depends on the Chunk type as given by the
            Chunk Type field.Unless otherwise specified, they are set to 0
            on transmit and are ignored on receipt.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpChunk.ChunkValue">
            <summary>
            The Chunk Value field contains the actual information to be
            transferred in the chunk.The usage and format of this field is
            dependent on the Chunk Type.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpChunk.KnownType">
            <summary>
            If recognised returns the known chunk type. If not recognised returns null.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpChunk.UnrecognizedPeerParameters">
            <summary>
            Records any unrecognised parameters received from the remote peer and are classified
            as needing to be reported. These can be sent back to the remote peer if needed.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpChunk.#ctor">
            <summary>
            This constructor is only intended to be used when parsing the specialised 
            chunk types. Because they are being parsed from a buffer nothing is known
            about them and this constructor allows starting from a blank slate.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpChunk.GetChunkLength(System.Boolean)">
            <summary>
            Calculates the length for the chunk. Chunks are required
            to be padded out to 4 byte boundaries. This method gets overridden 
            by specialised SCTP chunks that have their own fields that determine the length.
            </summary>
            <param name="padded">If true the length field will be padded to a 4 byte boundary.</param>
            <returns>The length of the chunk.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpChunk.ParseFirstWord(System.Byte[],System.Int32)">
            <summary>
            The first 32 bits of all chunks represent the same 3 fields. This method
            parses those fields and sets them on the current instance.
            </summary>
            <param name="buffer">The buffer holding the serialised chunk.</param>
            <param name="posn">The position in the buffer that indicates the start of the chunk.</param>
            <returns>The chunk length value.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpChunk.WriteChunkHeader(System.Byte[],System.Int32)">
            <summary>
            Writes the chunk header to the buffer. All chunks use the same three
            header fields.
            </summary>
            <param name="buffer">The buffer to write the chunk header to.</param>
            <param name="posn">The position in the buffer to write at.</param>
            <returns>The padded length of this chunk.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpChunk.WriteTo(System.Byte[],System.Int32)">
            <summary>
            Serialises the chunk to a pre-allocated buffer. This method gets overridden 
            by specialised SCTP chunks that have their own parameters and need to be serialised
            differently.
            </summary>
            <param name="buffer">The buffer to write the serialised chunk bytes to. It
            must have the required space already allocated.</param>
            <param name="posn">The position in the buffer to write to.</param>
            <returns>The number of bytes, including padding, written to the buffer.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpChunk.GotUnrecognisedParameter(SIPSorcery.Net.SctpTlvChunkParameter)">
            <summary>
            Handler for processing an unrecognised chunk parameter.
            </summary>
            <param name="chunkParameter">The Type-Length-Value (TLV) formatted chunk that was
            not recognised.</param>
            <returns>True if further parameter parsing for this chunk should be stopped. 
            False to continue.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpChunk.ParseBaseChunk(System.Byte[],System.Int32)">
            <summary>
            Parses a simple chunk and does not attempt to process any chunk value.
            This method is suitable when:
             - the chunk type consists only of the 4 byte header and has 
               no fixed or variable parameters set.
            </summary>
            <param name="buffer">The buffer holding the serialised chunk.</param>
            <param name="posn">The position to start parsing at.</param>
            <returns>An SCTP chunk instance.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpChunk.GetParameters(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Chunks can optionally contain Type-Length-Value (TLV) parameters. This method
            parses any variable length parameters from a chunk's value.
            </summary>
            <param name="buffer">The buffer holding the serialised chunk.</param>
            <param name="posn">The position in the buffer to start parsing variable length
            parameters from.</param>
            <param name="length">The length of the TLV chunk parameters in the buffer.</param>
            <returns>A list of chunk parameters. Can be empty.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpChunk.Parse(System.Byte[],System.Int32)">
            <summary>
            Parses an SCTP chunk from a buffer.
            </summary>
            <param name="buffer">The buffer holding the serialised chunk.</param>
            <param name="posn">The position to start parsing at.</param>
            <returns>An SCTP chunk instance.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpChunk.GetChunkLengthFromHeader(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Extracts the padded length field from a serialised chunk buffer.
            </summary>
            <param name="buffer">The buffer holding the serialised chunk.</param>
            <param name="posn">The start position of the serialised chunk.</param>
            <param name="padded">If true the length field will be padded to a 4 byte boundary.</param>
            <returns>The padded length of the serialised chunk.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpChunk.GetUnrecognisedChunkAction(System.UInt16)">
            <summary>
            If this chunk is unrecognised then this field dictates how the remainder of the 
            SCTP packet should be handled.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpChunk.CopyUnrecognisedChunk(System.Byte[],System.Int32)">
            <summary>
            Copies an unrecognised chunk to a byte buffer and returns it. This method is
            used to assist in reporting unrecognised chunk types.
            </summary>
            <param name="buffer">The buffer containing the chunk.</param>
            <param name="posn">The position in the buffer that the unrecognised chunk starts.</param>
            <returns>A new buffer containing a copy of the chunk.</returns>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataChunk.EmptyDataChunk">
            <summary>
            An empty data chunk. The main use is to indicate a DATA chunk has
            already been delivered to the Upper Layer Protocol (ULP) in 
            <see cref="T:SIPSorcery.Net.SctpDataReceiver"/>.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataChunk.FIXED_PARAMETERS_LENGTH">
            <summary>
            The length in bytes of the fixed parameters used by the DATA chunk.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpDataChunk.Unordered">
            <summary>
            The (U)nordered bit, if set to true, indicates that this is an
            unordered DATA chunk.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpDataChunk.Begining">
            <summary>
            The (B)eginning fragment bit, if set, indicates the first fragment
            of a user message.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpDataChunk.Ending">
            <summary>
            The (E)nding fragment bit, if set, indicates the last fragment of
            a user message.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataChunk.TSN">
            <summary>
            This value represents the Transmission Sequence Number (TSN) for
            this DATA chunk.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataChunk.StreamID">
            <summary>
            Identifies the stream to which the following user data belongs.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataChunk.StreamSeqNum">
            <summary>
            This value represents the Stream Sequence Number of the following
            user data within the stream using the <seealso cref="F:SIPSorcery.Net.SctpDataChunk.StreamID"/>.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataChunk.PPID">
            <summary>
            Payload Protocol Identifier (PPID). This value represents an application 
            (or upper layer) specified protocol identifier.This value is passed to SCTP 
            by its upper layer and sent to its peer.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataChunk.UserData">
            <summary>
            This is the payload user data.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataChunk.#ctor(System.Boolean,System.Boolean,System.Boolean,System.UInt32,System.UInt16,System.UInt16,System.UInt32,System.Byte[])">
            <summary>
            Creates a new DATA chunk.
            </summary>
            <param name="isUnordered">Must be set to true if the application wants to send this data chunk
            without requiring it to be delivered to the remote part in order.</param>
            <param name="isBegining">Must be set to true for the first chunk in a user data payload.</param>
            <param name="isEnd">Must be set to true for the last chunk in a user data payload. Note that
            <paramref name="isBegining"/> and <paramref name="isEnd"/> must both be set to true when the full payload
            is being sent in a single data chunk.</param>
            <param name="tsn">The Transmission Sequence Number for this chunk.</param>
            <param name="streamID">Optional. The stream ID for this data chunk.</param>
            <param name="seqnum">Optional. The stream sequence number for this send. Set to 0 for unordered streams.</param>
            <param name="ppid">Optional. The payload protocol ID for this data chunk.</param>
            <param name="data">The data to send.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataChunk.GetChunkLength(System.Boolean)">
            <summary>
            Calculates the length for DATA chunk.
            </summary>
            <param name="padded">If true the length field will be padded to a 4 byte boundary.</param>
            <returns>The length of the chunk.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataChunk.WriteTo(System.Byte[],System.Int32)">
            <summary>
            Serialises a DATA chunk to a pre-allocated buffer.
            </summary>
            <param name="buffer">The buffer to write the serialised chunk bytes to. It
            must have the required space already allocated.</param>
            <param name="posn">The position in the buffer to write to.</param>
            <returns>The number of bytes, including padding, written to the buffer.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataChunk.ParseChunk(System.Byte[],System.Int32)">
            <summary>
            Parses the DATA chunk fields
            </summary>
            <param name="buffer">The buffer holding the serialised chunk.</param>
            <param name="posn">The position to start parsing at.</param>
        </member>
        <member name="T:SIPSorcery.Net.SctpErrorCauseCode">
            <remarks>
            Defined in https://tools.ietf.org/html/rfc4960#section-3.3.10
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.SctpCauseOnlyError">
            <summary>
            This structure captures all SCTP errors that don't have an additional 
            parameter.
            </summary>
            <remarks>
            Out of Resource: https://tools.ietf.org/html/rfc4960#section-3.3.10.4
            Invalid Mandatory Parameter: https://tools.ietf.org/html/rfc4960#section-3.3.10.7
            Cookie Received While Shutting Down: https://tools.ietf.org/html/rfc4960#section-3.3.10.10
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.SctpErrorInvalidStreamIdentifier">
            <summary>
            Invalid Stream Identifier: Indicates endpoint received a DATA chunk
            sent to a nonexistent stream.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.3.10.1
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.SctpErrorInvalidStreamIdentifier.StreamID">
            <summary>
            The invalid stream identifier.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpErrorMissingMandatoryParameter">
            <summary>
            Indicates that one or more mandatory Type-Length-Value (TLV) format
            parameters are missing in a received INIT or INIT ACK.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.3.10.2
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.SctpErrorStaleCookieError">
            <summary>
            Indicates the receipt of a valid State Cookie that has expired.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.3.10.3
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.SctpErrorStaleCookieError.MeasureOfStaleness">
            <summary>
            The difference, in microseconds, between the current time and the time the State Cookie expired.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpErrorUnresolvableAddress">
            <summary>
            Indicates that the sender is not able to resolve the specified address parameter
            (e.g., type of address is not supported by the sender).  This is usually sent in
            combination with or within an ABORT.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.3.10.5
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.SctpErrorUnresolvableAddress.UnresolvableAddress">
            <summary>
            The Unresolvable Address field contains the complete Type, Length,
            and Value of the address parameter(or Host Name parameter) that
            contains the unresolvable address or host name.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpErrorUnrecognizedChunkType">
            <summary>
            Indicates that the sender is out of resource.  This
            is usually sent in combination with or within an ABORT.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.3.10.6
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.SctpErrorUnrecognizedChunkType.UnrecognizedChunk">
            <summary>
            The Unrecognized Chunk field contains the unrecognized chunk from
            the SCTP packet complete with Chunk Type, Chunk Flags, and Chunk
            Length.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpErrorUnrecognizedParameters">
            <summary>
            This error cause is returned to the originator of the INIT ACK chunk 
            if the receiver does not recognize one or more optional variable parameters in 
            the INIT ACK chunk.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.3.10.8
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.SctpErrorUnrecognizedParameters.UnrecognizedParameters">
            <summary>
            The Unrecognized Parameters field contains the unrecognized
            parameters copied from the INIT ACK chunk complete with TLV. This
            error cause is normally contained in an ERROR chunk bundled with
            the COOKIE ECHO chunk when responding to the INIT ACK, when the
            sender of the COOKIE ECHO chunk wishes to report unrecognized
            parameters.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpErrorNoUserData">
            <summary>
            This error cause is returned to the originator of a
            DATA chunk if a received DATA chunk has no user data.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.3.10.9
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.SctpErrorNoUserData.TSN">
            <summary>
            The TSN value field contains the TSN of the DATA chunk received
            with no user data field.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpErrorRestartAssociationWithNewAddress">
            <summary>
            An INIT was received on an existing association.But the INIT added addresses to the
            association that were previously NOT part of the association. The new addresses are 
            listed in the error code.This ERROR is normally sent as part of an ABORT refusing the INIT.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.3.10.11
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.SctpErrorRestartAssociationWithNewAddress.NewAddressTLVs">
            <summary>
            Each New Address TLV is an exact copy of the TLV that was found
            in the INIT chunk that was new, including the Parameter Type and the
            Parameter Length.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpErrorUserInitiatedAbort">
            <summary>
            This error cause MAY be included in ABORT chunks that are sent
            because of an upper-layer request.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.3.10.12
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.SctpErrorUserInitiatedAbort.AbortReason">
            <summary>
            Optional descriptive abort reason from Upper Layer Protocol (ULP).
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpErrorProtocolViolation">
            <summary>
            This error cause MAY be included in ABORT chunks that are sent
            because an SCTP endpoint detects a protocol violation of the peer
            that is not covered by any of the more specific error causes
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.3.10.13
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.SctpErrorProtocolViolation.AdditionalInformation">
            <summary>
            Optional description of the violation.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpErrorChunk">
            <summary>
            An endpoint sends this chunk to its peer endpoint to notify it of
            certain error conditions. It contains one or more error causes. An
            Operation Error is not considered fatal in and of itself, but may be
            used with an ABORT chunk to report a fatal condition.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpErrorChunk.#ctor(SIPSorcery.Net.SctpChunkType,System.Boolean)">
            <summary>
            This constructor is for the ABORT chunk type which is identical to the 
            ERROR chunk except for the optional verification tag bit.
            </summary>
            <param name="chunkType">The chunk type, typically ABORT.</param>
            <param name="verificationTagBit"></param>
        </member>
        <member name="M:SIPSorcery.Net.SctpErrorChunk.#ctor(SIPSorcery.Net.SctpErrorCauseCode)">
            <summary>
            Creates a new ERROR chunk.
            </summary>
            <param name="errorCauseCode">The initial error cause code to set on this chunk.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpErrorChunk.#ctor(SIPSorcery.Net.ISctpErrorCause)">
            <summary>
            Creates a new ERROR chunk.
            </summary>
            <param name="errorCause">The initial error cause to set on this chunk.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpErrorChunk.AddErrorCause(SIPSorcery.Net.ISctpErrorCause)">
            <summary>
            Adds an additional error cause parameter to the chunk.
            </summary>
            <param name="errorCause">The additional error cause to add to the chunk.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpErrorChunk.GetChunkLength(System.Boolean)">
            <summary>
            Calculates the length for the chunk.
            </summary>
            <param name="padded">If true the length field will be padded to a 4 byte boundary.</param>
            <returns>The padded length of the chunk.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpErrorChunk.WriteTo(System.Byte[],System.Int32)">
            <summary>
            Serialises the ERROR chunk to a pre-allocated buffer.
            </summary>
            <param name="buffer">The buffer to write the serialised chunk bytes to. It
            must have the required space already allocated.</param>
            <param name="posn">The position in the buffer to write to.</param>
            <returns>The number of bytes, including padding, written to the buffer.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpErrorChunk.ParseChunk(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Parses the ERROR chunk fields.
            </summary>
            <param name="buffer">The buffer holding the serialised chunk.</param>
            <param name="posn">The position to start parsing at.</param>
        </member>
        <member name="T:SIPSorcery.Net.SctpInitChunkParameterType">
            <summary>
            The optional or variable length Type-Length-Value (TLV) parameters
            that can be used with INIT and INIT ACK chunks.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpInitChunk">
            <summary>
            This class is used to represent both an INIT and INIT ACK chunk.
            The only structural difference between them is the INIT ACK requires
            the Cookie variable parameter to be set.
            The INIT chunk is used to initiate an SCTP association between two
            endpoints. The INIT ACK chunk is used to respond to an incoming
            INIT chunk from a remote peer.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpInitChunk.InitiateTag">
            <summary>
            The receiver of the INIT (the responding end) records the value of
            the Initiate Tag parameter.This value MUST be placed into the
            Verification Tag field of every SCTP packet that the receiver of
            the INIT transmits within this association.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpInitChunk.ARwnd">
            <summary>
            Advertised Receiver Window Credit. This value represents the dedicated 
            buffer space, in number of bytes, the sender of the INIT has reserved in 
            association with this window.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpInitChunk.NumberOutboundStreams">
            <summary>
            Defines the number of outbound streams the sender of this INIT
            chunk wishes to create in this association.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpInitChunk.NumberInboundStreams">
            <summary>
            Defines the maximum number of streams the sender of this INIT
            chunk allows the peer end to create in this association.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpInitChunk.InitialTSN">
            <summary>
            The initial Transmission Sequence Number (TSN) that the sender will use.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpInitChunk.Addresses">
            <summary>
            Optional list of IP address parameters that can be included in INIT chunks.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpInitChunk.CookiePreservative">
            <summary>
            The sender of the INIT shall use this parameter to suggest to the
            receiver of the INIT for a longer life-span of the State Cookie.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpInitChunk.HostnameAddress">
            <summary>
            The sender of INIT uses this parameter to pass its Host Name (in
            place of its IP addresses) to its peer.The peer is responsible for
            resolving the name.Using this parameter might make it more likely
            for the association to work across a NAT box.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpInitChunk.SupportedAddressTypes">
            <summary>
            The sender of INIT uses this parameter to list all the address types
            it can support. Options are IPv4 (5), IPv6 (6) and Hostname (11).
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpInitChunk.StateCookie">
            <summary>
            INIT ACK only. Mandatory. This parameter value MUST contain all the necessary state and
            parameter information required for the sender of this INIT ACK to create the association, 
            along with a Message Authentication Code (MAC). 
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpInitChunk.UnrecognizedParameters">
            <summary>
            INIT ACK only. Optional. This parameter is returned to the originator of the INIT chunk 
            if the INIT contains an unrecognized parameter that has a value that indicates it should
            be reported to the sender. This parameter value field will contain unrecognized parameters 
            copied from the  INIT chunk complete with Parameter Type, Length, and Value fields.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpInitChunk.#ctor(SIPSorcery.Net.SctpChunkType,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Initialises the chunk as either INIT or INIT ACK.
            </summary>
            <param name="initChunkType">Either INIT or INIT ACK.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpInitChunk.GetVariableParametersLength(System.Boolean)">
            <summary>
            Gets the length of the optional and variable length parameters for this
            INIT or INIT ACK chunk.
            </summary>
            <param name="padded">If true the length field will be padded to a 4 byte boundary.</param>
            <returns>The length of the optional and variable length parameters.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpInitChunk.GetVariableParameters">
            <summary>
            Writes the optional and variable length parameters to a Type-Length-Value (TLV)
            parameter list.
            </summary>
            <returns>A TLV parameter list holding the optional and variable length parameters.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpInitChunk.GetChunkLength(System.Boolean)">
            <summary>
            Calculates the length for INIT and INIT ACK chunks.
            </summary>
            <param name="padded">If true the length field will be padded to a 4 byte boundary.</param>
            <returns>The length of the chunk.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpInitChunk.WriteTo(System.Byte[],System.Int32)">
            <summary>
            Serialises an INIT or INIT ACK chunk to a pre-allocated buffer.
            </summary>
            <param name="buffer">The buffer to write the serialised chunk bytes to. It
            must have the required space already allocated.</param>
            <param name="posn">The position in the buffer to write to.</param>
            <returns>The number of bytes, including padding, written to the buffer.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpInitChunk.ParseChunk(System.Byte[],System.Int32)">
            <summary>
            Parses the INIT or INIT ACK chunk fields
            </summary>
            <param name="buffer">The buffer holding the serialised chunk.</param>
            <param name="posn">The position to start parsing at.</param>
        </member>
        <member name="T:SIPSorcery.Net.SctpSackChunk">
            <summary>
            This chunk is sent to the peer endpoint to acknowledge received DATA
            chunks and to inform the peer endpoint of gaps in the received
            sub-sequences of DATA chunks as represented by their Transmission
            Sequence Numbers (TSN).
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpSackChunk.CumulativeTsnAck">
            <summary>
            This parameter contains the TSN of the last chunk received in
            sequence before any gaps.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpSackChunk.ARwnd">
            <summary>
            Advertised Receiver Window Credit. This field indicates the updated 
            receive buffer space in bytes of the sender of this SACK
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpSackChunk.GapAckBlocks">
            <summary>
            The gap ACK blocks. Each entry represents a gap in the forward out of order
            TSNs received.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpSackChunk.DuplicateTSN">
            <summary>
            Indicates the number of times a TSN was received in duplicate
            since the last SACK was sent.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpSackChunk.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Creates a new SACK chunk.
            </summary>
            <param name="cumulativeTsnAck">The last TSN that was received from the remote party.</param>
            <param name="arwnd">The current Advertised Receiver Window Credit.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpSackChunk.GetChunkLength(System.Boolean)">
            <summary>
            Calculates the padded length for the chunk.
            </summary>
            <param name="padded">If true the length field will be padded to a 4 byte boundary.</param>
            <returns>The length of the chunk.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpSackChunk.WriteTo(System.Byte[],System.Int32)">
            <summary>
            Serialises the SACK chunk to a pre-allocated buffer.
            </summary>
            <param name="buffer">The buffer to write the serialised chunk bytes to. It
            must have the required space already allocated.</param>
            <param name="posn">The position in the buffer to write to.</param>
            <returns>The number of bytes, including padding, written to the buffer.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpSackChunk.ParseChunk(System.Byte[],System.Int32)">
            <summary>
            Parses the SACK chunk fields.
            </summary>
            <param name="buffer">The buffer holding the serialised chunk.</param>
            <param name="posn">The position to start parsing at.</param>
        </member>
        <member name="T:SIPSorcery.Net.SctpShutdownChunk">
            <summary>
            An endpoint in an association MUST use this chunk to initiate a
            graceful close of the association with its peer.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.3.8
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.SctpShutdownChunk.CumulativeTsnAck">
            <summary>
            This parameter contains the TSN of the last chunk received in
            sequence before any gaps.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpShutdownChunk.#ctor(System.Nullable{System.UInt32})">
            <summary>
            Creates a new SHUTDOWN chunk.
            </summary>
            <param name="cumulativeTsnAck">The last TSN that was received from the remote party.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpShutdownChunk.GetChunkLength(System.Boolean)">
            <summary>
            Calculates the padded length for the chunk.
            </summary>
            <param name="padded">If true the length field will be padded to a 4 byte boundary.</param>
            <returns>The padded length of the chunk.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpShutdownChunk.WriteTo(System.Byte[],System.Int32)">
            <summary>
            Serialises the SHUTDOWN chunk to a pre-allocated buffer.
            </summary>
            <param name="buffer">The buffer to write the serialised chunk bytes to. It
            must have the required space already allocated.</param>
            <param name="posn">The position in the buffer to write to.</param>
            <returns>The number of bytes, including padding, written to the buffer.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpShutdownChunk.ParseChunk(System.Byte[],System.Int32)">
            <summary>
            Parses the SHUTDOWN chunk fields.
            </summary>
            <param name="buffer">The buffer holding the serialised chunk.</param>
            <param name="posn">The position to start parsing at.</param>
        </member>
        <member name="T:SIPSorcery.Net.SctpUnrecognisedParameterActions">
            <summary>
            The actions required for unrecognised parameters. The byte value corresponds to the highest 
            order two bits of the parameter type value.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-3.2.1
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.SctpUnrecognisedParameterActions.Stop">
            <summary>
            Stop processing this parameter; do not process any further parameters within this chunk.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpUnrecognisedParameterActions.StopAndReport">
            <summary>
            Stop processing this parameter, do not process any further parameters within this chunk, and report the unrecognized
            parameter in an 'Unrecognized Parameter'.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpUnrecognisedParameterActions.Skip">
            <summary>
            Skip this parameter and continue processing.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpUnrecognisedParameterActions.SkipAndReport">
            <summary>
            Skip this parameter and continue processing but report the unrecognized parameter in an 'Unrecognized Parameter'.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpTlvChunkParameter">
            <summary>
            Represents the a variable length parameter field for use within
            a Chunk. All chunk parameters use the same underlying Type-Length-Value (TLV)
            format but then specialise how the fields are used.
            </summary>
            <remarks>
            From https://tools.ietf.org/html/rfc4960#section-3.2.1 (final section):
            Note that a parameter type MUST be unique
            across all chunks.For example, the parameter type '5' is used to
            represent an IPv4 address. The value '5' then
            is reserved across all chunks to represent an IPv4 address and MUST
            NOT be reused with a different meaning in any other chunk.
            </remarks>
        </member>
        <member name="P:SIPSorcery.Net.SctpTlvChunkParameter.ParameterType">
            <summary>
            The type of the chunk parameter.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpTlvChunkParameter.ParameterValue">
            <summary>
            The information contained in the parameter.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpTlvChunkParameter.UnrecognisedAction">
            <summary>
            If this parameter is unrecognised by the parent chunk then this field dictates
            how it should handle it.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpTlvChunkParameter.#ctor(System.UInt16,System.Byte[])">
            <summary>
            Creates a new chunk parameter instance.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpTlvChunkParameter.GetParameterLength(System.Boolean)">
            <summary>
            Calculates the length for the chunk parameter.
            </summary>
            <param name="padded">If true the length field will be padded to a 4 byte boundary.</param>
            <returns>The length of the chunk. This method gets overridden by specialised SCTP parameters 
            that each have their own fields that determine the length.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTlvChunkParameter.WriteParameterHeader(System.Byte[],System.Int32)">
            <summary>
            Writes the parameter header to the buffer. All chunk parameters use the same two
            header fields.
            </summary>
            <param name="buffer">The buffer to write the chunk parameter header to.</param>
            <param name="posn">The position in the buffer to write at.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpTlvChunkParameter.WriteTo(System.Byte[],System.Int32)">
            <summary>
            Serialises the chunk parameter to a pre-allocated buffer. This method gets overridden 
            by specialised SCTP chunk parameters that have their own data and need to be serialised
            differently.
            </summary>
            <param name="buffer">The buffer to write the serialised chunk parameter bytes to. It
            must have the required space already allocated.</param>
            <param name="posn">The position in the buffer to write to.</param>
            <returns>The number of bytes, including padding, written to the buffer.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTlvChunkParameter.GetBytes">
            <summary>
            Serialises an SCTP chunk parameter to a byte array.
            </summary>
            <returns>The byte array containing the serialised chunk parameter.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTlvChunkParameter.ParseFirstWord(System.Byte[],System.Int32)">
            <summary>
            The first 32 bits of all chunk parameters represent the type and length. This method
            parses those fields and sets them on the current instance.
            </summary>
            <param name="buffer">The buffer holding the serialised chunk parameter.</param>
            <param name="posn">The position in the buffer that indicates the start of the chunk parameter.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpTlvChunkParameter.ParseTlvParameter(System.Byte[],System.Int32)">
            <summary>
            Parses an SCTP Type-Length-Value (TLV) chunk parameter from a buffer.
            </summary>
            <param name="buffer">The buffer holding the serialised TLV chunk parameter.</param>
            <param name="posn">The position to start parsing at.</param>
            <returns>An SCTP TLV chunk parameter instance.</returns>
        </member>
        <member name="T:SIPSorcery.Net.SctpStatus">
            <summary>
            Represents the current status of an SCTP association.
            </summary>
            <remarks>
            The address list items have not been included due to the assumption
            they are not relevant for SCTP encapsulated in UDP.
            The status data is defined on page 115 of the SCTP RFC
            https://tools.ietf.org/html/rfc4960#page-115.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.SctpAssociation">
            <summary>
            An SCTP association represents an established connection between two SCTP endpoints.
            This class also represents the Transmission Control Block (TCB) referred to in RFC4960.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpAssociation.T1_INIT_TIMER_MILLISECONDS">
            <summary>
            Length of time to wait for the INIT ACK response after sending an INIT.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpAssociation.T1_COOKIE_TIMER_MILLISECONDS">
            <summary>
            Length of time to wait for the COOKIE ACK response after sending a COOKIE ECHO.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpAssociation._dataReceiver">
            <summary>
            Handles logic for DATA chunk receives (fragmentation, in order delivery etc).
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpAssociation._dataSender">
            <summary>
            Handles logic for sending DATA chunks (retransmits, windows management etc).
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpAssociation._t1Init">
            <summary>
            T1 init timer to monitor an INIT request sent to a remote peer.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-5.1 (section A)
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.SctpAssociation._t1Cookie">
            <summary>
            T1 init timer to monitor an COOKIE ECHO request sent to a remote peer.
            </summary>
            <remarks>
            https://tools.ietf.org/html/rfc4960#section-5.1 (section C)
            </remarks>
        </member>
        <member name="P:SIPSorcery.Net.SctpAssociation.SendBufferedAmount">
            <summary>
            The total size (in bytes) of outgoing user data queued in the <see cref="T:SIPSorcery.Net.SctpDataSender"/>.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpAssociation.TSN">
            <summary>
            Transaction Sequence Number (TSN). A monotonically increasing number that must be
            included in every DATA chunk.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpAssociation.ID">
            <summary>
            A unique ID for this association. The ID is not part of the SCTP protocol. It
            is provided as a convenience measure in case a transport of application needs
            to keep track of multiple associations.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpAssociation.ARwnd">
            <summary>
            Advertised Receiver Window Credit. This value represents the dedicated 
            buffer space, in number of bytes, that will be used for the receive buffer 
            for this association.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpAssociation.Destination">
            <summary>
            The remote destination end point for this association. The underlying transport
            will supply this field if it is needed (the UDP encapsulation transport needs it,
            the DTSL transport does not).
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpAssociation.State">
            <summary>
            Indicates the current connection state of the association.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.SctpAssociation.OnAssociationStateChanged">
            <summary>
            Event to notify application that the association state has changed.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.SctpAssociation.OnData">
            <summary>
            Event to notify application that user data is available.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.SctpAssociation.OnAbortReceived">
            <summary>
            Event to notify the application that the remote party aborted this
            association.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.SctpAssociation.OnAborted">
            <summary>
            Event to notify the application that an error occurred that caused
            the association to be aborted locally.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.#ctor(SIPSorcery.Net.SctpTransport,System.Net.IPEndPoint,System.UInt16,System.UInt16,System.UInt16,System.Int32,System.UInt16,System.UInt16)">
            <summary>
            Create a new SCTP association instance where the INIT will be generated
            from this end of the connection.
            </summary>
            <param name="sctpTransport">The transport layer doing the actual sending and receiving of
            packets, e.g. UDP, DTLS, raw sockets etc.</param>
            <param name="destination">Optional. The remote destination end point for this association.
            Some transports, such as DTLS, are already established and do not use this parameter.</param>
            <param name="sctpSourcePort">The source port for the SCTP packet header.</param>
            <param name="sctpDestinationPort">The destination port for the SCTP packet header.</param>
            <param name="defaultMTU">The default Maximum Transmission Unit (MTU) for the underlying
            transport. This determines the maximum size of an SCTP packet that will be used with
            the transport.</param>
            <param name="localTransportPort">Optional. The local transport (e.g. UDP or DTLS) port being 
            used for the underlying SCTP transport. This be set on the SCTP association's ID to aid in 
            diagnostics.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.#ctor(SIPSorcery.Net.SctpTransport,SIPSorcery.Net.SctpTransportCookie,System.Int32)">
            <summary>
            Create a new SCTP association instance from the cookie that was previously
            sent to the remote party in an INIT ACK chunk.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.UpdateSourcePort(System.UInt16)">
            <summary>
            Attempts to update the association's SCTP source port.
            </summary>
            <param name="port">The updated source port.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.UpdateDestinationPort(System.UInt16)">
            <summary>
            Attempts to update the association's SCTP destination port.
            </summary>
            <param name="port">The updated destination port.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.Init">
            <summary>
            Attempts to initialise the association by sending an INIT chunk to the remote peer.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.GotCookie(SIPSorcery.Net.SctpTransportCookie)">
            <summary>
            Initialises the association state based on the echoed cookie (the cookie that we sent
            to the remote party and was then echoed back to us). An association can only be initialised
            from a cookie prior to it being used and prior to it ever having entered the established state.
            </summary>
            <param name="cookie">The echoed cookie that was returned from the remote party.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.InitRemoteProperties(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initialises the association's properties that record the state of the remote party.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.OnPacketReceived(SIPSorcery.Net.SctpPacket)">
            <summary>
            Implements the SCTP association state machine.
            </summary>
            <param name="packet">An SCTP packet received from the remote party.</param>
            <remarks>
            SCTP Association State Diagram:
            https://tools.ietf.org/html/rfc4960#section-4
            </remarks>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.SendData(System.UInt16,System.UInt32,System.String)">
            <summary>
            Sends a DATA chunk to the remote peer.
            </summary>
            <param name="streamID">The stream ID to sent the data on.</param>
            <param name="ppid">The payload protocol ID for the data.</param>
            <param name="message">The string data to send.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.SendData(System.UInt16,System.UInt32,System.Byte[])">
            <summary>
            Sends a DATA chunk to the remote peer.
            </summary>
            <param name="streamID">The stream ID to sent the data on.</param>
            <param name="ppid">The payload protocol ID for the data.</param>
            <param name="data">The byte data to send.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.GetControlPacket(SIPSorcery.Net.SctpChunk)">
            <summary>
            Gets an SCTP packet for a control (non-data) chunk.
            </summary>
            <param name="chunk">The control chunk to get a packet for.</param>
            <returns>A single control chunk SCTP packet.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.Shutdown">
            <summary>
            Initiates the shutdown of the association by sending a shutdown
            control chunk to the remote party.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.Abort(SIPSorcery.Net.ISctpErrorCause)">
            <summary>
            Sends an SCTP control packet with an abort chunk to terminate 
            the association.
            </summary>
            <param name="errorCause">The cause of the abort.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.SetState(SIPSorcery.Net.SctpAssociationState)">
            <summary>
            Updates the state of the association.
            </summary>
            <param name="state">The new association state.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.SendInit">
            <summary>
            Attempts to create an association with a remote party by sending an initialisation
            control chunk.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.SendChunk(SIPSorcery.Net.SctpChunk)">
            <summary>
            Sends a SCTP chunk to the remote party.
            </summary>
            <param name="chunk">The chunk to send.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpAssociation.SendPacket(SIPSorcery.Net.SctpPacket)">
            <summary>
            Sends an SCTP packet to the remote peer.
            </summary>
            <param name="pkt">The packet to send.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataFrame.#ctor(System.Boolean,System.UInt16,System.UInt16,System.UInt32,System.Byte[])">
            <param name="streamID">The stream ID of the chunk.</param>
            <param name="streamSeqNum">The stream sequence number of the chunk. Will be 0 for unordered streams.</param>
            <param name="ppid">The payload protocol ID for the chunk.</param>
            <param name="userData">The chunk data.</param>
        </member>
        <member name="F:SIPSorcery.Net.SctpTsnGapBlock.Start">
            <summary>
            Indicates the Start offset TSN for this Gap Ack Block.  To
            calculate the actual TSN number the Cumulative TSN Ack is added to
            this offset number.This calculated TSN identifies the first TSN
            in this Gap Ack Block that has been received.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpTsnGapBlock.End">
            <summary>
            Indicates the End offset TSN for this Gap Ack Block.  To calculate
            the actual TSN number, the Cumulative TSN Ack is added to this
            offset number.This calculated TSN identifies the TSN of the last
            DATA chunk received in this Gap Ack Block.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpDataReceiver">
            <summary>
            Processes incoming data chunks and handles fragmentation and congestion control. This
            class does NOT handle in order delivery. Different streams on the same association
            can have different ordering requirements so it's left up to each stream handler to
            deal with full frames as they see fit.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataReceiver.WINDOW_SIZE_MINIMUM">
            <summary>
            The window size is the maximum number of entries that can be recorded in the 
            <see cref="!:_receivedChunks"/> dictionary.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataReceiver.MAXIMUM_OUTOFORDER_FRAMES">
            <summary>
            The maximum number of out of order frames that will be queued per stream ID.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataReceiver.MAX_FRAME_SIZE">
            <summary>
            The maximum size of an SCTP fragmented message.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataReceiver._forwardTSN">
            <summary>
            This dictionary holds data chunk Transaction Sequence Numbers (TSN) that have
            been received out of order and are in advance of the expected TSN.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataReceiver._fragmentedChunks">
            <summary>
            Storage for fragmented chunks.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataReceiver._streamLatestSeqNums">
            <summary>
            Keeps track of the latest sequence number for each stream. Used to ensure
            stream chunks are delivered in order.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataReceiver._streamOutOfOrderFrames">
            <summary>
            A dictionary of dictionaries used to hold out of order stream chunks.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataReceiver._receiveWindow">
            <summary>
            The maximum amount of received data that will be stored at any one time.
            This is part of the SCTP congestion window mechanism. It limits the number
            of bytes, a sender can send to a particular destination transport address 
            before receiving an acknowledgement.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataReceiver._lastInOrderTSN">
            <summary>
            The most recent in order TSN received. This is the value that gets used
            in the "Cumulative TSN Ack" field to SACK chunks. 
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataReceiver._windowSize">
            <summary>
            The window size is the maximum number of chunks we're prepared to hold in the 
            receive dictionary.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataReceiver._duplicateTSN">
            <summary>
            Record of the duplicate Transaction Sequence Number (TSN) chunks received since
            the last SACK chunk was generated.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpDataReceiver.CumulativeAckTSN">
            <summary>
            Gets the Transaction Sequence Number (TSN) that can be acknowledged to the remote peer.
            It represents the most recent in order TSN that has been received. If no in order
            TSN's have been received then null will be returned.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpDataReceiver.ForwardTSNCount">
            <summary>
            A count of the total entries in the receive dictionary. Note that if chunks
            have been received out of order this count could include chunks that have
            already been processed. They are kept in the dictionary as empty chunks to
            track which TSN's have been received.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataReceiver.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Creates a new SCTP data receiver instance.
            </summary>
            <param name="receiveWindow">The size of the receive window. This is the window around the 
            expected Transaction Sequence Number (TSN). If a data chunk is received with a TSN outside
            the window it is ignored.</param>
            <param name="mtu">The Maximum Transmission Unit for the network layer that the SCTP
            association is being used with.</param>
            <param name="initialTSN">The initial TSN for the association from the INIT handshake.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataReceiver.SetInitialTSN(System.UInt32)">
            <summary>
            Used to set the initial TSN for the remote party when it's not known at creation time.
            </summary>
            <param name="tsn">The initial Transaction Sequence Number (TSN) for the 
            remote party.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataReceiver.OnDataChunk(SIPSorcery.Net.SctpDataChunk)">
            <summary>
            Handler for processing new data chunks.
            </summary>
            <param name="dataChunk">The newly received data chunk.</param>
            <returns>If the received chunk resulted in a full chunk becoming available one 
            or more new frames will be returned otherwise an empty frame is returned. Multiple
            frames may be returned if this chunk is part of a stream and was received out
            or order. For unordered chunks the list will always have a single entry.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataReceiver.GetSackChunk">
            <summary>
            Gets a SACK chunk that represents the current state of the receiver.
            </summary>
            <returns>A SACK chunk that can be sent to the remote peer to update the ACK TSN and
            request a retransmit of any missing DATA chunks.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataReceiver.GetForwardTSNGaps">
            <summary>
            Gets a list of the gaps in the forward TSN records. Typically the TSN gap
            reports are used in SACK chunks to inform the remote peer which DATA chunk
            TSNs have not yet been received.
            </summary>
            <returns>A list of TSN gap blocks. An empty list means there are no gaps.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataReceiver.ProcessStreamFrame(SIPSorcery.Net.SctpDataFrame)">
            <summary>
            Processes a data frame that is now ready and that is part of an SCTP stream.
            Stream frames must be delivered in order.
            </summary>
            <param name="frame">The data frame that became ready from the latest DATA chunk receive.</param>
            <returns>A sorted list of frames for the matching stream ID. Will be empty
            if the supplied frame is out of order for its stream.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataReceiver.GetChunkBeginAndEnd(System.Collections.Generic.Dictionary{System.UInt32,SIPSorcery.Net.SctpDataChunk},System.UInt32)">
            <summary>
            Checks whether the fragmented chunk for the supplied TSN is complete and if so
            returns its begin and end TSNs.
            </summary>
            <param name="tsn">The TSN of the fragmented chunk to check for completeness.</param>
            <param name="fragments">The dictionary containing the chunk fragments.</param>
            <returns>If the chunk is complete the begin and end TSNs will be returned. If
            the fragmented chunk is incomplete one or both of the begin and/or end TSNs will be null.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataReceiver.GetFragmentedChunk(System.Collections.Generic.Dictionary{System.UInt32,SIPSorcery.Net.SctpDataChunk},System.UInt32,System.UInt32)">
            <summary>
            Extracts a fragmented chunk from the receive dictionary and passes it to the ULP.
            </summary>
            <param name="fragments">The dictionary containing the chunk fragments.</param>
            <param name="beginTSN">The beginning TSN for the fragment.</param>
            <param name="endTSN">The end TSN for the fragment.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataReceiver.IsNewer(System.UInt32,System.UInt32)">
            <summary>
            Determines if a received TSN is newer than the expected TSN taking
            into account if TSN wrap around has occurred.
            </summary>
            <param name="tsn">The TSN to compare against.</param>
            <param name="receivedTSN">The received TSN.</param>
            <returns>True if the received TSN is newer than the reference TSN
            or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataReceiver.GetDistance(System.UInt32,System.UInt32)">
            <summary>
            Gets the distance between two unsigned integers. The "distance" means how many 
            points are there between the two unsigned integers and allows wrapping from
            the unsigned integer maximum to zero.
            </summary>
            <returns>The shortest distance between the two unsigned integers.</returns>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender.MAX_BURST">
            <summary>
            Used to limit the number of packets that are sent at any one time, i.e. when 
            the transmit timer fires do not send more than this many packets.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender.BURST_PERIOD_MILLISECONDS">
            <summary>
            Milliseconds to wait between bursts if no SACK chunks are received in the interim.
            Eventually if no SACK chunks are received the congestion or receiver windows
            will reach zero and enforce a longer period.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender.RTO_INITIAL_SECONDS">
            <summary>
            Retransmission timeout initial value.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender.RTO_MIN_SECONDS">
            <summary>
            The minimum value for the Retransmission timeout.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender.RTO_MAX_SECONDS">
            <summary>
            The maximum value for the Retransmission timeout.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender._sendDataChunk">
            <summary>
            Callback method that sends data chunks.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender._congestionWindow">
            <summary>
            Congestion control window (cwnd, in bytes), which is adjusted by
            the sender based on observed network conditions.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender._receiverWindow">
            <summary>
            The current Advertised Receiver Window Credit for the remote peer.
            This value represents the dedicated  buffer space on the remote peer, 
            in number of bytes, that will be used for the receive buffer for DATA 
            chunks sent to it.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender._slowStartThreshold">
            <summary>
            Slow-start threshold (ssthresh, in bytes), which is used by the
            sender to distinguish slow-start and congestion avoidance phases.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender._initialRemoteARwnd">
            <summary>
            The initial Advertised Receiver Window Credit for the remote peer.
            This value represents the dedicated  buffer space on the remote peer, 
            in number of bytes, that will be used for the receive buffer for DATA 
            chunks sent to it.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender._rto">
            <summary>
            Retransmission timeout. 
            See https://datatracker.ietf.org/doc/html/rfc4960#section-6.3.1
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpDataSender._outstandingBytes">
            <summary>
            A count of the bytes currently in-flight to the remote peer.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender._cumulativeAckTSN">
            <summary>
            The TSN that the remote peer has acknowledged.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender._streamSeqnums">
            <summary>
            Keeps track of the sequence numbers for each of the streams being
            used by the association.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender._sendQueue">
            <summary>
            Queue to hold SCTP frames that are waiting to be sent to the remote peer.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender._unconfirmedChunks">
            <summary>
            Chunks that have been sent to the remote peer but have yet to be acknowledged.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpDataSender._missingChunks">
            <summary>
            Chunks that have been flagged by a gap report from the remote peer as missing
            and that need to be re-sent.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpDataSender.BufferedAmount">
            <summary>
            The total size (in bytes) of queued user data that will be sent to the peer.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpDataSender.TSN">
            <summary>
            The Transaction Sequence Number (TSN) that will be used in the next DATA chunk sent.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataSender.GotSack(SIPSorcery.Net.SctpSackChunk)">
            <summary>
            Handler for SACK chunks received from the remote peer.
            </summary>
            <param name="sack">The SACK chunk from the remote peer.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataSender.SendData(System.UInt16,System.UInt32,System.Byte[])">
            <summary>
            Sends a DATA chunk to the remote peer.
            </summary>
            <param name="streamID">The stream ID to sent the data on.</param>
            <param name="ppid">The payload protocol ID for the data.</param>
            <param name="data">The byte data to send.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataSender.StartSending">
            <summary>
            Start the sending thread to process the new DATA chunks from the application and
            any retransmits or timed out chunks.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataSender.Close">
            <summary>
            Stops the sending thread.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataSender.ProcessGapReports(System.Collections.Generic.List{SIPSorcery.Net.SctpTsnGapBlock},System.UInt32,System.Boolean)">
            <summary>
            Updates the sender state for the gap reports received in a SACH chunk from the
            remote peer.
            </summary>
            <param name="sackGapBlocks">The gap reports from the remote peer.</param>
            <param name="maxTSNDistance">The maximum distance any valid TSN should be from the current
            ACK'ed TSN. If this distance gets exceeded by a gap report then it's likely something has been
            miscalculated.</param>
            <param name="didSackIncrementTSN">If true, processing of the SACK incremented the <see cref="F:SIPSorcery.Net.SctpDataSender._cumulativeAckTSN"/></param>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataSender.RemoveAckedUnconfirmedChunks(System.UInt32)">
            <summary>
            Removes the chunks waiting for a SACK confirmation from the unconfirmed queue.
            </summary>
            <param name="sackTSN">The acknowledged TSN received from in a SACK from the remote peer.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataSender.DoSend(System.Object)">
            <summary>
            Worker thread to process the send and retransmit queues.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataSender.GetSendWaitMilliseconds">
            <summary>
            Determines how many milliseconds the send thread should wait before the next send attempt.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataSender.UpdateRoundTripTime(SIPSorcery.Net.SctpDataChunk)">
            <summary>
            Updates the round trip time. 
            See https://datatracker.ietf.org/doc/html/rfc4960#section-6.3.1
            </summary>
            <param name="acknowledgedChunk">The last sent and acknowledged chunk used to calculate the round trip time</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataSender.CalculateReceiverWindow(System.UInt32)">
            <summary>
            Calculates the receiver window based on the value supplied from a SACK chunk.
            Note the receive window in the SACK chunk does not take account for in flight
            DATA chunks hence the need for this calculation.
            </summary>
            <param name="advertisedReceiveWindow">The last receive window value supplied by the remote peer 
            either in the INIT handshake or in a SACK chunk.</param>
            <remarks>
            See https://tools.ietf.org/html/rfc4960#section-6.2.1.
            </remarks>
            <returns>The new value to use for the receiver window.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpDataSender.CalculateCongestionWindow(System.Int32)">
            <summary>
            Calculates an updated value for the congestion window.
            </summary>
            <param name="lastAckDataChunkSize">The size of last ACK'ed DATA chunk.</param>
            <returns>A congestion window value.</returns>
        </member>
        <member name="F:SIPSorcery.Net.SctpHeader.SourcePort">
            <summary>
            The SCTP sender's port number.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpHeader.DestinationPort">
            <summary>
            The SCTP port number to which this packet is destined.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpHeader.VerificationTag">
            <summary>
            The receiver of this packet uses the Verification Tag to validate
            the sender of this SCTP packet.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpHeader.Checksum">
            <summary>
            The CRC32c checksum of this SCTP packet.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpHeader.WriteToBuffer(System.Byte[],System.Int32)">
            <summary>
            Serialises the header to a pre-allocated buffer.
            </summary>
            <param name="buffer">The buffer to write the SCTP header bytes to. It
            must have the required space already allocated.</param>
            <param name="posn">The position in the buffer to write the header
            bytes to.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpHeader.Parse(System.Byte[],System.Int32)">
            <summary>
            Parses the an SCTP header from a buffer.
            </summary>
            <param name="buffer">The buffer to parse the SCTP header from.</param>
            <param name="posn">The position in the buffer to start parsing the header from.</param>
            <returns>A new SCTPHeaer instance.</returns>
        </member>
        <member name="T:SIPSorcery.Net.SctpPacket">
            <summary>
            An SCTP packet is composed of a common header and chunks. A chunk
            contains either control information or user data.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpPacket.VERIFICATIONTAG_BUFFER_POSITION">
            <summary>
            The position in a serialised SCTP packet buffer that the verification
            tag field starts.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpPacket.CHECKSUM_BUFFER_POSITION">
            <summary>
            The position in a serialised SCTP packet buffer that the checksum 
            field starts.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpPacket.Header">
            <summary>
            The common header for the SCTP packet.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpPacket.Chunks">
            <summary>
            The list of one or recognised chunks after parsing with <see cref="!:GetChunks"/>
            or chunks that have been manually added for an outgoing SCTP packet.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpPacket.UnrecognisedChunks">
            <summary>
            A list of the blobs for chunks that weren't recognised when parsing
            a received packet.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpPacket.#ctor(System.UInt16,System.UInt16,System.UInt32)">
            <summary>
            Creates a new SCTP packet instance.
            </summary>
            <param name="sourcePort">The source port value to place in the packet header.</param>
            <param name="destinationPort">The destination port value to place in the packet header.</param>
            <param name="verificationTag">The verification tag value to place in the packet header.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpPacket.GetBytes">
            <summary>
            Serialises an SCTP packet to a byte array.
            </summary>
            <returns>The byte array containing the serialised SCTP packet.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpPacket.AddChunk(SIPSorcery.Net.SctpChunk)">
            <summary>
            Adds a new chunk to send with an outgoing packet.
            </summary>
            <param name="chunk">The chunk to add.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpPacket.Parse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses an SCTP packet from a serialised buffer.
            </summary>
            <param name="buffer">The buffer holding the serialised packet.</param>
            <param name="offset">The position in the buffer of the packet.</param>
            <param name="length">The length of the serialised packet in the buffer.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpPacket.ParseChunks(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parses the chunks from a serialised SCTP packet.
            </summary>
            <param name="buffer">The buffer holding the serialised packet.</param>
            <param name="offset">The position in the buffer of the packet.</param>
            <param name="length">The length of the serialised packet in the buffer.</param>
            <returns>The lsit of parsed chunks and a list of unrecognised chunks that were not de-serialised.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpPacket.VerifyChecksum(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Verifies whether the checksum for a serialised SCTP packet is valid.
            </summary>
            <param name="buffer">The buffer holding the serialised packet.</param>
            <param name="posn">The start position in the buffer.</param>
            <param name="length">The length of the packet in the buffer.</param>
            <returns>True if the checksum was valid, false if not.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpPacket.GetVerificationTag(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the verification tag from a serialised SCTP packet. This allows
            a pre-flight check to be carried out before de-serialising the whole buffer.
            </summary>
            <param name="buffer">The buffer holding the serialised packet.</param>
            <param name="posn">The start position in the buffer.</param>
            <param name="length">The length of the packet in the buffer.</param>
            <returns>The verification tag for the serialised SCTP packet.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpPacket.IsValid(System.Byte[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Performs verification checks on a serialised SCTP packet.
            </summary>
            <param name="buffer">The buffer holding the serialised packet.</param>
            <param name="posn">The start position in the buffer.</param>
            <param name="length">The length of the packet in the buffer.</param>
            <param name="requiredTag">The required verification tag for the serialised
            packet. This should match the verification tag supplied by the remote party.</param>
            <returns>True if the packet is valid, false if not.</returns>
        </member>
        <member name="T:SIPSorcery.Net.SctpTransportCookie">
            <summary>
            The opaque cookie structure that will be sent in response to an SCTP INIT
            packet.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SctpTransport">
            <summary>
            Contains the common methods that an SCTP transport layer needs to implement.
            As well as being able to be carried directly in IP packets, SCTP packets can
            also be wrapped in higher level protocols.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpTransport.DEFAULT_COOKIE_LIFETIME_SECONDS">
            <summary>
            As per https://tools.ietf.org/html/rfc4960#section-15.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpTransport._hmacKey">
            <summary>
            Ephemeral secret key to use for generating cookie HMAC's. The purpose of the HMAC is
            to prevent resource depletion attacks. This does not justify using an external key store.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SctpTransport.IsPortAgnostic">
            <summary>
            This property can be used to indicate whether an SCTP transport layer is port agnostic.
            For example a DTLS transport is likely to only ever create a single SCTP association 
            and the SCTP ports are redundant for matching end points. This allows the checks done
            on received SCTP packets to be more accepting about the ports used in the SCTP packet
            header.
            </summary>
            <returns>
            True if the transport implementation does not rely on the SCTP source and
            destination port for end point matching. False if it does.
            </returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.GetInitAckCookie(System.UInt16,System.UInt16,System.UInt32,System.UInt32,System.UInt32,System.String,System.Int32)">
            <summary>
            Gets a cookie to send in an INIT ACK chunk. This method
            is overloadable so that different transports can tailor how the cookie
            is created. For example the WebRTC SCTP transport only ever uses a
            single association so the local Tag and TSN properties must be
            the same rather than random.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.GetInitAck(SIPSorcery.Net.SctpPacket,System.Net.IPEndPoint)">
            <summary>
            Creates the INIT ACK chunk and packet to send as a response to an SCTP
            packet containing an INIT chunk.
            </summary>
            <param name="initPacket">The received packet containing the INIT chunk.</param>
            <param name="remoteEP">Optional. The remote IP end point the INIT packet was
            received on. For transports that don't use an IP transport directly this parameter
            can be set to null and it will not form part of the COOKIE ECHO checks.</param>
            <returns>An SCTP packet with a single INIT ACK chunk.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.GetCookie(SIPSorcery.Net.SctpPacket)">
            <summary>
            Attempts to retrieve the cookie that should have been set by this peer from a COOKIE ECHO
            chunk. This is the step in the handshake that a new SCTP association will be created
            for a remote party. Providing the state cookie is valid create a new association.
            </summary>
            <param name="sctpPacket">The packet containing the COOKIE ECHO chunk received from the remote party.</param>
            <returns>If the state cookie in the chunk is valid a new SCTP association will be returned. IF
            it's not valid an empty cookie will be returned and an error response gets sent to the peer.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.GetCookieHMAC(System.Byte[])">
            <summary>
            Checks whether the state cookie that is supplied in a COOKIE ECHO chunk is valid for
            this SCTP transport.
            </summary>
            <param name="buffer">The buffer holding the state cookie.</param>
            <returns>True if the cookie is determined as valid, false if not.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.SendError(System.Boolean,System.UInt16,System.UInt16,System.UInt32,SIPSorcery.Net.ISctpErrorCause)">
            <summary>
            Send an SCTP packet with one of the error type chunks (ABORT or ERROR) to the remote peer.
            </summary>
            <param name="isAbort">Set to true to use an ABORT chunk otherwise an ERROR chunk will be used.</param>
            <param name="destinationPort">The SCTP destination port.</param>
            <param name="sourcePort">The SCTP source port.</param>
            <param name="initiateTag">If available the initial tag for the remote peer.</param>
            <param name="error">The error to send.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.Initialize(System.UInt16)">
            <summary>
            This method allows SCTP to initialise its internal data structures
            and allocate necessary resources for setting up its operation
            environment.
            </summary>
            <param name="localPort">SCTP port number, if the application wants it to be specified.</param>
            <returns>The local SCTP instance name.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.Associate(System.Net.IPAddress,System.Int32)">
            <summary>
            Initiates an association to a specific peer end point
            </summary>
            <param name="destination"></param>
            <param name="streamCount"></param>
            <returns>An association ID, which is a local handle to the SCTP association.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.Shutdown(System.String)">
            <summary>
            Gracefully closes an association. Any locally queued user data will
            be delivered to the peer.The association will be terminated only
            after the peer acknowledges all the SCTP packets sent.
            </summary>
            <param name="associationID">Local handle to the SCTP association.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.Abort(System.String)">
            <summary>
            Ungracefully closes an association. Any locally queued user data
            will be discarded, and an ABORT chunk is sent to the peer.
            </summary>
            <param name="associationID">Local handle to the SCTP association.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.Send(System.String,System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This is the main method to send user data via SCTP.
            </summary>
            <param name="associationID">Local handle to the SCTP association.</param>
            <param name="buffer">The buffer holding the data to send.</param>
            <param name="length">The number of bytes from the buffer to send.</param>
            <param name="contextID">Optional. A 32-bit integer that will be carried in the
            sending failure notification to the application if the transportation of
            this user message fails.</param>
            <param name="streamID">Optional. To indicate which stream to send the data on. If not
            specified, stream 0 will be used.</param>
            <param name="lifeTime">Optional. specifies the life time of the user data. The user
            data will not be sent by SCTP after the life time expires.This
            parameter can be used to avoid efforts to transmit stale user
            messages.</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.SetPrimary(System.String)">
            <summary>
            Instructs the local SCTP to use the specified destination transport
            address as the primary path for sending packets.
            </summary>
            <param name="associationID"></param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.Receive(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method shall read the first user message in the SCTP in-queue
            into the buffer specified by the application, if there is one available.The
            size of the message read, in bytes, will be returned.
            </summary>
            <param name="associationID">Local handle to the SCTP association.</param>
            <param name="buffer">The buffer to place the received data into.</param>
            <param name="length">The maximum size of the data to receive.</param>
            <param name="streamID">Optional. If specified indicates which stream to 
            receive the data on.</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.Status(System.String)">
            <summary>
            Returns the current status of the association.
            </summary>
            <param name="associationID">Local handle to the SCTP association.</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.ChangeHeartbeat(System.String,System.Int32)">
            <summary>
            Instructs the local endpoint to enable or disable heartbeat on the
            specified destination transport address.
            </summary>
            <param name="associationID">Local handle to the SCTP association.</param>
            <param name="interval">Indicates the frequency of the heartbeat if
            this is to enable heartbeat on a destination transport address.
            This value is added to the RTO of the destination transport
            address.This value, if present, affects all destinations.</param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.RequestHeartbeat(System.String)">
            <summary>
            Instructs the local endpoint to perform a HeartBeat on the specified
            destination transport address of the given association.
            </summary>
            <param name="associationID">Local handle to the SCTP association.</param>
            <returns>Indicates whether the transmission of the HEARTBEAT
            chunk to the destination address is successful.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.GetSrttReport(System.String)">
            <summary>
            Instructs the local SCTP to report the current Smoothed Round Trip Time (SRTT)
            measurement on the specified destination transport address of the given 
            association.
            </summary>
            <param name="associationID">Local handle to the SCTP association.</param>
            <returns>An integer containing the most recent SRTT in milliseconds.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.SetProtocolParameters(System.String,System.Object)">
            <summary>
            This method allows the local SCTP to customise the protocol
            parameters.
            </summary>
            <param name="associationID">Local handle to the SCTP association.</param>
            <param name="protocolParameters">The specific names and values of the
            protocol parameters that the SCTP user wishes to customise.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.ReceiveUnsent(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            ??
            </summary>
            <param name="dataRetrievalID">The identification passed to the application in the
            failure notification.</param>
            <param name="buffer">The buffer to store the received message.</param>
            <param name="length">The maximum size of the data to receive.</param>
            <param name="streamID">This is a return value that is set to indicate which
            stream the data was sent to.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.ReceiveUnacknowledged(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            ??
            </summary>
            <param name="dataRetrievalID">The identification passed to the application in the
            failure notification.</param>
            <param name="buffer">The buffer to store the received message.</param>
            <param name="length">The maximum size of the data to receive.</param>
            <param name="streamID">This is a return value that is set to indicate which
            stream the data was sent to.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpTransport.Destroy(System.String)">
            <summary>
            Release the resources for the specified SCTP instance.
            </summary>
            <param name="instanceName"></param>
        </member>
        <member name="T:SIPSorcery.Net.SctpUdpTransport">
            <summary>
            Represents an SCTP transport that encapsulates SCTP packet in UDP.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SctpUdpTransport._udpEncapSocket">
            <summary>
            The UDP encapsulation socket if the instance is managing its own transport layer.
            For WebRTC data channels the socket will not be managed externally.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SctpUdpTransport.#ctor(System.Int32,SIPSorcery.Sys.PortRange)">
            <summary>
            Creates a new UDP transport capable of encapsulating SCTP packets.
            </summary>
            <param name="udpEncapPort">The port to bind to for the UDP encapsulation socket.</param>
            <param name="portRange">Optional. The portRange which should be used to get a listening port.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpUdpTransport.OnEncapsulationSocketPacketReceived(SIPSorcery.Net.UdpReceiver,System.Int32,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Event handler for a packet receive on the UDP encapsulation socket.
            </summary>
            <param name="receiver">The UDP receiver that received the packet.</param>
            <param name="localPort">The local port the packet was received on.</param>
            <param name="remoteEndPoint">The remote end point the packet was received from.</param>
            <param name="packet">A buffer containing the packet.</param>
        </member>
        <member name="M:SIPSorcery.Net.SctpUdpTransport.OnEncapsulationSocketClosed(System.String)">
            <summary>
            Event handler for the UDP encapsulation socket closing.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="M:SIPSorcery.Net.SctpUdpTransport.Associate(System.Net.IPEndPoint,System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Requests a new association be created.
            </summary>
            <param name="destination">The UDP endpoint to attempt to create the association with.</param>
            <param name="sourcePort">The SCTP source port.</param>
            <param name="destinationPort">The SCTP destination port.</param>
            <returns>An SCTP association.</returns>
        </member>
        <member name="F:SIPSorcery.Net.SDP.Group">
            <summary>
            Indicates multiple media offers will be bundled on a single RTP connection.
            Example: a=group:BUNDLE audio video
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SDP.SessionMediaStreamStatus">
            <summary>
            The stream status of this session. The default is sendrecv.
            If child media announcements have an explicit status set then 
            they take precedence.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SDP.GetSDPRTPEndPoint">
            <summary>
            A convenience method to get the RTP end point for single audio offer SDP payloads.
            </summary>
            <returns>The RTP end point for the first media end point.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SDP.GetSDPRTPEndPoint(System.String)">
            <summary>
            A convenience method to get the RTP end point for single audio offer SDP payloads.
            </summary>
            <param name="sdpMessage">A string representing the SDP payload.</param>
            <returns>The RTP end point for the first media end point.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SDP.GetMediaStreamStatus(SIPSorcery.Net.SDPMediaTypesEnum,System.Int32)">
            <summary>
            Gets the media stream status for the specified media announcement.
            </summary>
            <param name="mediaType">The type of media (audio, video etc) to get the status for.</param>
            <param name="announcementIndex">THe index of the announcement to get the status for.</param>
            <returns>The media stream status set on the announcement or if there is none the session. If
            there is also no status set on the session then the default value of sendrecv is returned.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SDP.GetIndexForMediaType(SIPSorcery.Net.SDPMediaTypesEnum,System.Int32)">
            <summary>
            Media announcements can be placed in SDP in any order BUT the orders must match
            up in offer/answer pairs. This method can be used to get the index for a specific
            media type. It is useful for obtaining the index of a particular media type when
            constructing an SDP answer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.Net.SDPApplicationMediaFormat.WithUpdatedID(System.String)">
            <summary>
            Creates a new media format based on an existing format but with a different ID.
            The typical case for this is during the SDP offer/answer exchange the dynamic format ID's for the
            equivalent type need to be adjusted by one party.
            </summary>
            <param name="id">The ID to set on the new format.</param>
        </member>
        <member name="T:SIPSorcery.Net.SDPAudioVideoMediaFormat">
            <summary>
            Represents a single media format within a media announcement. Often the whole media format can
            be represented and described by a single character, e.g. "0" without additional info represents
            standard "PCMU", "8" represents "PCMA" etc. For other media types that have variable parameters
            additional attributes can be provided.
            </summary>
            <remarks>This struct is designed to be immutable. If new information becomes available for a 
            media format, such as when parsing further into an SDP payload, a new media format should be
            created.
            TODO: With C#9 the struct could become a "record" type.
            </remarks>
        </member>
        <member name="P:SIPSorcery.Net.SDPAudioVideoMediaFormat.Kind">
            <summary>
            Indicates whether the format is for audio or video.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SDPAudioVideoMediaFormat.ID">
            <summary>
            The mandatory ID for the media format. Warning, even though some ID's are normally used to represent
            a standard media type, e.g "0" for "PCMU" etc, there is no guarantee that's the case. "0" can be used
            for any media format if there is a format attribute describing it. In the absence of a format attribute
            then it is required that it represents a standard media type.
            
            Note (rj2): FormatID MUST be string (not int), in case ID is 't38' and type is 'image'
            Note to above: The FormatID is always numeric for profile "RTP/AVP" and "RTP/SAVP", see 
            https://tools.ietf.org/html/rfc4566#section-5.14 and section on "fmt":
            "If the [proto] sub-field is "RTP/AVP" or "RTP/SAVP" the [fmt]
            sub-fields contain RTP payload type numbers"
            In the case of T38 the format name is "t38" but the formatID must be set as a dynamic ID.
            <code>
            // Example
            // Note in this example "0" is representing a standard format so the format attribute is optional.
            m=audio 12228 RTP/AVP 0 101         // "0" and "101" are media format ID's.
            a=rtpmap:0 PCMU/8000                // "0" is the media format ID.
            a=rtpmap:101 telephone-event/8000   // "101" is the media format ID.
            a=fmtp:101 0-16
            </code>
            <code> 
            // t38 example from https://tools.ietf.org/html/rfc4612.
            m=audio 6800 RTP/AVP 0 98 
            a=rtpmap:98 t38/8000 
            a=fmtp:98 T38FaxVersion=2;T38FaxRateManagement=transferredTCF
            </code>
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SDPAudioVideoMediaFormat.Rtpmap">
            <summary>
            The optional rtpmap attribute properties for the media format. For standard media types this is not necessary.
            <code>
            // Example
            a=rtpmap:0 PCMU/8000
            a=rtpmap:101 telephone-event/8000 ← "101 telephone-event/8000" is the rtpmap properties.
            a=fmtp:101 0-16
            </code>
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SDPAudioVideoMediaFormat.Fmtp">
            <summary>
            The optional format parameter attribute for the media format. For standard media types this is not necessary.
            <code>
            // Example
            a=rtpmap:0 PCMU/8000
            a=rtpmap:101 telephone-event/8000 
            a=fmtp:101 0-16                     ← "101 0-16" is the fmtp attribute.
            </code>
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPAudioVideoMediaFormat._isEmpty">
            <summary>
            The standard name of the media format.
            <code>
            // Example
            a=rtpmap:0 PCMU/8000                ← "PCMU" is the media format name.
            a=rtpmap:101 telephone-event/8000 
            a=fmtp:101 0-16
            </code>
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SDPAudioVideoMediaFormat.#ctor(SIPSorceryMedia.Abstractions.SDPWellKnownMediaFormatsEnum)">
            <summary>
            Creates a new SDP media format for a well known media type. Well known type are those that use 
            ID's less than 96 and don't require rtpmap or fmtp attributes.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SDPAudioVideoMediaFormat.#ctor(SIPSorcery.Net.SDPMediaTypesEnum,System.Int32,System.String,System.String)">
            <summary>
            Creates a new SDP media format for a dynamic media type. Dynamic media types are those that use 
            ID's between 96 and 127 inclusive and require an rtpmap attribute and optionally an fmtp attribute.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SDPAudioVideoMediaFormat.#ctor(SIPSorcery.Net.SDPMediaTypesEnum,System.Int32,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new SDP media format for a dynamic media type. Dynamic media types are those that use 
            ID's between 96 and 127 inclusive and require an rtpmap attribute and optionally an fmtp attribute.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SDPAudioVideoMediaFormat.#ctor(SIPSorceryMedia.Abstractions.AudioFormat)">
            <summary>
            Creates a new SDP media format from a Audio Format instance. The Audio Format contains the 
            equivalent information to the SDP format object but has well defined audio properties separate
            from the SDP serialisation.
            </summary>
            <param name="audioFormat">The Audio Format to map to an SDP format.</param>
        </member>
        <member name="M:SIPSorcery.Net.SDPAudioVideoMediaFormat.#ctor(SIPSorceryMedia.Abstractions.VideoFormat)">
            <summary>
            Creates a new SDP media format from a Video Format instance. The Video Format contains the 
            equivalent information to the SDP format object but has well defined video properties separate
            from the SDP serialisation.
            </summary>
            <param name="videoFormat">The Video Format to map to an SDP format.</param>
        </member>
        <member name="M:SIPSorcery.Net.SDPAudioVideoMediaFormat.WithUpdatedID(System.Int32,SIPSorcery.Net.SDPAudioVideoMediaFormat)">
            <summary>
            Creates a new media format based on an existing format but with a different ID.
            The typical case for this is during the SDP offer/answer exchange the dynamic format ID's for the
            equivalent type need to be adjusted by one party.
            </summary>
            <param name="id">The ID to set on the new format.</param>
            <param name="format">The existing format to copy all properties except the ID from.</param>
            <returns>A new format.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SDPAudioVideoMediaFormat.ToAudioFormat">
            <summary>
            Maps an audio SDP media type to a media abstraction layer audio format.
            </summary>
            <returns>An audio format value.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SDPAudioVideoMediaFormat.ToVideoFormat">
            <summary>
            Maps a video SDP media type to a media abstraction layer video format.
            </summary>
            <returns>A video format value.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SDPAudioVideoMediaFormat.AreMatch(SIPSorcery.Net.SDPAudioVideoMediaFormat,SIPSorcery.Net.SDPAudioVideoMediaFormat)">
            <summary>
            For two formats to be a match only the codec and rtpmap parameters need to match. The
            fmtp parameter does not matter.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SDPAudioVideoMediaFormat.GetCompatibleFormats(System.Collections.Generic.List{SIPSorcery.Net.SDPAudioVideoMediaFormat},System.Collections.Generic.List{SIPSorcery.Net.SDPAudioVideoMediaFormat})">
            <summary>
            Attempts to get the compatible formats between two lists. Formats for
            "RTP Events" are not included.
            </summary>
            <param name="a">The first list to match the media formats for.</param>
            <param name="b">The second list to match the media formats for.</param>
            <returns>A list of media formats that are compatible for BOTH lists.</returns>
        </member>
        <member name="M:SIPSorcery.Net.SDPAudioVideoMediaFormat.SortMediaCapability(System.Collections.Generic.List{SIPSorcery.Net.SDPAudioVideoMediaFormat},System.Collections.Generic.List{SIPSorcery.Net.SDPAudioVideoMediaFormat})">
            <summary>
            Sort capabilities array based on another capability array
            </summary>
            <param name="capabilities"></param>
            <param name="priorityOrder"></param>
        </member>
        <member name="M:SIPSorcery.Net.SDPAudioVideoMediaFormat.TryParseRtpmap(System.String,System.String@,System.Int32@,System.Int32@)">
            <summary>
            Parses an rtpmap attribute in the form "name/clock" or "name/clock/channels".
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SDPAudioVideoMediaFormat.GetCommonRtpEventFormat(System.Collections.Generic.List{SIPSorcery.Net.SDPAudioVideoMediaFormat},System.Collections.Generic.List{SIPSorcery.Net.SDPAudioVideoMediaFormat})">
            <summary>
            Attempts to get a common SDP media format that supports telephone events. 
            If compatible an RTP event format will be returned that matches the local format with the remote format.
            </summary>
            <param name="a">The first of supported media formats.</param>
            <param name="b">The second of supported media formats.</param>
            <returns>An SDP media format with a compatible RTP event format.</returns>
        </member>
        <member name="F:SIPSorcery.Net.SDPConnectionInformation.ConnectionNetworkType">
            <summary>
            Type of network, IN = Internet.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPConnectionInformation.ConnectionAddressType">
            <summary>
            Session level address family.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPConnectionInformation.ConnectionAddress">
            <summary>
            IP or multicast address for the media connection.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.SDPSsrcAttribute">
            <summary>
            An attribute used to defined additional properties about
            a media source and the relationship between them.
            As specified in RFC5576, https://tools.ietf.org/html/rfc5576.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SDPSsrcAttribute.#ctor(System.UInt32,System.String,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="ssrc">The SSRC that should match an RTP stream.</param>
            <param name="cname">Optional. The CNAME value to use in RTCP SDES sections.</param>
            <param name="groupID">Optional. If this "ssrc" attribute is part of a 
            group this is the group ID.</param>
        </member>
        <member name="F:SIPSorcery.Net.SDPMediaAnnouncement.MediaID">
            <summary>
            If being used in a bundle this the ID for the announcement.
            Example: a=mid:audio or a=mid:video.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPMediaAnnouncement.SsrcGroupID">
            <summary>
            The "ssrc" attributes group ID as specified in RFC5576.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPMediaAnnouncement.SctpMap">
            <summary>
            The "sctpmap" attribute defined in https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26 for
            use in WebRTC data channels.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPMediaAnnouncement.SctpPort">
            <summary>
            The "sctp-port" attribute defined in https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26 for
            use in WebRTC data channels.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPMediaAnnouncement.MaxMessageSize">
            <summary>
            The "max-message-size" attribute defined in https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26 for
            use in WebRTC data channels.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPMediaAnnouncement.SsrcAttributes">
            <summary>
            If the RFC5576 is being used this is the list of "ssrc" attributes
            supplied.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPMediaAnnouncement.TIASBandwidth">
            <summary>
            Optional Transport Independent Application Specific Maximum (TIAS) bandwidth.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPMediaAnnouncement.MediaDescription">
            <summary>
            In media definitions, "i=" fields are primarily intended for labelling media streams https://tools.ietf.org/html/rfc4566#page-12
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPMediaAnnouncement.MediaFormats">
            <summary>
             For AVP these will normally be a media payload type as defined in the RTP Audio/Video Profile.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPMediaAnnouncement.HeaderExtensions">
            <summary>
             a=extmap - Mapping for RTP header extensions
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPMediaAnnouncement.MessageMediaFormat">
            <summary>
             For AVP these will normally be a media payload type as defined in the RTP Audio/Video Profile.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.SDPMediaAnnouncement.ApplicationMediaFormats">
            <summary>
            List of media formats for "application media announcements. Application media announcements have different
            semantics to audio/video announcements. They can also use aribtrary strings as the format ID.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.SDPMediaAnnouncement.MediaStreamStatus">
            <summary>
            The stream status of this media announcement.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.SDPMediaAnnouncement.GetTelephoneEventFormatID">
            <summary>
            Attempts to locate a media format corresponding to telephone events. If available its 
            format ID is returned.
            </summary>
            <returns>If found the format ID for telephone events or -1 if not.</returns>
        </member>
        <member name="T:SIPSorcery.Net.SDPSecurityDescription">
            <summary>
            (SDP) Security Descriptions for Media Streams implementation as basically defined in RFC 4568.
            <code>
            Example 1: Parse crypto attribute
            
            string crypto = "a=crypto:1 AES_256_CM_HMAC_SHA1_80 inline:GTuZoqOsesiK4wfyL7Rsq6uHHwhqVGA+aVuAUnsmWktYacZyJu6/6tUQeUti0Q==";
            SDPSecurityDescription localcrypto = SDPSecurityDescription.Parse(crypto);
            
            </code>
            <code>
            Example 2: Parse crypto attribute
            
            SDPMediaAnnouncement mediaAudio = new SDPMediaAnnouncement();
            //[...]set some SDPMediaAnnouncement properties
            SDPSecurityDescription localcrypto = SDPSecurityDescription.CreateNew();
            localcrypto.KeyParams.Clear();
            localcrypto.KeyParams.Add(SDPSecurityDescription.KeyParameter.CreateNew(SDPSecurityDescription.CryptoSuites.AES_CM_128_HMAC_SHA1_32));
            mediaAudio.SecurityDescriptions.Add(localcrypto);
            mediaAudio.ToString();
            
            string crypto = "a=crypto:1 AES_256_CM_HMAC_SHA1_80 inline:GTuZoqOsesiK4wfyL7Rsq6uHHwhqVGA+aVuAUnsmWktYacZyJu6/6tUQeUti0Q==";
            SDPSecurityDescription desc = SDPSecurityDescription.Parse(crypto);
            
            </code>
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.MediaStreamStatusEnum">
            <summary>
            The types of status that a media stream can have. Note that the stream status can
            be defined with an attribute at session level or at media element level. If no 
            attribute is defined then the default is "sendrecv".
            Note that this status applies to RTP streams only. If there is an RTCP stream 
            associated with the RTP it should carry on as normal.
            See https://tools.ietf.org/html/rfc4566#section-6
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamStatusType.IsMediaStreamStatusAttribute(System.String,SIPSorcery.Net.MediaStreamStatusEnum@)">
            <summary>
            Checks whether an SDP attribute is one of the four possible media stream attributes.
            </summary>
            <param name="attributeString">The attribute string to check.</param>
            <param name="mediaStreamStatus">If the attribute was recognised as a media stream attribute this will hold it.</param>
            <returns>True if the attribute matched or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.Net.MediaStreamStatusType.GetAttributeForMediaStreamStatus(SIPSorcery.Net.MediaStreamStatusEnum)">
            <summary>
            Gets the attribute to include in a serialised SDP payload for a media stream status.
            </summary>
            <param name="mediaStreamStatus">The status to get the attribute for.</param>
            <returns>An attribute string matching the status value.</returns>
        </member>
        <member name="T:SIPSorcery.Net.STUNXORAddressAttribute">
            <summary>
            This attribute is the same as the mapped address attribute except the address details are XOR'ed with the STUN magic cookie. 
            THe reason for this is to stop NAT application layer gateways from doing string replacements of private IP addresses and ports.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.STUNClient">
            <summary>
            Methods to resolve the public IP address and port information of the client.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.STUNClient.GetPublicIPAddress(System.String,System.Int32)">
            <summary>
            Used to get the public IP address of the client as seen by the STUN server.
            </summary>
            <param name="stunServer">A server to send STUN requests to.</param>
            <param name="port">The port to use for the request. Defaults to 3478.</param>
            <returns>The public IP address of the client.</returns>
        </member>
        <member name="M:SIPSorcery.Net.STUNClient.GetPublicIPEndPoint(System.String,System.Int32)">
            <summary>
            Used to get the public IP address and port as seen by the STUN server.
            </summary>
            <param name="stunServer">A server to send STUN requests to.</param>
            <param name="port">The port to use for the request. Defaults to 3478.</param>
            <returns>The public IP address and port of the client.</returns>
        </member>
        <member name="F:SIPSorcery.Net.STUNDns._dnsUseTcpFallback">
            <summary>
            Set to true to attempt a DNS lookup over TCP if the UDP lookup fails.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.STUNDns.DnsUseTcpFallback">
            <summary>
            Set to true to attempt a DNS lookup over TCP if the UDP lookup fails.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.STUNDns.Resolve(SIPSorcery.Net.STUNUri,System.Boolean)">
            <summary>
            Resolve method that can be used to request an AAAA result and fallback to a A
            lookup if none found.
            </summary>
            <param name="uri">The URI to lookup.</param>
            <param name="preferIPv6">True if IPv6 (AAAA record lookup) is preferred.</param>
            <returns>An IPEndPoint or null.</returns>
        </member>
        <member name="M:SIPSorcery.Net.STUNDns.Resolve(SIPSorcery.Net.STUNUri,DnsClient.QueryType)">
            <summary>
            Resolve method that performs either an A or AAAA record lookup. If required
            a SRV record lookup will be performed prior to the A or AAAA lookup.
            </summary>
            <param name="uri">The STUN uri to lookup.</param>
            <param name="queryType">Whether the address lookup should be A or AAAA.</param>
            <returns>An IPEndPoint or null.</returns>
        </member>
        <member name="M:SIPSorcery.Net.STUNDns.HostQuery(System.String,System.Int32,DnsClient.QueryType)">
            <summary>
            Attempts to resolve a hostname.
            </summary>
            <param name="host">The hostname to resolve.</param>
            <param name="port">The service port to use in the end pint result (not used for the lookup).</param>
            <param name="queryType">The lookup query type, either A or AAAA.</param>
            <returns>If successful an IPEndPoint or null if not.</returns>
        </member>
        <member name="M:SIPSorcery.Net.STUNDns.GetFromLookupResult(System.Collections.Generic.IEnumerable{DnsClient.Protocol.DnsResourceRecord},System.Int32)">
            <summary>
            Helper method to extract the appropriate IP address from a DNS lookup result.
            The query may have returned an AAAA or A record. This method checks which 
            and extracts the IP address accordingly.
            </summary>
            <param name="answers">The DNS lookup result.</param>
            <param name="port">The port for the IP end point.</param>
            <returns>An IP end point or null.</returns>
        </member>
        <member name="M:SIPSorcery.Net.STUNDns.CreateLookupClient">
            <summary>
            Creates a LookupClient
            </summary>
            <returns>A LookupClient</returns>
        </member>
        <member name="T:SIPSorcery.Net.STUNClassTypesEnum">
            <summary>
            The class is interpreted from the message type. It does not get explicitly
            set in the STUN header.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.STUNMessage.isFingerprintValid">
            <summary>
            For parsed STUN messages this indicates whether a valid fingerprint
            as attached to the message.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.STUNMessage._receivedBuffer">
            <summary>
            For received STUN messages this is the raw buffer.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.STUNMessage.CheckIntegrity(System.Byte[])">
            <summary>
            Check that the message integrity attribute is correct.
            </summary>
            <param name="messageIntegrityKey">The message integrity key that was used to generate
            the HMAC for the original message.</param>
            <returns>True if the fingerprint and HMAC of the STUN message are valid. False if not.</returns>
        </member>
        <member name="T:SIPSorcery.Net.STUNProtocolsEnum">
            <summary>
            A list of the transport layer protocols that are supported by STUNand TURN (the network layers
            supported are IPv4 mad IPv6).
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.STUNProtocolsEnum.udp">
            <summary>
            User Datagram Protocol.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.STUNProtocolsEnum.tcp">
            <summary>.
            Transmission Control Protocol
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.STUNProtocolsEnum.tls">
            <summary>
            Transport Layer Security.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.STUNProtocolsEnum.dtls">
            <summary>
            Transport Layer Security over UDP.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.STUNUri.ExplicitPort">
            <summary>
            If the port is specified in a URI it affects the way a DNS lookup occurs.
            An explicit port means to lookup the A or AAAA record directly without
            checking for SRV records.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.STUNUri.Protocol">
            <summary>
            The network protocol for this URI type.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.DataChannelTypes.DATA_CHANNEL_RELIABLE">
            <summary>
            The data channel provides a reliable in-order bidirectional communication.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.DataChannelTypes.DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT">
            <summary>
            The data channel provides a partially reliable in-order bidirectional
            communication. User messages will not be retransmitted more
            times than specified in the Reliability Parameter
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.DataChannelTypes.DATA_CHANNEL_PARTIAL_RELIABLE_TIMED">
            <summary>
            The data channel provides a partially reliable in-order bidirectional
            communication. User messages might not be transmitted or
            retransmitted after a specified lifetime given in milliseconds
            in the Reliability Parameter. This lifetime starts when
            providing the user message to the protocol stack.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.DataChannelTypes.DATA_CHANNEL_RELIABLE_UNORDERED">
            <summary>
            The data channel provides a reliable unordered bidirectional communication.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.DataChannelTypes.DATA_CHANNEL_PARTIAL_RELIABLE_REXMIT_UNORDERED">
            <summary>
            The data channel provides a partially reliable unordered bidirectional
            communication. User messages will not be retransmitted more
            times than specified in the Reliability Parameter.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.DataChannelTypes.DATA_CHANNEL_PARTIAL_RELIABLE_TIMED_UNORDERED">
            <summary>
            The data channel provides a partially reliable unordered bidirectional
            communication. User messages might not be transmitted or
            retransmitted after a specified lifetime given in milliseconds
            in the Reliability Parameter. This lifetime starts when
            providing the user message to the protocol stack.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.DataChannelOpenMessage">
            <summary>
            Represents a Data Channel Establishment Protocol (DECP) OPEN message.
            This message is initially sent using the data channel on the stream
            used for user messages.
            </summary>
            <remarks>
            See https://tools.ietf.org/html/rfc8832#section-5.1
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.DataChannelOpenMessage.MessageType">
            <summary>
             This field holds the IANA-defined message type for the
            DATA_CHANNEL_OPEN message.The value of this field is 0x03.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.DataChannelOpenMessage.ChannelType">
            <summary>
            This field specifies the type of data channel to be opened.
            For a list of the formal options <see cref="T:SIPSorcery.Net.DataChannelTypes"/>.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.DataChannelOpenMessage.Priority">
            <summary>
            The priority of the data channel.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.DataChannelOpenMessage.Reliability">
            <summary>
            Used to set tolerance for partially reliable data channels.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.DataChannelOpenMessage.Label">
            <summary>
            The name of the data channel. May be an empty string.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.DataChannelOpenMessage.Protocol">
            <summary>
            If it is a non-empty string, it specifies a protocol registered in the
            "WebSocket Subprotocol Name Registry" created in RFC6455.
            </summary>
            <remarks>
            The websocket subprotocol names and specification are available at
            https://tools.ietf.org/html/rfc7118
            </remarks>
        </member>
        <member name="M:SIPSorcery.Net.DataChannelOpenMessage.Parse(System.Byte[],System.Int32)">
            <summary>
            Parses the an DCEP open message from a buffer.
            </summary>
            <param name="buffer">The buffer to parse the message from.</param>
            <param name="posn">The position in the buffer to start parsing from.</param>
            <returns>A new DCEP open message instance.</returns>
        </member>
        <member name="M:SIPSorcery.Net.DataChannelOpenMessage.GetLength">
            <summary>
            Gets the length of the serialised DCEP OPEN message.
            </summary>
            <returns>The serialised length of this DECEP OPEN message.</returns>
        </member>
        <member name="M:SIPSorcery.Net.DataChannelOpenMessage.WriteTo(System.Byte[],System.Int32)">
            <summary>
            Serialises a Data Channel Establishment Protocol (DECP) OPEN message to a 
            pre-allocated buffer.
            </summary>
            <param name="buffer">The buffer to write the serialised chunk bytes to. It
            must have the required space already allocated.</param>
            <param name="posn">The position in the buffer to write to.</param>
            <returns>The number of bytes, including padding, written to the buffer.</returns>
        </member>
        <member name="M:SIPSorcery.Net.DataChannelOpenMessage.GetBytes">
            <summary>
            Serialises the DCEP OPEN message to a buffer.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCDataChannelState.connecting">
            <summary>
            The user agent is attempting to establish the underlying data transport. 
            This is the initial state of an RTCDataChannel object, whether created 
            with createDataChannel, or dispatched as a part of an RTCDataChannelEvent.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCDataChannelState.open">
            <summary>
            The underlying data transport is established and communication is possible.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCDataChannelState.closing">
            <summary>
            The procedure to close down the underlying data transport has started.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCDataChannelState.closed">
            <summary>
            The underlying data transport has been closed or could not be established.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.IRTCDataChannel">
            <summary>
            The RTCDataChannel interface represents a bi-directional data channel between two peers.
            </summary>
            <remarks>
            Specification https://www.w3.org/TR/webrtc/#webidl-1143016005
            </remarks>
        </member>
        <member name="P:SIPSorcery.Net.IRTCDataChannel.label">
            <summary>
            The label attribute represents a label that can be used to distinguish this RTCDataChannel 
            object from other RTCDataChannel objects. Scripts are allowed to create multiple RTCDataChannel 
            objects with the same label. On getting, the attribute MUST return the value of the [[DataChannelLabel]] slot.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IRTCDataChannel.ordered">
            <summary>
            The ordered attribute returns true if the RTCDataChannel is ordered, and false if out of order delivery 
            is allowed. On getting, the attribute MUST return the value of the [[Ordered]] slot
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IRTCDataChannel.maxPacketLifeTime">
            <summary>
            he maxPacketLifeTime attribute returns the length of the time window (in milliseconds) during which 
            transmissions and retransmissions may occur in unreliable mode. On getting, the attribute MUST return the 
            value of the [[MaxPacketLifeTime]] slot.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IRTCDataChannel.maxRetransmits">
            <summary>
            The maxRetransmits attribute returns the maximum number of retransmissions that are attempted in unreliable mode. 
            On getting, the attribute MUST return the value of the [[MaxRetransmits]] slot.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IRTCDataChannel.protocol">
            <summary>
            The protocol attribute returns the name of the sub-protocol used with this RTCDataChannel. On getting, the 
            attribute MUST return the value of the [[DataChannelProtocol]] slot.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IRTCDataChannel.negotiated">
            <summary>
            he negotiated attribute returns true if this RTCDataChannel was negotiated by the application, or false otherwise. 
            On getting, the attribute MUST return the value of the [[Negotiated]] slot.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IRTCDataChannel.id">
            <summary>
            The id attribute returns the ID for this RTCDataChannel. The value is initially null, which is what will be returned if 
            the ID was not provided at channel creation time, and the DTLS role of the SCTP transport has not yet been negotiated. 
            Otherwise, it will return the ID that was either selected by the script or generated by the user agent according to 
            [RTCWEB-DATA-PROTOCOL]. After the ID is set to a non-null value, it will not change. On getting, the attribute MUST return 
            the value of the [[DataChannelId]] slot.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IRTCDataChannel.readyState">
            <summary>
            The readyState attribute represents the state of the RTCDataChannel object. On getting, the attribute MUST return the 
            value of the [[ReadyState]] slot.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IRTCDataChannel.bufferedAmount">
            <summary>
            The bufferedAmount attribute MUST, on getting, return the value of the [[BufferedAmount]] slot. The attribute exposes the 
            number of bytes of application data (UTF-8 text and binary data) that have been queued using send(). Even though the data 
            transmission can occur in parallel, the returned value MUST NOT be decreased before the current task yielded back to the 
            event loop to prevent race conditions. The value does not include framing overhead incurred by the protocol, or buffering 
            done by the operating system or network hardware. The value of the [[BufferedAmount]] slot will only increase with each 
            call to the send() method as long as the [[ReadyState]] slot is open; however, the slot does not reset to zero once the 
            channel closes. When the underlying data transport sends data from its queue, the user agent MUST queue a task that reduces 
            [[BufferedAmount]] with the number of bytes that was sent.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.IRTCDataChannel.bufferedAmountLowThreshold">
            <summary>
            The bufferedAmountLowThreshold attribute sets the threshold at which the bufferedAmount is considered to be low. When the 
            bufferedAmount decreases from above this threshold to equal or below it, the bufferedamountlow event fires. The 
            bufferedAmountLowThreshold is initially zero on each new RTCDataChannel, but the application may change its value at any time.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.IRTCDataChannel.onopen">
            <summary>
            The RTCDataChannel object's underlying data transport has been established (or re-established).
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.IRTCDataChannel.onmessage">
            <summary>
            A message was successfully received.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCOfferOptions.X_ExcludeIceCandidates">
            <summary>
            If set it indicates that any available ICE candidates should NOT be added
            to the offer SDP. By default "host" candidates should always be available
            and will be added to the offer SDP.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTCAnswerOptions">
            <summary>
            Options for creating an SDP answer.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#dictionary-rtcofferansweroptions-members.
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.RTCAnswerOptions.X_ExcludeIceCandidates">
            <summary>
            If set it indicates that any available ICE candidates should NOT be added
            to the offer SDP. By default "host" candidates should always be available
            and will be added to the offer SDP.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTCIceCredentialType">
            <summary>
            The types of credentials for an ICE server.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#rtcicecredentialtype-enum.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.RTCIceServer">
            <summary>
            Used to specify properties for a STUN or TURN server that can be used by an ICE agent.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#rtciceserver-dictionary.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.RTCIceTransportPolicy">
            <summary>
            Determines which ICE candidates can be used for a peer connection.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#dom-rtcicetransportpolicy.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.RTCBundlePolicy">
            <summary>
            Affects which media tracks are negotiated if the remote end point is not bundle aware.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#dom-rtcbundlepolicy.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.RTCRtcpMuxPolicy">
            <summary>
            The RTCP multiplex options for ICE candidates. This option is currently redundant
            since the single option means RTCP multiplexing MUST be available or the SDP negotiation
            will fail.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#dom-rtcrtcpmuxpolicy.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.RTCDtlsFingerprint">
            <summary>
            Represents a fingerprint of a certificate used to authenticate WebRTC communications.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCDtlsFingerprint.algorithm">
            <summary>
            One of the hash function algorithms defined in the 'Hash function Textual Names' registry.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCDtlsFingerprint.value">
            <summary>
            The value of the certificate fingerprint in lower-case hex string as expressed utilising 
            the syntax of 'fingerprint' in [RFC4572] Section 5.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCDtlsFingerprint.TryParse(System.String,SIPSorcery.Net.RTCDtlsFingerprint@)">
            <summary>
            Attempts to parse the fingerprint fields from a string.
            </summary>
            <param name="str">The string to parse from.</param>
            <param name="fingerprint">If successful a fingerprint object.</param>
            <returns>True if a fingerprint was successfully parsed. False if not.</returns>
        </member>
        <member name="T:SIPSorcery.Net.RTCCertificate">
            <summary>
            Represents a certificate used to authenticate WebRTC communications.
            </summary>
            <remarks>
            TODO:
            From https://www.w3.org/TR/webrtc/#methods-4:
            "Implementations SHOULD store the sensitive keying material in a secure module safe from 
            same-process memory attacks."
            </remarks>
        </member>
        <member name="P:SIPSorcery.Net.RTCCertificate.expires">
            <summary>
            The expires attribute indicates the date and time in milliseconds relative to 1970-01-01T00:00:00Z 
            after which the certificate will be considered invalid by the browser.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTCCertificate2">
            <summary>
            Represents a certificate used to authenticate WebRTC communications.
            </summary>
            <remarks>
            TODO:
            From https://www.w3.org/TR/webrtc/#methods-4:
            "Implementations SHOULD store the sensitive keying material in a secure module safe from 
            same-process memory attacks."
            </remarks>
        </member>
        <member name="P:SIPSorcery.Net.RTCCertificate2.expires">
            <summary>
            The expires attribute indicates the date and time in milliseconds relative to 1970-01-01T00:00:00Z 
            after which the certificate will be considered invalid by the browser.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTCConfiguration">
            <summary>
            Defines the parameters to configure how a new RTCPeerConnection is created.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#rtcconfiguration-dictionary.
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.RTCConfiguration.X_DisableExtendedMasterSecretKey">
            <summary>
            The Bouncy Castle DTLS logic enforces the use of Extended Master 
            Secret Keys as per RFC7627. Some WebRTC implementations do not support
            Extended Master Secret Keys (for example Kurento in Mar 2021) and this 
            configuration option is made available for cases where an application
            explicitly decides it's acceptable to disable them.
            </summary>
            <remarks>
            From  https://tools.ietf.org/html/rfc7627#section-4:
            "Clients and servers SHOULD NOT accept handshakes that do not use the
            extended master secret, especially if they rely on features like
            compound authentication that fall into the vulnerable cases described
            in Section 6.1."
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.RTCConfiguration.iceCandidatePoolSize">
            <summary>
            Size of the pre-fetched ICE pool. Defaults to 0.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCConfiguration.X_BindAddress">
            <summary>
            Optional. If specified this address will be used as the bind address for any RTP
            and control sockets created. Generally this address does not need to be set. The default behaviour
            is to bind to [::] or 0.0.0.0, depending on system support, which minimises network routing
            causing connection issues.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCConfiguration.X_UseRtpFeedbackProfile">
            <summary>
            Optional. If set to true the feedback profile set in the SDP offers and answers will be
            UDP/TLS/RTP/SAVPF instead of UDP/TLS/RTP/SAVP.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCConfiguration.X_ICEIncludeAllInterfaceAddresses">
            <summary>
            When gathering host ICE candidates for the local machine the default behaviour is
            to only use IP addresses on the interface that the OS routing table selects to connect
            to the destination, or the Internet facing interface if the destination is unknown.
            This default behaviour is to shield the leaking of all local IP addresses into ICE 
            candidates. In some circumstances, and after weighing up the security concerns, 
            it's very useful to include all interfaces in when generating the address list. 
            Setting this parameter to true will cause all interfaces to be used irrespective of 
            the destination address
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTCSignalingState">
            <summary>
            Signalling states for a WebRTC peer connection.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#dom-rtcsignalingstate.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.RTCPeerConnectionState">
            <summary>
            The states a peer connection transitions through.
            The difference between the IceConnectionState and the PeerConnectionState is somewhat subtle:
            - IceConnectionState: applies to the connection checks amongst ICE candidates and is
              set as completed as soon as a local and remote candidate have set their nominated candidate,
            - PeerConnectionState: takes into account the IceConnectionState but also includes the DTLS
              handshake and actions at the application layer such as a request to close the peer connection.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#rtcpeerconnectionstate-enum.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.IRTCRtpSender">
            <summary>
            The RTCRtpSender interface allows an application to control how a given MediaStreamTrack 
            is encoded and transmitted to a remote peer. When setParameters is called on an 
            RTCRtpSender object, the encoding is changed appropriately.
            </summary>
            <remarks>
            As specified at https://www.w3.org/TR/webrtc/#rtcrtpsender-interface.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.IRTCRtpReceiver">
            <summary>
            The RTCRtpReceiver interface allows an application to inspect the receipt of a MediaStreamTrack.
            </summary>
            <remarks>
            As specified at https://www.w3.org/TR/webrtc/#rtcrtpreceiver-interface.
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.DataChannelPayloadProtocols">
            <summary>
            The assignments for SCTP payload protocol IDs used with
            WebRTC data channels.
            </summary>
            <remarks>
            See https://tools.ietf.org/html/rfc8831#section-8
            </remarks>
        </member>
        <member name="T:SIPSorcery.Net.RTCDataChannel">
            <summary>
            A WebRTC data channel is generic transport service
            that allows peers to exchange generic data in a peer
            to peer manner.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCDataChannel.SetError(System.String)">
            <summary>
            Sets the error message is there was a problem creating the data channel.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCDataChannel.send(System.String)">
            <summary>
            Sends a string data payload on the data channel.
            </summary>
            <param name="message">The string message to send.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCDataChannel.send(System.Byte[])">
            <summary>
            Sends a binary data payload on the data channel.
            </summary>
            <param name="data">The data to send.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCDataChannel.SendDcepOpen">
            <summary>
            Sends an OPEN Data Channel Establishment Protocol (DCEP) message
            to open a data channel on the remote peer for send/receive.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCDataChannel.SendDcepAck">
            <summary>
            Sends an ACK response for a Data Channel Establishment Protocol (DCEP)
            control message.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCDataChannel.GotData(System.UInt16,System.UInt16,System.UInt32,System.Byte[])">
            <summary>
            Event handler for an SCTP data chunk being received for this data channel.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTCSessionDescriptionInit">
            <summary>
            Initialiser for the RTCSessionDescription instance.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#rtcsessiondescription-class.
            </remarks>
        </member>
        <member name="P:SIPSorcery.Net.RTCSessionDescriptionInit.type">
            <summary>
            The type of the Session Description.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCSessionDescriptionInit.sdp">
            <summary>
            A string representation of the Session Description.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.RTCPeerConnection">
            <summary>
            Represents a WebRTC RTCPeerConnection.
            </summary>
            <remarks>
            Interface is defined in https://www.w3.org/TR/webrtc/#interface-definition.
            The Session Description offer/answer mechanisms are detailed in
            https://tools.ietf.org/html/rfc8829 "JavaScript Session Establishment Protocol (JSEP)".
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.RTCPeerConnection.SCTP_ASSOCIATE_TIMEOUT_SECONDS">
            <summary>
            The period to wait for the SCTP association to complete before giving up.
            In theory this should be very quick as the DTLS connection should already have been established
            and the SCTP logic only needs to send the small handshake messages to establish
            the association.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCPeerConnection._applicationIceCandidates">
            <summary>
            Local ICE candidates that have been supplied directly by the application.
            Useful for cases where the application may has extra information about the
            network set up such as 1:1 NATs as used by Azure and AWS.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPeerConnection.IceRole">
            <summary>
            The ICE role the peer is acting in.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPeerConnection.RemotePeerDtlsFingerprint">
            <summary>
            The DTLS fingerprint supplied by the remote peer in their SDP. Needs to be checked
            that the certificate supplied during the DTLS handshake matches.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPeerConnection.DtlsCertificateFingerprint">
            <summary>
            The fingerprint of the certificate being used to negotiate the DTLS handshake with the 
            remote peer.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCPeerConnection.sctp">
            <summary>
            The SCTP transport over which SCTP data is sent and received.
            </summary>
            <remarks>
            WebRTC API definition:
            https://www.w3.org/TR/webrtc/#attributes-15
            </remarks>
        </member>
        <member name="E:SIPSorcery.Net.RTCPeerConnection.onnegotiationneeded">
            <summary>
            Informs the application that session negotiation needs to be done (i.e. a createOffer call 
            followed by setLocalDescription).
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTCPeerConnection.onicecandidate">
            <summary>
            A new ICE candidate is available for the Peer Connection.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTCPeerConnection.onicecandidateerror">
            <summary>
            A failure occurred when gathering ICE candidates.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTCPeerConnection.onsignalingstatechange">
            <summary>
            The signaling state has changed. This state change is the result of either setLocalDescription or 
            setRemoteDescription being invoked.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTCPeerConnection.oniceconnectionstatechange">
            <summary>
            This Peer Connection's ICE connection state has changed.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTCPeerConnection.onicegatheringstatechange">
            <summary>
            This Peer Connection's ICE gathering state has changed.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTCPeerConnection.onconnectionstatechange">
            <summary>
            The state of the peer connection. A state of connected means the ICE checks have 
            succeeded and the DTLS handshake has completed. Once in the connected state it's
            suitable for media packets can be exchanged.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTCPeerConnection.ondatachannel">
            <summary>
            Fires when a new data channel is created by the remote peer.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.#ctor">
            <summary>
            Constructor to create a new RTC peer connection instance.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.#ctor(SIPSorcery.Net.RTCConfiguration,System.Int32,SIPSorcery.Sys.PortRange,System.Boolean)">
            <summary>
            Constructor to create a new RTC peer connection instance.
            </summary>
            <param name="configuration">Optional.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.IceConnectionStateChange(SIPSorcery.Net.RTCIceConnectionState)">
            <summary>
            Event handler for ICE connection state changes.
            </summary>
            <param name="iceState">The new ICE connection state.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.CreateRtpChannel">
            <summary>
            Creates a new RTP ICE channel (which manages the UDP socket sending and receiving RTP
            packets) for use with this session.
            </summary>
            <returns>A new RTPChannel instance.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.setLocalDescription(SIPSorcery.Net.RTCSessionDescriptionInit)">
            <summary>
            Sets the local SDP.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#dom-peerconnection-setlocaldescription.
            </remarks>
            <param name="init">Optional. The session description to set as 
            local description. If not supplied then an offer or answer will be created as required.
            </param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.SetRemoteDescription(SIPSorcery.SIP.App.SdpType,SIPSorcery.Net.SDP)">
            <summary>
            This set remote description overload is a convenience method for SIP/VoIP callers
            instead of WebRTC callers. The method signature better matches what the SIP
            user agent is expecting.
            TODO: Using two very similar overloads could cause confusion. Possibly
            consolidate.
            </summary>
            <param name="sdpType">Whether the remote SDP is an offer or answer.</param>
            <param name="sessionDescription">The SDP from the remote party.</param>
            <returns>The result of attempting to set the remote description.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.setRemoteDescription(SIPSorcery.Net.RTCSessionDescriptionInit)">
            <summary>
            Updates the session after receiving the remote SDP.
            </summary>
            <param name="init">The answer/offer SDP from the remote party.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.Close(System.String)">
            <summary>
            Close the session including the underlying RTP session and channels.
            </summary>
            <param name="reason">An optional descriptive reason for the closure.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.close">
            <summary>
            Closes the connection with the default reason.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.createOffer(SIPSorcery.Net.RTCOfferOptions)">
            <summary>
            Generates the SDP for an offer that can be made to a remote peer.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-createoffer.
            </remarks>
            <param name="options">Optional. If supplied the options will be sued to apply additional
            controls over the generated offer SDP.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.CreateOffer(System.Net.IPAddress)">
            <summary>
            Convenience overload to suit SIP/VoIP callers.
            TODO: Consolidate with createAnswer.
            </summary>
            <param name="connectionAddress">Not used.</param>
            <returns>An SDP payload to answer an offer from the remote party.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.CreateAnswer(System.Net.IPAddress)">
            <summary>
            Convenience overload to suit SIP/VoIP callers.
            TODO: Consolidate with createAnswer.
            </summary>
            <param name="connectionAddress">Not used.</param>
            <returns>An SDP payload to answer an offer from the remote party.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.createAnswer(SIPSorcery.Net.RTCAnswerOptions)">
            <summary>
            Creates an answer to an SDP offer from a remote peer.
            </summary>
            <remarks>
            As specified in https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-createanswer and
            https://tools.ietf.org/html/rfc3264#section-6.1.
            </remarks>
            <param name="options">Optional. If supplied the options will be used to apply additional
            controls over the generated answer SDP.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.SetRemoteCredentials(System.String,System.String)">
            <summary>
            For standard use this method should not need to be called. The remote peer's ICE
            user and password will be set when from the SDP. This method is provided for 
            diagnostics purposes.
            </summary>
            <param name="remoteIceUser">The remote peer's ICE user value.</param>
            <param name="remoteIcePassword">The remote peer's ICE password value.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.GetRtpChannel">
            <summary>
            Gets the RTP channel being used to send and receive data on this peer connection.
            Unlike the base RTP session peer connections only ever use a single RTP channel.
            Audio and video (and RTCP) are all multiplexed on the same channel.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.createBaseSdp(System.Collections.Generic.List{SIPSorcery.net.RTP.MediaStream},System.Boolean)">
            <summary>
            Generates the base SDP for an offer or answer. The SDP will then be tailored depending
            on whether it's being used in an offer or an answer.
            </summary>
            <param name="mediaStreamList">THe media streamss to add to the SDP description.</param>
            <param name="excludeIceCandidates">If true it indicates the caller does not want ICE candidates added
            to the SDP.</param>
            <remarks>
            From https://tools.ietf.org/html/draft-ietf-mmusic-ice-sip-sdp-39#section-4.2.5:
              "The transport address from the peer for the default destination
              is set to IPv4/IPv6 address values "0.0.0.0"/"::" and port value
              of "9".  This MUST NOT be considered as a ICE failure by the peer
              agent and the ICE processing MUST continue as usual."
            </remarks>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.OnRTPDataReceived(System.Int32,System.Net.IPEndPoint,System.Byte[])">
            <summary>
            From RFC5764: <![CDATA[
                        +----------------+
                        | 127 < B< 192  -+--> forward to RTP
                        |                |
            packet -->  |  19 < B< 64   -+--> forward to DTLS
                        |                |
                        |       B< 2    -+--> forward to STUN
                        +----------------+
            ]]>
            </summary>
            <paramref name="localPort">The local port on the RTP socket that received the packet.</paramref>
            <param name="remoteEP">The remote end point the packet was received from.</param>
            <param name="buffer">The data received.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.addLocalIceCandidate(SIPSorcery.Net.RTCIceCandidate)">
            <summary>
            Used to add a local ICE candidate. These are for candidates that the application may
            want to provide in addition to the ones that will be automatically determined. An
            example is when a machine is behind a 1:1 NAT and the application wants a host 
            candidate with the public IP address to be included.
            </summary>
            <param name="candidate">The ICE candidate to add.</param>
            <example>
            var natCandidate = new RTCIceCandidate(RTCIceProtocol.udp, natAddress, natPort, RTCIceCandidateType.host);
            pc.addLocalIceCandidate(natCandidate);
            </example>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.addIceCandidate(SIPSorcery.Net.RTCIceCandidateInit)">
            <summary>
            Used to add remote ICE candidates to the peer connection's checklist.
            </summary>
            <param name="candidateInit">The remote ICE candidate to add.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.restartIce">
            <summary>
            Restarts the ICE session gathering and connection checks.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.getConfiguration">
            <summary>
            Gets the initial optional configuration settings this peer connection was created
            with.
            </summary>
            <returns>If available the initial configuration options.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.setConfiguration(SIPSorcery.Net.RTCConfiguration)">
            <summary>
            Not implemented. Configuration options cannot currently be changed once the peer
            connection has been initialised.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.UpdatedSctpDestinationPort">
            <summary>
            Once the SDP exchange has been made the SCTP transport ports are known. If the destination
            port is not using the default value attempt to update it on teh SCTP transprot.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.StartOnNegotiationNeededTask">
            <summary>
            These internal function is used to call Renegotiation Event with delay as the user should call addTrack/removeTrack in sequence so we need a small delay to prevent multiple renegotiation calls
            </summary>
            <returns>Current Executing Task</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.CancelOnNegotiationNeededTask">
            <summary>
            Cancel current Negotiation Event Call to prevent running thread to call OnNegotiationNeeded
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.InitialiseSctpTransport">
            <summary>
            Initialises the SCTP transport. This will result in the DTLS SCTP transport listening 
            for incoming INIT packets if the remote peer attempts to create the association. The local
            peer will NOT attempt to establish the association at this point. It's up to the
            application to specify it wants a data channel to initiate the SCTP association attempt.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.OnSctpTransportStateChanged(SIPSorcery.Net.RTCSctpTransportState)">
            <summary>
            Event handler for changes to the SCTP transport state.
            </summary>
            <param name="state">The new transport state.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.OnSctpAssociationNewDataChannel(System.UInt16,SIPSorcery.Net.DataChannelTypes,System.UInt16,System.UInt32,System.String,System.String)">
            <summary>
            Event handler for a new data channel being opened by the remote peer.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.OnSctpAssociationDataChannelOpened(System.UInt16)">
            <summary>
            Event handler for the confirmation that a data channel opened by this peer has been acknowledged.
            </summary>
            <param name="streamID">The ID of the stream corresponding to the acknowledged data channel.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.OnSctpAssociationDataChunk(SIPSorcery.Net.SctpDataFrame)">
            <summary>
            Event handler for an SCTP DATA chunk being received on the SCTP association.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.InitialiseSctpAssociation">
            <summary>
            When a data channel is requested an SCTP association is needed. This method attempts to 
            initialise the association if it is not already available.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.createDataChannel(System.String,SIPSorcery.Net.RTCDataChannelInit)">
            <summary>
            Adds a new data channel to the peer connection.
            </summary>
            <remarks>
            WebRTC API definition:
            https://www.w3.org/TR/webrtc/#methods-11
            </remarks>
            <param name="label">The label used to identify the data channel.</param>
            <returns>The data channel created.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.OpenDataChannel(SIPSorcery.Net.RTCDataChannel)">
            <summary>
            Sends the Data Channel Establishment Protocol (DCEP) OPEN message to configure the data
            channel on the remote peer.
            </summary>
            <param name="dataChannel">The data channel to open.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.DoDtlsHandshake(SIPSorcery.Net.DtlsSrtpTransport)">
            <summary>
             DtlsHandshake requires DtlsSrtpTransport to work.
             DtlsSrtpTransport is similar to C++ DTLS class combined with Srtp class and can perform 
             Handshake as Server or Client in same call. The constructor of transport require a DtlsStrpClient 
             or DtlsSrtpServer to work.
            </summary>
            <param name="dtlsHandle">The DTLS transport handle to perform the handshake with.</param>
            <returns>True if the DTLS handshake is successful or false if not.</returns>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.OnDtlsAlert(SIPSorcery.Net.AlertLevelsEnum,SIPSorcery.Net.AlertTypesEnum,System.String)">
            <summary>
            Event handler for TLS alerts from the DTLS transport.
            </summary>
            <param name="alertLevel">The level of the alert: warning or critical.</param>
            <param name="alertType">The type of the alert.</param>
            <param name="alertDescription">An optional description for the alert.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.Dispose(System.Boolean)">
            <summary>
            Close the session if the instance is out of scope.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerConnection.Dispose">
            <summary>
            Close the session if the instance is out of scope.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCPeerSctpAssociation._rtcSctpTransport">
            <summary>
            The DTLS transport to send and receive SCTP packets on.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTCPeerSctpAssociation.OnDataChannelData">
            <summary>
            Event notifications for user data on an SCTP stream representing a data channel.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTCPeerSctpAssociation.OnDataChannelOpened">
            <summary>
            Event notifications for the request to open a data channel being confirmed. This
            event corresponds to the DCEP ACK message for a DCEP OPEN message by this peer.
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTCPeerSctpAssociation.OnNewDataChannel">
            <summary>
            Event notification for a new data channel open request from the remote peer.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerSctpAssociation.#ctor(SIPSorcery.Net.RTCSctpTransport,System.UInt16,System.UInt16,System.Int32)">
            <summary>
            Creates a new SCTP association with the remote peer.
            </summary>
            <param name="rtcSctpTransport">The DTLS transport that will be used to encapsulate the
            SCTP packets.</param>
            <param name="srcPort">The source port to use when forming the association.</param>
            <param name="dstPort">The destination port to use when forming the association.</param>
            <param name="dtlsPort">Optional. The local UDP port being used for the DTLS connection. This
            will be set on the SCTP association to aid in diagnostics.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCPeerSctpAssociation.OnDataFrameReceived(SIPSorcery.Net.SctpDataFrame)">
            <summary>
            Event handler for a DATA chunk being received. The chunk can be either a DCEP message or data channel data
            payload.
            </summary>
            <param name="dataFrame">The received data frame which could represent one or more chunks depending
            on fragmentation..</param>
        </member>
        <member name="T:SIPSorcery.Net.RTCSctpTransport">
            <summary>
            Represents an SCTP transport that uses a DTLS transport.
            </summary>
            <remarks>
            DTLS encapsulation of SCTP: 
            https://tools.ietf.org/html/rfc8261
            
            WebRTC API RTCSctpTransport Interface definition:
            https://www.w3.org/TR/webrtc/#webidl-1410933428
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.RTCSctpTransport.RECEIVE_TIMEOUT_MILLISECONDS">
            <summary>
            The DTLS transport has no mechanism to cancel a pending receive. The workaround is
            to set a timeout on each receive call.
            </summary>
        </member>
        <member name="F:SIPSorcery.Net.RTCSctpTransport.SCTP_DEFAULT_MAX_MESSAGE_SIZE">
            <summary>
            The default maximum size of payload that can be sent on a data channel.
            </summary>
            <remarks>
            https://www.w3.org/TR/webrtc/#sctp-transport-update-mms
            </remarks>
        </member>
        <member name="P:SIPSorcery.Net.RTCSctpTransport.IsPortAgnostic">
            <summary>
            The SCTP ports are redundant for a DTLS transport. There will only ever be one
            SCTP association so the SCTP ports do not need to be used for end point matching.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCSctpTransport.transport">
            <summary>
            The transport over which all SCTP packets for data channels 
            will be sent and received.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCSctpTransport.IsDtlsClient">
            <summary>
            Indicates the role of this peer in the DTLS connection. This influences
            the selection of stream ID's for SCTP messages.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCSctpTransport.state">
            <summary>
            The current state of the SCTP transport.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.RTCSctpTransport.maxMessageSize">
            <summary>
            The maximum size of data that can be passed to RTCDataChannel's send() method.
            </summary>
            <remarks>
            See https://www.w3.org/TR/webrtc/#sctp-transport-update-mms.
            </remarks>
        </member>
        <member name="F:SIPSorcery.Net.RTCSctpTransport.maxChannels">
            <summary>
            The maximum number of data channel's that can be used simultaneously (where each
            data channel is a stream on the same SCTP association).
            </summary>
        </member>
        <member name="E:SIPSorcery.Net.RTCSctpTransport.OnStateChanged">
            <summary>
            Event for notifications about changes to the SCTP transport state.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCSctpTransport.#ctor(System.UInt16,System.UInt16,System.Int32)">
            <summary>
            Creates a new SCTP transport that runs on top of an established DTLS connection.
            </summary>
            <param name="sourcePort">The SCTP source port.</param>
            <param name="destinationPort">The SCTP destination port.</param>
            <param name="dtlsPort">Optional. The local UDP port being used for the DTLS connection. This
            will be set on the SCTP association to aid in diagnostics.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCSctpTransport.UpdateSourcePort(System.UInt16)">
            <summary>
            Attempts to update the SCTP source port the association managed by this transport will use.
            </summary>
            <param name="port">The updated source port.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCSctpTransport.UpdateDestinationPort(System.UInt16)">
            <summary>
            Attempts to update the SCTP destination port the association managed by this transport will use.
            </summary>
            <param name="port">The updated destination port.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCSctpTransport.Start(Org.BouncyCastle.Tls.DatagramTransport,System.Boolean)">
            <summary>
            Starts the SCTP transport receive thread.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCSctpTransport.Associate">
            <summary>
            Attempts to create and initialise a new SCTP association with the remote party.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCSctpTransport.Close">
            <summary>
            Closes the SCTP association and stops the receive thread.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCSctpTransport.OnAssociationStateChanged(SIPSorcery.Net.SctpAssociationState)">
            <summary>
            Event handler to coordinate changes to the SCTP association state with the overall
            SCTP transport state.
            </summary>
            <param name="associationState">The state of the SCTP association.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCSctpTransport.SetState(SIPSorcery.Net.RTCSctpTransportState)">
            <summary>
            Sets the state for the SCTP transport.
            </summary>
            <param name="newState">The new state to set.</param>
        </member>
        <member name="M:SIPSorcery.Net.RTCSctpTransport.GetInitAckCookie(System.UInt16,System.UInt16,System.UInt32,System.UInt32,System.UInt32,System.String,System.Int32)">
            <summary>
            Gets a cookie to send in an INIT ACK chunk. This SCTP
            transport for a WebRTC peer connection needs to use the same
            local tag and TSN in every chunk as only a single association
            is ever maintained.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCSctpTransport.DoReceive(System.Object)">
            <summary>
            This method runs on a dedicated thread to listen for incoming SCTP
            packets on the DTLS transport.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.RTCSctpTransport.Send(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is called by the SCTP association when it wants to send an SCTP packet
            to the remote party.
            </summary>
            <param name="associationID">Not used for the DTLS transport.</param>
            <param name="buffer">The buffer containing the data to send.</param>
            <param name="offset">The position in the buffer to send from.</param>
            <param name="length">The number of bytes to send.</param>
        </member>
        <member name="T:SIPSorcery.Net.WebRTCRestSignalingPeer">
            <summary>
            This class is not a required component for using WebRTC. It is a
            convenience class provided to perform the signalling via a HTTP REST server.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.WebRTCRestSignalingPeer.OfferOptions">
            <summary>
            Optional property to allow the peer connection SDP offer options to be set.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.WebRTCRestSignalingPeer.AnswerOptions">
            <summary>
            Optional property to allow the peer connection SDP answer options to be set.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.WebRTCRestSignalingPeer.FilterRemoteICECandidates">
            <summary>
            Optional filter that can be applied to remote ICE candidates. The filter is 
            primarily intended for use in testing. In real application scenarios it's 
            normally desirable to accept all remote ICE candidates.
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.WebRTCRestSignalingPeer.#ctor(System.String,System.String,System.String,System.Func{System.Threading.Tasks.Task{SIPSorcery.Net.RTCPeerConnection}})">
            <summary>
            Default constructor.
            </summary>
            <param name="restServerUri">The base URI of the HTTP REST server API.</param>
            <param name="ourID">The arbitrary ID this peer is using.</param>
            <param name="theirID">The arbitrary ID the remote peer is using.</param>
            <param name="createPeerConnection">Function delegate used to create a new WebRTC peer connection.</param>
        </member>
        <member name="M:SIPSorcery.Net.WebRTCRestSignalingPeer.Start(System.Threading.CancellationTokenSource)">
            <summary>
            Creates a new WebRTC peer connection and then starts polling the REST server.
            If there is an offer waiting for this peer it will be retrieved and an answer posted.
            If no offer is available we will post one and then poll for the answer,
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.WebRTCRestSignalingPeer.SendOffer(System.Net.Http.HttpClient)">
            <summary>
            Creates a new WebRTC peer connection and send an SDP offer to the REST server.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.WebRTCWebSocketClient">
            <summary>
            This class is NOT a required component for using WebRTC. It is a
            convenience class provided to assist when using a corresponding WebRTC peer 
            running a web socket server (which is the case for most of the demo applications
            that go with this library).
            </summary>
        </member>
        <member name="M:SIPSorcery.Net.WebRTCWebSocketClient.#ctor(System.String,System.Func{System.Threading.Tasks.Task{SIPSorcery.Net.RTCPeerConnection}})">
            <summary>
            Default constructor.
            </summary>
            <param name="webSocketServer">The web socket server URL to connect to for the SDP and 
            ICE candidate exchange.</param>
        </member>
        <member name="M:SIPSorcery.Net.WebRTCWebSocketClient.Start(System.Threading.CancellationToken)">
            <summary>
            Creates a new WebRTC peer connection and then starts polling the web socket server.
            An SDP offer is expected from the server. Once it has been received an SDP answer 
            will be returned.
            </summary>
        </member>
        <member name="T:SIPSorcery.Net.WebRTCWebSocketPeer">
            <summary>
            This class is NOT a required component for using WebRTC. It is a convenience
            class provided to assist when using a web socket server for the  WebRTC 
            signalling.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.WebRTCWebSocketPeer.OfferOptions">
            <summary>
            Optional property to allow the peer connection SDP offer options to be set.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.WebRTCWebSocketPeer.AnswerOptions">
            <summary>
            Optional property to allow the peer connection SDP answer options to be set.
            </summary>
        </member>
        <member name="P:SIPSorcery.Net.WebRTCWebSocketPeer.FilterRemoteICECandidates">
            <summary>
            Optional filter that can be applied to remote ICE candidates. The filter is 
            primarily intended for use in testing. In real application scenarios it's 
            normally desirable to accept all remote ICE candidates.
            </summary>
        </member>
        <member name="E:SIPSorcery.net.RTP.AudioStream.OnAudioFormatsNegotiatedByIndex">
            <summary>
            Gets fired when the remote SDP is received and the set of common audio formats is set.
            </summary>
        </member>
        <member name="P:SIPSorcery.net.RTP.AudioStream.HasAudio">
            <summary>
            Indicates whether this session is using audio.
            </summary>
        </member>
        <member name="M:SIPSorcery.net.RTP.AudioStream.SendAudio(System.UInt32,System.Byte[])">
            <summary>
            Sends an audio sample to the remote peer.
            </summary>
            <param name="durationRtpUnits">The duration in RTP timestamp units of the audio sample. This
            value is added to the previous RTP timestamp when building the RTP header.</param>
            <param name="sample">The audio sample to set as the RTP packet payload.</param>
        </member>
        <member name="M:SIPSorcery.net.RTP.AudioStream.SendAudioFrame(System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Sends an audio packet to the remote party.
            </summary>
            <param name="duration">The duration of the audio payload in timestamp units. This value
            gets added onto the timestamp being set in the RTP header.</param>
            <param name="payloadTypeID">The payload ID to set in the RTP header.</param>
            <param name="buffer">The audio payload to send.</param>
        </member>
        <member name="M:SIPSorcery.net.RTP.AudioStream.SendDtmfEvent(SIPSorcery.Net.RTPEvent,System.Threading.CancellationToken,System.Int32,System.Int32)">
            <summary>
            Sends an RTP event for a DTMF tone as per RFC2833. Sending the event requires multiple packets to be sent.
            This method will hold onto the socket until all the packets required for the event have been sent. The send
            can be cancelled using the cancellation token.
            </summary>
            <param name="rtpEvent">The RTP event to send.</param>
            <param name="cancellationToken">CancellationToken to allow the operation to be cancelled prematurely.</param>
            <param name="clockRate">To send an RTP event the clock rate of the underlying stream needs to be known.</param>
            <param name="samplePeriod">The sample period in milliseconds being used for the media stream that the event 
            is being inserted into. Should be set to 50ms if main media stream is dynamic or sample period is unknown.</param>
        </member>
        <member name="M:SIPSorcery.net.RTP.AudioStream.SendDtmf(System.Byte,System.Threading.CancellationToken)">
            <summary>
            Sends a DTMF tone as an RTP event to the remote party.
            </summary>
            <param name="key">The DTMF tone to send.</param>
            <param name="ct">RTP events can span multiple RTP packets. This token can
            be used to cancel the send.</param>
        </member>
        <member name="E:SIPSorcery.net.RTP.MediaStream.OnTimeoutByIndex">
            <summary>
            Fires when the connection for a media type is classified as timed out due to not
            receiving any RTP or RTCP packets within the given period.
            </summary>
        </member>
        <member name="E:SIPSorcery.net.RTP.MediaStream.OnSendReportByIndex">
            <summary>
            Gets fired when an RTCP report is sent. This event is for diagnostics only.
            </summary>
        </member>
        <member name="E:SIPSorcery.net.RTP.MediaStream.OnRtpPacketReceivedByIndex">
            <summary>
            Gets fired when an RTP packet is received from a remote party.
            Parameters are:
             - Remote endpoint packet was received from,
             - The media type the packet contains, will be audio or video,
             - The full RTP packet.
            </summary>
        </member>
        <member name="E:SIPSorcery.net.RTP.MediaStream.OnRtpEventByIndex">
            <summary>
            Gets fired when an RTP event is detected on the remote call party's RTP stream.
            </summary>
        </member>
        <member name="E:SIPSorcery.net.RTP.MediaStream.OnReceiveReportByIndex">
            <summary>
            Gets fired when an RTCP report is received. This event is for diagnostics only.
            </summary>
        </member>
        <member name="P:SIPSorcery.net.RTP.MediaStream.IsClosed">
            <summary>
            Indicates whether the session has been closed. Once a session is closed it cannot
            be restarted.
            </summary>
        </member>
        <member name="P:SIPSorcery.net.RTP.MediaStream.RemoteRtpEventPayloadID">
            <summary>
            In order to detect RTP events from the remote party this property needs to 
            be set to the payload ID they are using.
            </summary>
        </member>
        <member name="P:SIPSorcery.net.RTP.MediaStream.MediaType">
            <summary>
            To type of this media
            </summary>
        </member>
        <member name="P:SIPSorcery.net.RTP.MediaStream.LocalTrack">
            <summary>
            The local track. Will be null if we are not sending this media.
            </summary>
        </member>
        <member name="P:SIPSorcery.net.RTP.MediaStream.RemoteTrack">
            <summary>
            The remote video track. Will be null if the remote party is not sending this media
            </summary>
        </member>
        <member name="P:SIPSorcery.net.RTP.MediaStream.RtcpSession">
            <summary>
            The reporting session for this media stream.
            </summary>
        </member>
        <member name="P:SIPSorcery.net.RTP.MediaStream.DestinationEndPoint">
            <summary>
            The remote RTP end point this stream is sending media to.
            </summary>
        </member>
        <member name="P:SIPSorcery.net.RTP.MediaStream.ControlDestinationEndPoint">
            <summary>
            The remote RTP control end point this stream is sending to RTCP reports for the media stream to.
            </summary>
        </member>
        <member name="M:SIPSorcery.net.RTP.MediaStream.SendRtpRaw(System.Byte[],System.UInt32,System.Int32,System.Int32,System.UInt16)">
            <summary>
            Allows additional control for sending raw RTP payloads. No framing or other processing is carried out.
            </summary>
            <param name="data">The RTP packet payload.</param>
            <param name="timestamp">The timestamp to set on the RTP header.</param>
            <param name="markerBit">The value to set on the RTP header marker bit, should be 0 or 1.</param>
            <param name="payloadType">The payload ID to set in the RTP header.</param>
            <param name="seqNum"> The RTP sequence number </param>
        </member>
        <member name="M:SIPSorcery.net.RTP.MediaStream.SendRtpRaw(System.Byte[],System.UInt32,System.Int32,System.Int32)">
            <summary>
            Allows additional control for sending raw RTP payloads. No framing or other processing is carried out.
            </summary>
            <param name="data">The RTP packet payload.</param>
            <param name="timestamp">The timestamp to set on the RTP header.</param>
            <param name="markerBit">The value to set on the RTP header marker bit, should be 0 or 1.</param>
            <param name="payloadType">The payload ID to set in the RTP header.</param>
        </member>
        <member name="M:SIPSorcery.net.RTP.MediaStream.SendRtcpRaw(System.Byte[])">
            <summary>
            Allows additional control for sending raw RTCP payloads
            </summary>
            <param name="rtcpBytes">Raw RTCP report data to send.</param>
        </member>
        <member name="M:SIPSorcery.net.RTP.MediaStream.SendRtcpReport(System.Byte[])">
            <summary>
            Sends the RTCP report to the remote call party.
            </summary>
            <param name="reportBuffer">The serialised RTCP report to send.</param>
            <returns>True if report was sent</returns>
        </member>
        <member name="M:SIPSorcery.net.RTP.MediaStream.SendRtcpReport(SIPSorcery.Net.RTCPCompoundPacket)">
            <summary>
            Sends the RTCP report to the remote call party.
            </summary>
            <param name="report">RTCP report to send.</param>
        </member>
        <member name="M:SIPSorcery.net.RTP.MediaStream.SendRtcpFeedback(SIPSorcery.Net.RTCPFeedback)">
            <summary>
            Allows sending of RTCP feedback reports.
            </summary>
            <param name="feedback">The feedback report to send.</param>
        </member>
        <member name="M:SIPSorcery.net.RTP.MediaStream.AdjustRemoteEndPoint(System.UInt32,System.Net.IPEndPoint)">
            <summary>
            Adjusts the expected remote end point for a particular media type.
            </summary>
            <param name="ssrc">The SSRC from the RTP packet header.</param>
            <param name="receivedOnEndPoint">The actual remote end point that the RTP packet came from.</param>
            <returns>True if remote end point for this media type was the expected one or it was adjusted. False if
            the remote end point was deemed to be invalid for this media type.</returns>
        </member>
        <member name="M:SIPSorcery.net.RTP.MediaStream.CreateRtcpSession">
            <summary>
            Creates a new RTCP session for a media track belonging to this RTP session.
            </summary>
            <returns>A new RTCPSession object. The RTCPSession must have its Start method called
            in order to commence sending RTCP reports.</returns>
        </member>
        <member name="M:SIPSorcery.net.RTP.MediaStream.SetDestination(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Sets the remote end points for a media type supported by this RTP session.
            </summary>
            <param name="rtpEndPoint">The remote end point for RTP packets corresponding to the media type.</param>
            <param name="rtcpEndPoint">The remote end point for RTCP packets corresponding to the media type.</param>
        </member>
        <member name="M:SIPSorcery.net.RTP.MediaStream.GetSendingFormat">
            <summary>
            Attempts to get the highest priority sending format for the remote call party.
            </summary>
            <returns>The first compatible media format found for the specified media type.</returns>
        </member>
        <member name="E:SIPSorcery.net.RTP.VideoStream.OnVideoFormatsNegotiatedByIndex">
            <summary>
            Gets fired when the remote SDP is received and the set of common video formats is set.
            </summary>
        </member>
        <member name="E:SIPSorcery.net.RTP.VideoStream.OnVideoFrameReceivedByIndex">
            <summary>
            Gets fired when a full video frame is reconstructed from one or more RTP packets
            received from the remote party.
            </summary>
            <remarks>
             - Received from end point,
             - The frame timestamp,
             - The encoded video frame payload.
             - The video format of the encoded frame.
            </remarks>
        </member>
        <member name="P:SIPSorcery.net.RTP.VideoStream.HasVideo">
            <summary>
            Indicates whether this session is using video.
            </summary>
        </member>
        <member name="P:SIPSorcery.net.RTP.VideoStream.MaxReconstructedVideoFrameSize">
            <summary>
            Indicates the maximum frame size that can be reconstructed from RTP packets during the depacketisation
            process.
            </summary>
        </member>
        <member name="M:SIPSorcery.net.RTP.VideoStream.SendJpegFrame(System.UInt32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Helper method to send a low quality JPEG image over RTP. This method supports a very abbreviated version of RFC 2435 "RTP Payload Format for JPEG-compressed Video".
            It's intended as a quick convenient way to send something like a test pattern image over an RTSP connection. More than likely it won't be suitable when a high
            quality image is required since the header used in this method does not support quantization tables.
            </summary>
            <param name="duration">The duration in timestamp units of the payload (e.g. 3000 for 30fps).</param>
            <param name="jpegBytes">The raw encoded bytes of the JPEG image to transmit.</param>
            <param name="jpegQuality">The encoder quality of the JPEG image.</param>
            <param name="jpegWidth">The width of the JPEG image.</param>
            <param name="jpegHeight">The height of the JPEG image.</param>
        </member>
        <member name="M:SIPSorcery.net.RTP.VideoStream.SendH264Frame(System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Sends a H264 frame, represented by an Access Unit, to the remote party.
            </summary>
            <param name="duration">The duration in timestamp units of the payload (e.g. 3000 for 30fps).</param>
            <param name="payloadTypeID">The payload type ID  being used for H264 and that will be set on the RTP header.</param>
            <param name="accessUnit">The encoded H264 access unit to transmit. An access unit can contain one or more
            NAL's.</param>
            <remarks>
            An Access Unit can contain one or more NAL's. The NAL's have to be parsed in order to be able to package 
            in RTP packets.
            
            See <see href="https://www.itu.int/rec/dologin_pub.asp?lang=e&amp;id=T-REC-H.264-201602-S!!PDF-E&amp;type=items" /> Annex B for byte stream specification.
            </remarks>
        </member>
        <member name="M:SIPSorcery.net.RTP.VideoStream.SendH264Nal(System.UInt32,System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Sends a single H264 NAL to the remote party.
            </summary>
            <param name="duration">The duration in timestamp units of the payload (e.g. 3000 for 30fps).</param>
            <param name="payloadTypeID">The payload type ID  being used for H264 and that will be set on the RTP header.</param>
            <param name="nal">The buffer containing the NAL to send.</param>
            <param name="isLastNal">Should be set for the last NAL in the H264 access unit. Determines when the markbit gets set 
            and the timestamp incremented.</param>
        </member>
        <member name="M:SIPSorcery.net.RTP.VideoStream.SendVp8Frame(System.UInt32,System.Int32,System.Byte[])">
            <summary>
            Sends a VP8 frame as one or more RTP packets.
            </summary>
            <param name="duration"> The duration in timestamp units of the payload. Needs
            to be based on a 90Khz clock.</param>
            <param name="payloadTypeID">The payload ID to place in the RTP header.</param>
            <param name="buffer">The VP8 encoded payload.</param>
        </member>
        <member name="M:SIPSorcery.net.RTP.VideoStream.SendVideo(System.UInt32,System.Byte[])">
            <summary>
            Sends a video sample to the remote peer.
            </summary>
            <param name="durationRtpUnits">The duration in RTP timestamp units of the video sample. This
            value is added to the previous RTP timestamp when building the RTP header.</param>
            <param name="sample">The video sample to set as the RTP packet payload.</param>
        </member>
        <member name="M:SIPSorcery.Sys.BufferUtils.GetStringPosition(System.Byte[],System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Searches a buffer for a string up until a specified end string.
            </summary>
            <param name="buffer">The byte array to search for an instance of the specified string.</param>
            <param name="startPosition">The position in the array that the search should be started from.</param>
            <param name="endPosition">An index that if reached indicates the search should be halted.</param>
            <param name="find">The string that is being searched for.</param>
            <param name="end">If the end string is found the search is halted and a negative result returned.</param>
            <returns>The start position in the buffer of the requested string or -1 if not found.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.Crypto.GetRandomInt">
            <summary>
            Returns a 10 digit random number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.Sys.Crypto.GetRandomInt(System.Int32)">
            <summary>
            Returns a random number of a specified length.
            </summary>
        </member>
        <member name="M:SIPSorcery.Sys.Crypto.GetHash(System.String)">
            <summary>
            This version reads the whole file in at once. This is not great since it can consume
            a lot of memory if the file is large. However a buffered approach generates
            different hashes across different platforms.
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:SIPSorcery.Sys.Crypto.GetFileStream(System.String)">
            <summary>
            Used by methods wishing to perform a hash operation on a file. This method
            will perform a number of checks and if happy return a read only file stream.
            </summary>
            <param name="filepath">The path to the input file for the hash operation.</param>
            <returns>A read only file stream for the file or throws an exception if there is a problem.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.Crypto.GetRandomByteString(System.Int32)">
            <summary>
            Gets an "X2" string representation of a random number.
            </summary>
            <param name="byteLength">The byte length of the random number string to obtain.</param>
            <returns>A string representation of the random number. It will be twice the length of byteLength.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.Crypto.GetRandomBytes(System.Byte[])">
            <summary>
            Fills a buffer with random bytes.
            </summary>
            <param name="buffer">The buffer to fill.</param>
        </member>
        <member name="M:SIPSorcery.Sys.Crypto.GetSHAHashAsHex(System.String[])">
            <summary>
            Returns the hash with each byte as an X2 string. This is useful for situations where
            the hash needs to only contain safe ASCII characters.
            </summary>
            <param name="values">The list of string to concatenate and hash.</param>
            <returns>A string with "safe" (0-9 and A-F) characters representing the hash.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.Crypto.GetSHA256Hash(System.Byte[])">
            <summary>
            Gets the HSA256 hash of an arbitrary buffer.
            </summary>
            <param name="buffer">The buffer to hash.</param>
            <returns>A hex string representing the hashed buffer.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.Crypto.LoadCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.String,System.Boolean)">
            <summary>
            Attempts to load an X509 certificate from a Windows OS certificate store.
            </summary>
            <param name="storeLocation">The certificate store to load from, can be CurrentUser or LocalMachine.</param>
            <param name="certificateSubject">The subject name of the certificate to attempt to load.</param>
            <param name="checkValidity">Checks if the certificate is current and has a verifiable certificate issuer list. Should be
            set to false for self issued certificates.</param>
            <returns>A certificate object if the load is successful otherwise null.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.PasswordHash.GenerateSalt(System.Nullable{System.Int32})">
            <summary>
            Generates a salt that can be used to generate a password hash. The salt is a combination of a block of bytes to represent the 
            salt entropy and an integer that represents the iteration count to feed into the RFC289 algorithm used to derive the password hash.
            The iterations count is used to slow down the hash generating algorithm to mitigate brute force and rainbow table attacks.
            </summary>
            <param name="explicitIterations">The number of iterations used to derive the password bytes. Must be greater than the constant specifying the minimum iterations.</param>
            <returns>A string it the format iterations.salt.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.PasswordHash.Hash(System.String,System.String)">
            <summary>
            Generates the password hash from the password and salt. THe salt must be in the format iterations.salt.
            </summary>
            <param name="value">The value to generate a hash for.</param>
            <param name="salt">The salt (and iteration count) to generate the hash with.</param>
            <returns>The hash.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.Log.Reset">
            <summary>
            Intended to be called if the application wide logging configuration changes. Will force
            the singleton logger to be re-created.
            </summary>
        </member>
        <member name="F:SIPSorcery.Sys.IPSocket.MinPort">
            <summary>
            Specifies the minimum acceptable value for the <see cref='T:System.Net.IPEndPoint'/> Port property.
            </summary>
        </member>
        <member name="F:SIPSorcery.Sys.IPSocket.MaxPort">
            <summary>
            Specifies the maximum acceptable value for the <see cref='T:System.Net.IPEndPoint'/> Port property.
            </summary>
        </member>
        <member name="M:SIPSorcery.Sys.IPSocket.GetSocketString(System.Net.IPEndPoint)">
            <summary>
            This code is based on the IPEndPoint.ToString method in the dotnet source code at
            https://github.com/dotnet/corefx/blob/master/src/System.Net.Primitives/src/System/Net/IPEndPoint.cs.
            If/when that feature makes it into .NET Standard this method can be replaced.
            </summary>
        </member>
        <member name="M:SIPSorcery.Sys.IPSocket.TryParseIPEndPoint(System.String,System.Net.IPEndPoint@)">
            <summary>
            This code is based on the IPEndPoint.TryParse method in the dotnet source code at
            https://github.com/dotnet/corefx/blob/master/src/System.Net.Primitives/src/System/Net/IPEndPoint.cs.
            If/when that feature makes it into .NET Standard this method can be replaced.
            </summary>
            <param name="s">The end point string to parse.</param>
            <param name="result">If the parse is successful this output parameter will contain the IPv4 or IPv6 end point.</param>
            <returns>Returns true if the string could be successfully parsed as an IPv4 or IPv6 end point. False if not.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.IPSocket.ParsePortFromSocket(System.String)">
            <summary>
            For IPv6 addresses with port the string format is of the form:
            [2a02:8084:6981:7880:54a9:d238:b2ee:ceb]:6060
            Without a port the form is:
            2a02:8084:6981:7880:54a9:d238:b2ee:ceb
            </summary>
            <param name="socket">The socket string to check </param>
            <returns>The socket string's explicit port number or 0 if it does not have one.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.IPSocket.IsIPAddress(System.String)">
            <summary>
            (convenience method) check if string can be parsed as IPAddress
            </summary>
            <param name="socket">string to check</param>
            <returns>true/false</returns>
        </member>
        <member name="M:SIPSorcery.Sys.IPSocket.IsPrivateAddress(System.String)">
             <summary>
             Checks the Contact SIP URI host and if it is recognised as a private address it is replaced with the socket
             the SIP message was received on.
             
             Private address space blocks RFC 1597.
            		10.0.0.0        -   10.255.255.255
            		172.16.0.0      -   172.31.255.255
            		192.168.0.0     -   192.168.255.255
            
             </summary>
        </member>
        <member name="M:SIPSorcery.Sys.IPSocket.Parse(System.String,System.String@,System.Int32@)">
            <summary>
            Check if <paramref name="endpointstring"/> contains a hostname or ip-address and ip-port
            accepts IPv4 and IPv6 and IPv6 mapped IPv4 addresses
            return detected values in <paramref name="host"/> and <paramref name="port"/>
            
            adapted from: http://stackoverflow.com/questions/2727609/best-way-to-create-ipendpoint-from-string
            </summary>
            <remarks>
            rj2: I had the requirement of parsing an IPEndpoint with IPv6, v4 and hostnames and getting them as string and int
            </remarks>
            <param name="endpointstring">string to check</param>
            <param name="host">host-portion of <paramref name="endpointstring"/>, if host can be parsed as IPAddress, then <paramref name="host"/> is IPAddress.ToString</param>
            <param name="port">port-portion of <paramref name="endpointstring"/></param>
            <returns>true if host-portion of endpoint string is valid ip-address</returns>
            <exception cref="T:System.ArgumentException">if <paramref name="endpointstring"/> is null/empty </exception>
            <exception cref="T:System.FormatException">if host looks like ip-address but can't be parsed</exception>
        </member>
        <member name="M:SIPSorcery.Sys.IPSocket.GetIPEndPoint(System.String)">
            <summary>
            Returns an IPv4 end point from a socket address in 10.0.0.1:5060 format.
            </summary>>
        </member>
        <member name="M:SIPSorcery.Sys.NetConvert.ParseUInt16(System.Byte[],System.Int32)">
            <summary>
            Parse a UInt16 from a network buffer using network byte order.
            </summary>
            <param name="buffer">The buffer to parse the value from.</param>
            <param name="posn">The position in the buffer to start the parse from.</param>
            <returns>A UInt16 value.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetConvert.ParseUInt32(System.Byte[],System.Int32)">
            <summary>
            Parse a UInt32 from a network buffer using network byte order.
            </summary>
            <param name="buffer">The buffer to parse the value from.</param>
            <param name="posn">The position in the buffer to start the parse from.</param>
            <returns>A UInt32 value.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetConvert.ParseUInt64(System.Byte[],System.Int32)">
            <summary>
            Parse a UInt64 from a network buffer using network byte order.
            </summary>
            <param name="buffer">The buffer to parse the value from.</param>
            <param name="posn">The position in the buffer to start the parse from.</param>
            <returns>A UInt64 value.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetConvert.ToBuffer(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Writes a UInt16 value to a network buffer using network byte order.
            </summary>
            <param name="val">The value to write to the buffer.</param>
            <param name="buffer">The buffer to write the value to.</param>
            <param name="posn">The start position in the buffer to write the value at.</param>
        </member>
        <member name="M:SIPSorcery.Sys.NetConvert.GetBytes(System.UInt16)">
            <summary>
            Get a buffer representing the unsigned 16 bit integer in network
            byte (big endian) order.
            </summary>
            <param name="val">The value to convert.</param>
            <returns>A buffer representing the value in network order </returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetConvert.ToBuffer(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Writes a UInt32 value to a network buffer using network byte order.
            </summary>
            <param name="val">The value to write to the buffer.</param>
            <param name="buffer">The buffer to write the value to.</param>
            <param name="posn">The start position in the buffer to write the value at.</param>
        </member>
        <member name="M:SIPSorcery.Sys.NetConvert.GetBytes(System.UInt32)">
            <summary>
            Get a buffer representing the 32 bit unsigned integer in network
            byte (big endian) order.
            </summary>
            <param name="val">The value to convert.</param>
            <returns>A buffer representing the value in network order </returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetConvert.ToBuffer(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Writes a UInt64 value to a network buffer using network byte order.
            </summary>
            <param name="val">The value to write to the buffer.</param>
            <param name="buffer">The buffer to write the value to.</param>
            <param name="posn">The start position in the buffer to write the value at.</param>
        </member>
        <member name="M:SIPSorcery.Sys.NetConvert.GetBytes(System.UInt64)">
            <summary>
            Get a buffer representing the 64 bit unsigned integer in network
            byte (big endian) order.
            </summary>
            <param name="val">The value to convert.</param>
            <returns>A buffer representing the value in network order </returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetConvert.EndianFlip(System.UInt32)">
            <summary>
            Reverses the endianness of a UInt32.
            </summary>
            <param name="val">The value to flip.</param>
            <returns>The same value but with the endianness flipped.</returns>
        </member>
        <member name="T:SIPSorcery.Sys.NetServices">
            <summary>
            Helper class to provide network services.
            </summary>
        </member>
        <member name="F:SIPSorcery.Sys.NetServices.MAXIMUM_UDP_PORT_BIND_ATTEMPTS">
            <summary>
            The maximum number of re-attempts that will be made when trying to bind a UDP socket.
            </summary>
        </member>
        <member name="F:SIPSorcery.Sys.NetServices.INTERNET_IPADDRESS">
            <summary>
            IP address to use when getting default IP address from OS.
            No connection is established.
            </summary>
        </member>
        <member name="F:SIPSorcery.Sys.NetServices.INTERNET_IPv6ADDRESS">
            <summary>
            IP address to use when getting default IPv6 address from OS.
            No connection is established.
            </summary>
        </member>
        <member name="F:SIPSorcery.Sys.NetServices.NETWORK_TEST_PORT">
            <summary>
            Port to use when doing a Udp.Connect to determine local IP
            address (port 0 does not work on MacOS).
            </summary>
        </member>
        <member name="F:SIPSorcery.Sys.NetServices.LOCAL_ADDRESS_CACHE_LIFETIME_SECONDS">
            <summary>
            The amount of time to leave the result of a local IP address
            determination in the cache.
            </summary>
        </member>
        <member name="F:SIPSorcery.Sys.NetServices._supportsDualModeIPv4PacketInfo">
            <summary>
            Doing the same check as here https://github.com/dotnet/corefx/blob/e99ec129cfd594d53f4390bf97d1d736cff6f860/src/System.Net.Sockets/src/System/Net/Sockets/SocketPal.Unix.cs#L19.
            Which is checking if a dual mode socket can use the *ReceiveFrom* methods in order to
            be able to get the remote destination end point.
            To date the only case this has cropped up for is Mac OS as per https://github.com/sipsorcery/sipsorcery/issues/207.
            </summary>
        </member>
        <member name="F:SIPSorcery.Sys.NetServices.m_localAddressTable">
            <summary>
            A lookup collection to cache the local IP address for a destination address. The collection will cache results of
            asking the Operating System which local address to use for a destination address. The cache saves a relatively 
            expensive call to create a socket and ask the OS for a route lookup.
            
            TODO:  Clear this cache if the state of the local network interfaces change.
            </summary>
        </member>
        <member name="P:SIPSorcery.Sys.NetServices.LocalIPAddresses">
            <summary>
            The list of IP addresses that this machine can use.
            </summary>
        </member>
        <member name="P:SIPSorcery.Sys.NetServices.InternetDefaultAddress">
            <summary>
            The local IP address this machine uses to communicate with the Internet.
            </summary>
        </member>
        <member name="P:SIPSorcery.Sys.NetServices.InternetDefaultIPv6Address">
            <summary>
            The local IPv6 address this machine uses to communicate with the Internet.
            </summary>
        </member>
        <member name="M:SIPSorcery.Sys.NetServices.CheckBindAddressAndThrow(System.Net.IPAddress)">
            <summary>
            Checks whether an IP address can be used on the underlying System.
            </summary>
            <param name="bindAddress">The bind address to use.</param>
        </member>
        <member name="M:SIPSorcery.Sys.NetServices.CreateBoundUdpSocket(System.Int32,System.Net.IPAddress,System.Boolean,System.Boolean)">
            <summary>
            Attempts to create and bind a UDP socket. The socket is always created with the ExclusiveAddressUse socket option
            set to accommodate a Windows 10 .Net Core socket bug where the same port can be bound to two different
            sockets, see https://github.com/dotnet/runtime/issues/36618.
            </summary>
            <param name="port">The port to attempt to bind on. Set to 0 to request the underlying OS to select a port.</param>
            <param name="bindAddress">Optional. If specified the UDP socket will attempt to bind using this specific address.
            If not specified the broadest possible address will be chosen. Either IPAddress.Any or IPAddress.IPv6Any.</param>
            <param name="requireEvenPort">If true the method will only return successfully if it is able to bind on an
            even numbered port.</param>
            <param name="useDualMode">If true then IPv6 sockets will be created as dual mode IPv4/IPv6 on supporting systems.</param>
            <returns>A bound socket if successful or throws an ApplicationException if unable to bind.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetServices.CreateBoundTcpSocket(System.Int32,System.Net.IPAddress,System.Boolean,System.Boolean)">
            <summary>
            Attempts to create and bind a TCP socket. The socket is always created with the ExclusiveAddressUse socket option
            set to accommodate a Windows 10 .Net Core socket bug where the same port can be bound to two different
            sockets, see https://github.com/dotnet/runtime/issues/36618.
            </summary>
            <param name="port">The port to attempt to bind on. Set to 0 to request the underlying OS to select a port.</param>
            <param name="bindAddress">Optional. If specified the TCP socket will attempt to bind using this specific address.
            If not specified the broadest possible address will be chosen. Either IPAddress.Any or IPAddress.IPv6Any.</param>
            <param name="requireEvenPort">If true the method will only return successfully if it is able to bind on an
            even numbered port.</param>
            <param name="useDualMode">If true then IPv6 sockets will be created as dual mode IPv4/IPv6 on supporting systems.</param>
            <returns>A bound socket if successful or throws an ApplicationException if unable to bind.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetServices.CreateBoundSocket(System.Int32,System.Net.IPAddress,System.Net.Sockets.ProtocolType,System.Boolean,System.Boolean)">
            <summary>
            Attempts to create and bind a socket with defined protocol. The socket is always created with the ExclusiveAddressUse socket option
            set to accommodate a Windows 10 .Net Core socket bug where the same port can be bound to two different
            sockets, see https://github.com/dotnet/runtime/issues/36618.
            </summary>
            <param name="port">The port to attempt to bind on. Set to 0 to request the underlying OS to select a port.</param>
            <param name="bindAddress">Optional. If specified the socket will attempt to bind using this specific address.
            If not specified the broadest possible address will be chosen. Either IPAddress.Any or IPAddress.IPv6Any.</param>
            <param name="protocolType">Optional. If specified the socket procotol</param>
            <param name="requireEvenPort">If true the method will only return successfully if it is able to bind on an
            even numbered port.</param>
            <param name="useDualMode">If true then IPv6 sockets will be created as dual mode IPv4/IPv6 on supporting systems.</param>
            <returns>A bound socket if successful or throws an ApplicationException if unable to bind.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetServices.CreateRtpSocket(System.Boolean,System.Net.IPAddress,System.Int32,SIPSorcery.Sys.PortRange,System.Net.Sockets.Socket@,System.Net.Sockets.Socket@)">
            <summary>
            Attempts to create and bind a new RTP UDP Socket, and optionally an control (RTCP), socket(s).
            The RTP and control sockets created are IPv4 and IPv6 dual mode sockets which means they can send and receive
            either IPv4 or IPv6 packets.
            </summary>
            <param name="createControlSocket">True if a control (RTCP) socket should be created. Set to false if RTP
            and RTCP are being multiplexed on the same connection.</param>
            <param name="bindAddress">Optional. If null The RTP and control sockets will be created as IPv4 and IPv6 dual mode 
            sockets which means they can send and receive either IPv4 or IPv6 packets. If the bind address is specified an attempt
            will be made to bind the RTP and optionally control listeners on it.</param>
            <param name="bindPort">Optional. If 0 the choice of port will be left up to the Operating System. If specified
            a single attempt will be made to bind on the port.</param>
            <param name="portRange">Optional. If non-null the choice of port will be left up to the PortRange. Multiple ports will be
            tried before giving up. The parameter bindPort is ignored.</param>
            <param name="rtpSocket">An output parameter that will contain the allocated RTP socket.</param>
            <param name="controlSocket">An output parameter that will contain the allocated control (RTCP) socket.</param>
        </member>
        <member name="M:SIPSorcery.Sys.NetServices.CreateRtpSocket(System.Boolean,System.Net.Sockets.ProtocolType,System.Net.IPAddress,System.Int32,SIPSorcery.Sys.PortRange,System.Boolean,System.Boolean,System.Net.Sockets.Socket@,System.Net.Sockets.Socket@)">
            <summary>
            Attempts to create and bind a new RTP Socket with protocol, and optionally an control (RTCP), socket(s).
            The RTP and control sockets created are IPv4 and IPv6 dual mode sockets which means they can send and receive
            either IPv4 or IPv6 packets.
            </summary>
            <param name="createControlSocket">True if a control (RTCP) socket should be created. Set to false if RTP
            and RTCP are being multiplexed on the same connection.</param>
            <param name="protocolType">Procotol used by socket</param>
            <param name="bindAddress">Optional. If null The RTP and control sockets will be created as IPv4 and IPv6 dual mode 
            sockets which means they can send and receive either IPv4 or IPv6 packets. If the bind address is specified an attempt
            will be made to bind the RTP and optionally control listeners on it.</param>
            <param name="bindPort">Optional. If 0 the choice of port will be left up to the Operating System. If specified
            a single attempt will be made to bind on the port.</param>
            <param name="portRange">Optional. If non-null the choice of port will be left up to the PortRange. Multiple ports will be
            tried before giving up. The parameter bindPort is ignored.</param>
            <param name="requireEvenPort"></param>
            <param name="useDualMode"></param>
            <param name="rtpSocket">An output parameter that will contain the allocated RTP socket.</param>
            <param name="controlSocket">An output parameter that will contain the allocated control (RTCP) socket.</param>
        </member>
        <member name="M:SIPSorcery.Sys.NetServices.DoCheckSupportsDualModeIPv4PacketInfo">
            <summary>
            Dual mode sockets are created by default if an IPv6 bind address was specified.
            Dual mode needs to be disabled for Mac OS sockets as they don't support the use
            of dual mode and the receive methods that return packet information. Packet info
            is needed to get the remote recipient.
            </summary>
            <returns>True if the underlying OS supports dual mode IPv6 sockets WITH the socket ReceiveFrom methods
            which are required to get the remote end point. False if not</returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetServices.GetLocalAddressForRemote(System.Net.IPAddress)">
            <summary>
            This method utilises the OS routing table to determine the local IP address to connect to a destination end point.
            It selects the correct local IP address, on a potentially multi-honed host, to communicate with a destination IP address.
            See https://github.com/sipsorcery/sipsorcery/issues/97 for elaboration.
            </summary>
            <param name="destination">The remote destination to find a local IP address for.</param>
            <returns>The local IP address to use to connect to the remote end point.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetServices.GetLocalAddressForInternet">
            <summary>
            Gets the default local address for this machine for communicating with the Internet.
            </summary>
            <returns>The local address this machine should use for communicating with the Internet.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetServices.GetLocalIPv6AddressForInternet">
            <summary>
            Gets the default local IPv6 address for this machine for communicating with the Internet.
            </summary>
            <returns>The local address this machine should use for communicating with the Internet.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetServices.GetLocalAddressesOnInterface(System.Net.IPAddress,System.Boolean)">
            <summary>
            Determines the local IP address to use to connection a remote address and
            returns all the local addresses (IPv4 and IPv6) that are bound to the same 
            interface. The main (and probably sole) use case for this method is 
            gathering host candidates for a WebRTC ICE session. Rather than selecting
            ALL local IP addresses only those on the interface needed to connect to
            the destination are returned.
            </summary>
            <param name="destination">Optional. If not specified the interface that
            connects to the Internet will be used.</param>
            <param name="includeAllInterfaces">By default only the single interface that is used to
            connect to the destination address (or internet address if it's null) will be 
            used to get the list of IP addresses. This default behaviour is to shield all local
            IP addresses being included in ICE candidates. In some circumstances, and after
            weighing up the security concerns, it's very useful to include all interfaces in
            when generating the address list. Setting this parameter to true will cause all 
            interfaces to be used irrespective of the destination address.</param>
            <returns>A list of local IP addresses on the identified interface(s).</returns>
        </member>
        <member name="M:SIPSorcery.Sys.NetServices.GetAllLocalIPAddresses">
            <summary>
            Gets all the IP addresses for all active interfaces on the machine.
            </summary>
            <returns>A list of all local IP addresses.</returns>
        </member>
        <member name="T:SIPSorcery.Sys.PortRange">
            <summary>
            Class to manage port allocation for Rtp Ports. Ports are always even, because
            due Rtp data and control ports are always with data on even port and 
            control (if any) on data_port + 1
            
            There are two operation modes:
             - The sequential mode which hands out all ports within the assigned range and 
            wraps around if the last port was assigned
             - The shuffled mode: Ports are handed out evenly distributed within the assigned
             port range.
            </summary>
        </member>
        <member name="M:SIPSorcery.Sys.PortRange.#ctor(System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Initializes a new PortRange.
            </summary>
            <param name="startPort">Inclusive, lowest port within this portrange. must be an even number</param>
            <param name="endPort">Inclusive, highest port within this portrange.</param>
            <param name="shuffle">optional, if set, the ports are assigned in a pseudorandom order.</param>
            <param name="randomSeed">optional, the seed for the pseudorandom order.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:SIPSorcery.Sys.PortRange.GetNextPort">
            <summary>
            Calculates the next port which should be tried.
            No guarantee is made, that the returned port can also be bound to; actual check is still needed.
            Caller of this method should try to bind to the socket and if not successful, try again for x times
            before giving up.
            
            This method is thread-safe
            </summary>
            <returns>port from the portrange</returns>
        </member>
        <member name="T:SIPSorcery.Sys.IPv4Header">
             <summary>
                 0                   1                   2                   3   
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |Version|  IHL  |Type of Service|          Total Length         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |         Identification        |Flags|      Fragment Offset    |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |  Time to Live |    Protocol   |         Header Checksum       |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                       Source Address                          |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                    Destination Address                        |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                    Options                    |    Padding    |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            
             </summary>
        </member>
        <member name="T:SIPSorcery.Sys.UDPPacket">
            <summary>
             0      7 8     15 16    23 24    31  
             +--------+--------+--------+--------+ 
             |     Source      |   Destination   | 
             |      Port       |      Port       | 
             +--------+--------+--------+--------+ 
             |                 |                 | 
             |     Length      |    Checksum     | 
             +--------+--------+--------+--------+ 
             |                                     
             |          data octets ...            
             +---------------- ...            
             
            </summary>
        </member>
        <member name="M:SIPSorcery.Sys.RawSocket.SendSpoofedPacket(System.Byte[],System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            The goal of this method was to send a dummy packet through a NAT gateway in an attempt to create a rule for 
            incoming packets. There are better ways to do this now, UPNP etc.
            </summary>
        </member>
        <member name="M:SIPSorcery.Sys.TypeExtensions.IsNullOrBlank(System.String)">
            <summary>    
            Gets a value that indicates whether or not the collection is empty.    
            </summary>    
        </member>
        <member name="M:SIPSorcery.Sys.TypeExtensions.Slice(System.String,System.Char,System.Char)">
            <summary>
            Returns a slice from a string that is delimited by the first instance of a 
            start and end character. The delimiting characters are not included.
            
            <code>
            "sip:127.0.0.1:5060;connid=1234".slice(':', ';') => "127.0.0.1:5060"
            </code>
            </summary>
            <param name="s">The input string to extract the slice from.</param>
            <param name="startDelimiter">The character to start the slice from. The first instance of the character found is used.</param>
            <param name="endDelimeter">The character to end the slice on. The first instance of the character found is used.</param>
            <returns>A slice of the input string or null if the slice is not possible.</returns>
        </member>
        <member name="M:SIPSorcery.Sys.TypeExtensions.Deconstruct``1(System.Collections.Generic.IList{``0},``0@,``0@)">
            <summary>
            Purpose of this extension is to allow deconstruction of a list into a fixed size tuple.
            </summary>
            <example>
            (var field0, var field1) = "a b c".Split();
            </example>
        </member>
        <member name="M:SIPSorcery.Sys.TypeExtensions.Deconstruct``1(System.Collections.Generic.IList{``0},``0@,``0@,``0@)">
            <summary>
            Purpose of this extension is to allow deconstruction of a list into a fixed size tuple.
            </summary>
            <example>
            (var field0, var field1, var field2) = "a b c".Split();
            </example>
        </member>
        <member name="M:SIPSorcery.Sys.TypeExtensions.Deconstruct``1(System.Collections.Generic.IList{``0},``0@,``0@,``0@,``0@)">
            <summary>
            Purpose of this extension is to allow deconstruction of a list into a fixed size tuple.
            </summary>
            <example>
            (var field0, var field1, var field2, var field3) = "a b c d".Split();
            </example>
        </member>
    </members>
</doc>
