
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v2.0.0.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace RV.WebRTCForwarders {
    using System.Diagnostics;
    using System.Text.RegularExpressions;
    using Terminal.Gui;
    using Wiry.Base32;
    using System.Security.Cryptography;
    using System.Buffers.Text;
    using ICSharpCode.SharpZipLib;
    using ICSharpCode.SharpZipLib.Zip;
    using System.Text;
    using System.Xml;
    using Tomlyn.Model;
    using Tomlyn;

    public partial class PortNumberCalculationUtils {
        
        public PortNumberCalculationUtils() {
            InitializeComponent();
            portnumber.Text = "10010";
            confout.Enabled = false;

            calculatebutton.Accept += (_, _) => {
                MessageBox.Query(70, 24, "What's this?", "This makes a port number into a set of IP addresses; for internal use. " +
                    "Five digits, first two digits are 10, next one goes in the 10.x and the next two go in the y field of 10.x.y " +
                    "and the server is 1, client is 0 for z in 10.x.y.z.", "Ok");
                string addr = portnumber.Text;
                string[] a = Regex.Split(addr, String.Empty);
                int Addr_8 = int.Parse(a[0] + a[1]);
                int Addr_8_16 = int.Parse(a[2]);
                int Addr_16_24 = int.Parse(a[3]+a[4]);
                int Addr_24_32 = role.SelectedItem == 0 ? 1 : 2;
                int Addr_24_32_peer = Addr_24_32 == 1 ? 2 : 1;
                string Addresses = $"{Addr_8}.{Addr_8_16}.{Addr_16_24}.{Addr_24_32}/24";
                string PeerAllowedIPs = $"{Addr_8}.{Addr_8_16}.{Addr_16_24}.{Addr_24_32}/32";
                string configuration;
                configuration = $"Address = {Addresses}\r\n";
                configuration += $"PrivateKey = [Privkey]\r\n";
                if(role.SelectedItem == 0)
                {
                    configuration += $"ListenPort = {portnumber.Text}\r\n";
                }
                configuration += $"\r\n\r\n[Peer]\r\n";
                if (role.SelectedItem == 1)
                {
                    configuration += $"Endpoint = 127.0.0.1:{portnumber.Text}\r\n";
                }
                configuration += $"AllowedIPs = {PeerAllowedIPs}\r\n";
                configuration += $"PublicKey = [Peer_pubkey]";
                confout.Text = configuration;
                confout.SelectAll();
                confout.Copy();
                };
            genkeysbutton.Accept += (_, _) => {
                try
                {
                    var PrivO = new ProcessStartInfo()
                    {
                        FileName = "wg",
                        Arguments = "genkey",
                        RedirectStandardOutput = true,
                    };
                    var ProcessPrivO = Process.Start(PrivO);
                    string privKeyO = ProcessPrivO.StandardOutput.ReadToEnd();
                    privKeyOurs.Text = privKeyO;
                    var PubO = new ProcessStartInfo()
                    {
                        FileName = "wg",
                        Arguments = "pubkey",
                        RedirectStandardOutput = true,
                        RedirectStandardInput = true,
                    };
                    var ProcessPubO = Process.Start(PubO);
                    ProcessPubO.StandardInput.Write(privKeyO);
                    ProcessPubO.StandardInput.Flush();
                    ProcessPubO.StandardInput.Close();
                    pubKeyOurs.Text = ProcessPubO.StandardOutput.ReadToEnd();
                    var ProcessPrivT = Process.Start(PrivO);
                    string privKeyT = ProcessPrivT.StandardOutput.ReadToEnd();
                    privKeyTheirs.Text = privKeyT;
                    var ProcessPubT = Process.Start(PubO);
                    ProcessPubT.StandardInput.Write(privKeyT);
                    ProcessPubT.StandardInput.Flush();
                    ProcessPubT.StandardInput.Close();
                    pubKeyTheirs.Text = ProcessPubT.StandardOutput.ReadToEnd();

                    /* Config */
                    string addr = portnumber.Text;
                    string[] a = Regex.Split(addr, String.Empty);
                    int Addr_8 = int.Parse(a[0] + a[1]);
                    int Addr_8_16 = int.Parse(a[2]);
                    int Addr_16_24 = int.Parse(a[3] + a[4]);
                    int Addr_24_32 = role.SelectedItem == 0 ? 1 : 2;
                    int Addr_24_32_peer = Addr_24_32 == 1 ? 2 : 1;
                    string Addresses = $"{Addr_8}.{Addr_8_16}.{Addr_16_24}.{Addr_24_32}/24";
                    string PeerAllowedIPs = $"{Addr_8}.{Addr_8_16}.{Addr_16_24}.{Addr_24_32_peer}/32";
                    string configuration;
                    configuration = $"Address = {Addresses}\r\n";
                    configuration += $"PrivateKey =  {privKeyO}\r\n";
                    if (role.SelectedItem == 0)
                    {
                        configuration += $"ListenPort = {portnumber.Text}\r\n";
                    }
                    configuration += $"\r\n\r\n[Peer]\r\n";
                    if (role.SelectedItem == 1)
                    {
                        configuration += $"Endpoint = 127.0.0.1:{portnumber.Text}\r\n";
                    }
                    configuration += $"AllowedIPs = {PeerAllowedIPs}\r\n";
                    configuration += $"PublicKey = {pubKeyTheirs.Text}";
                    confout.Text = configuration;
                    confout.SelectAll();
                    confout.Copy();
                    byte[] random8bytes = new byte[16];
                    var RNG = RandomNumberGenerator.Create();
                    RNG.GetBytes(random8bytes);
                    string random128bits = Wiry.Base32.Base32Encoding.Standard.GetString(random8bytes)[0..26];
                    string random128bitsHumanFriendly = Utils.MakeItLookLikeACdKey(random128bits);
                    MessageBox.Query("Keep this safe!", $"You won't see this again;\r\nWrite it down: \r\n{random128bitsHumanFriendly}", "Done!");
                    MessageBox.Query("Decoded debug", $"Decoded debug: \r\n{
                        Convert.ToBase64String(
                            Wiry.Base32.Base32Encoding.Standard.ToBytes(
                                Utils.MakeItNormalBase32(random128bitsHumanFriendly)
                            )
                        )
                        }", "Ok");
                    MessageBox.Query("Warning", $"This will overwrite: {portnumber.Text}.tun.theirs.zip with an encrypted ZIP.\r\n" +
                        $"This will overwrite: {portnumber.Text}.tun.ours.zip with an encrypted ZIP.\r\n" +
                        $"Close the program immediately if you don't want this.", "Ok, I understand");

                    /* Other side configuration */
                    string addrT = portnumber.Text;
                    string[] aT = Regex.Split(addr, String.Empty);
                    int Addr_8_T = int.Parse(a[0] + a[1]);
                    int Addr_8_16_T = int.Parse(a[2]);
                    int Addr_16_24_T = int.Parse(a[3] + a[4]);
                    int Addr_24_32_T = role.SelectedItem == 0 ? 2 : 1;
                    int Addr_24_32_peer_T = Addr_24_32 == 1 ? 1 : 2;
                    string AddressesT = $"{Addr_8_T}.{Addr_8_16_T}.{Addr_16_24_T}.{Addr_24_32_T}/24";
                    string PeerAllowedIPsT = $"{Addr_8_T}.{Addr_8_16_T}.{Addr_16_24_T}.{Addr_24_32_peer_T}/32";
                    string configurationT;
                    configurationT = $"Address = {AddressesT}\r\n";
                    configurationT += $"PrivateKey =  {privKeyTheirs.Text}\r\n";
                    if (role.SelectedItem == 1)
                    {
                        configurationT += $"ListenPort = {portnumber.Text}\r\n";
                    }
                    configurationT += $"\r\n\r\n[Peer]\r\n";
                    if (role.SelectedItem == 0)
                    {
                        configurationT += $"Endpoint = 127.0.0.1:{portnumber.Text}\r\n";
                    }
                    configurationT += $"AllowedIPs = {PeerAllowedIPsT}\r\n";
                    configurationT += $"PublicKey = {pubKeyOurs.Text}";
                    confoutTheirs.Text = configurationT;
                    confoutTheirs.SelectAll();
                    confout.Copy();

                    /* Create the ZIP file */

                    var ZOT = new ZipOutputStream(File.Create($"{portnumber.Text}.tun.otherside.zip"));
                    ZOT.Password = random128bitsHumanFriendly;

                    ZipEntry ZE = new ZipEntry("wg.conf");
                    ZE.AESKeySize = 256;
                    ZE.Comment = "Wireguard configuration";
                    //ZE.IsCrypted = true;
                    ZOT.PutNextEntry(ZE);
                    ZOT.Write(Encoding.UTF8.GetBytes(confoutTheirs.Text));
                    ZOT.CloseEntry();
                    ZipEntry ZE_SVC = new ZipEntry("rvtunsvc.xml");
                    ZE_SVC.AESKeySize = 256;
                    ZE_SVC.Comment = "Service coniguration";
                    ZOT.PutNextEntry(ZE_SVC);

                    /* Create the SM file */
                    var XS = new XmlWriterSettings() {
                        Indent = true,
                        NewLineChars = "\r\n"
                    };
                    var XW = XmlWriter.Create(ZOT);
                    XW.WriteStartElement("service");
                    XW.WriteStartElement("id");
                    XW.WriteString($"TUNSVC-RV-{portnumber.Text}");
                    XW.WriteEndElement();
                    XW.WriteStartElement("name");
                    XW.WriteString($"TUNSVC-RV-{portnumber.Text}");
                    XW.WriteEndElement();
                    XW.WriteStartElement("executable");
                    XW.WriteString($"powershell");
                    XW.WriteEndElement();
                    XW.WriteStartElement("arguments");
                    XW.WriteString($"-ExecutionPolicy Bypass {portnumber.Text}.service.ps1");
                    XW.WriteEndElement();

                    XW.WriteStartElement("log");
                    XW.WriteStartAttribute("mode");
                    XW.WriteString("roll");
                    XW.WriteEndAttribute();
                    XW.WriteEndElement();
                    XW.WriteEndElement();
                    XW.Flush();

                    ZipEntry ZE_PS = new ZipEntry($"{portnumber.Text}.service.ps1");
                    ZE_PS.AESKeySize = 256;
                    ZE_PS.Comment = "Service Powershell Script (Win32/Win64)";
                    ZOT.CloseEntry();
                    ZOT.PutNextEntry(ZE_PS);
                    string runCommandTheirs = role.SelectedItem == 0 ? "..\\common\\o-l.exe" : "..\\common\\a-c.exe";
                    string powershellScriptTheirs = "do {\r\n" +
                    $"{runCommandTheirs}\r\n" +
                    $"Start-Sleep -Seconds 2\r\n" +
                    "}\r\n" +
                    "until ($false)";
                    ZOT.Write(Encoding.UTF8.GetBytes(powershellScriptTheirs));

                    /* Finish ZIP here */
                    ZOT.CloseEntry();
                    ZipEntry config = new ZipEntry("config.toml");
                    config.AESKeySize = 256;
                    
                    ZOT.PutNextEntry(config);
                    Utils.ConfigOut co = new Utils.ConfigOut() {
                        ServiceConfigXmlFileName = "rvtunsvc.xml",
                        ServicePowershellScript = $"{portnumber.Text}.service.ps1",
                        WebRtcForwarderConfigurationFileName = "",
                        WireguardConfigName = "wg.conf"
                    };
                    string config_toml = Toml.FromModel(co.ToTomlTable());
                    MessageBox.Query("TOML", config_toml, "OK");
                    ZOT.Write(Encoding.UTF8.GetBytes(config_toml));
                    ZOT.Flush();
                    ZOT.CloseEntry();
                    

                    ZOT.Flush();
                    ZOT.Close();
                    string runCommandOurs = role.SelectedItem == 1 ? "..\\common\\o-l.exe" : "..\\common\\a-c.exe";
                    string powershellScriptOurs = "do {\r\n" +
                    $"{runCommandOurs}\r\n" +
                    $"Start-Sleep -Seconds 2\r\n" +
                    "}\r\n" +
                    "until ($false)";
                    File.WriteAllText($"{portnumber.Text}.ours.service.ps1", powershellScriptOurs);

                    var XWO = XmlWriter.Create("rvtunsvc.xml");
                    XWO.WriteStartElement("service");
                    XWO.WriteStartElement("id");
                    XWO.WriteString($"TUNSVC-RV-{portnumber.Text}");
                    XWO.WriteEndElement();
                    XWO.WriteStartElement("name");
                    XWO.WriteString($"TUNSVC-RV-{portnumber.Text}");
                    XWO.WriteEndElement();
                    XWO.WriteStartElement("executable");
                    XWO.WriteString($"powershell");
                    XWO.WriteEndElement();
                    XWO.WriteStartElement("arguments");
                    XWO.WriteString($"-ExecutionPolicy Bypass {portnumber.Text}.ours.service.ps1");
                    XWO.WriteEndElement();

                    XWO.WriteStartElement("log");
                    XWO.WriteStartAttribute("mode");
                    XWO.WriteString("roll");
                    XWO.WriteEndAttribute();
                    XWO.WriteEndElement();
                    XWO.WriteEndElement();
                    XWO.Flush();
                    XWO.Close();
                    File.WriteAllText($"wg.{portnumber.Text}.conf", confout.Text);


                }
                catch (System.Exception E)
                {
                    MessageBox.Query(70, 24, "Exception", $"{E.ToString()}");
                }
            };
        }
    }
}
